{"Name": "Storj", "Repository": "oreandawe/storjshare-cli", "Registry": "https://hub.docker.com/r/oreandawe/storjshare-cli/", "Network": "bridge", "Privileged": "false", "Project": "https://storj.io", "Overview": "STORJ DAEMON Docker - using Storj public automated build. This template, nor author, are affiliated with storj.io. \r\n      https://www.storj.io\r\n      https://hub.docker.com/r/oreandawe/storjshare-cli/\r\n\r\n   Storj is a Crypto-asset and P2P cloud storage service. This Docker runs the back-end client for Storj allowing internet users to rent their disk space and earn SJX an Ethereum asset.  **The template author makes no guarantee that SJX or ETH will retain, or increase in fiat value.** This is only the Storj Daemon and CLI tool.\r\n\r\nSETUP REQUIREMENTS:\r\n-------------------------------------\r\n    1.   TCP ports 4000 open on host and setup on container (should be set below)\r\n    2.   Path on host for Storj data to sit.  IE: make a user share,  /mnt/user/storj \r\n    3.   Your Ethereum-based wallet address.\r\n    4.   The max allowed space STORJ can take up on the host; remember to make it less \r\n\r\nSTORJ DAEMON STATUS:  (In your command line)\r\n--------------------------------------------------\r\ndocker exec Storj storjshare status\r\n--------------------------------------------------\r\n\r\nOptional Component:\r\nStorjStat is a free community made tool for monitoring your Storj farming node(s), the tool gives you both real-time and historical analysis. See storjstat.com and calxibe/StorjMonitor for more information. The StorjStat API is optionally supported by using the STORJ_MONITOR_API_KEY environment variable when starting the storjshare-cli Docker container.", "WebUI": "", "TemplateURL": "https://raw.githubusercontent.com/Jcloud67/Docker-Templates/master/Storj.xml", "Icon": "https://i.imgur.com/hfyAiA4.png", "ExtraParams": "--restart=always", "PostArgs": "", "MinVer": "6.4.1", "Networking": {"Mode": "bridge"}, "Repo": "JCloud's Repository", "CategoryList": ["Cloud", "Tools-Utilities", "Other", "Network-Other"], "Config": {"Port": {"Storj TCP ports": {"value": "4000-4003", "Name": "Storj TCP ports", "Target": "4000-4003", "Default": "4000-4003", "Mode": "tcp", "Description": "Storj service uses TCP 4000. However, if it doesn't find an open connection it will try to tunnel using ports 4001-4003.", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}, "Variable": {"Wallet Address": {"value": "", "Name": "Wallet Address", "Target": "WALLET_ADDRESS", "Default": "", "Mode": "", "Description": "Value should be changed to your Wallet address you use for payout.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "SHARE_SIZE": {"value": "1TB", "Name": "SHARE_SIZE", "Target": "SHARE_SIZE", "Default": "3TB", "Mode": "", "Description": "Example: 500GB, 1TB, 10TB.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "RPC Host Address": {"value": "0.0.0.0", "Name": "RPC Host Address", "Target": "RPCADDRESS", "Default": "0.0.0.0", "Mode": "", "Description": "DDNS, DNS, or external IP address", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "Storjstat.com Monitor API-Key": {"value": "", "Name": "Storjstat.com Monitor API-Key", "Target": "STORJ_MONITOR_API_KEY", "Default": "", "Mode": "", "Description": "Container Variable: STORJ_MONITOR_API_KEY", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"Path of Storj share on array": {"value": "/mnt/user/storj", "Name": "Path of Storj share on array", "Target": "/storj", "Default": "/mnt/user/storj", "Mode": "rw", "Description": "Enter location of your storj share folder on unRAID host. ", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Device": {}, "Label": {}}}