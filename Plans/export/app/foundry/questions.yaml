# Include{groups}
portals:
  open:
    protocols:
      - "$kubernetes-resource_configmap_portal_protocol"
    host:
      - "$kubernetes-resource_configmap_portal_host"
    ports:
      - "$kubernetes-resource_configmap_portal_port"
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: true
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}

  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: FOUNDRY_RELEASE_URL
          label: 'FOUNDRY_RELEASE_URL'
          description: "LinuxNodeJS release pre-signed URL generated from the users profile. Required for downloading an application distribution. This method will take precedence over the FOUNDRYUSERNAMEFOUNDRYPASSWORD method and CONTAINERCACHE method. Alternatively, use FOUNDRYUSERNAMEFOUNDRYPASSWORD method or CONTAINERCACHE method.It is convenient to use this method in conjunction with CONTAINERCACHE, the URL will download to the to CONTAINERCACHE path and then re-use it after the URL expires."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_USERNAME
          label: 'FOUNDRY_USERNAME'
          description: "Account username or email address for foundryvtt.com. Required for downloading an application distribution. Takes precedence over CONTAINERCACHE. Alternatively, use FOUNDRYRELEASEURL or CONTAINERCACHE"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_PASSWORD
          label: 'FOUNDRY_PASSWORD'
          description: "Account password for foundryvtt.com. Required for downloading an application distribution. Takes precedence over CONTAINERCACHE. Alternatively, use FOUNDRYRELEASEURL or CONTAINERCACHE"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_VERSION
          label: 'FOUNDRY_VERSION'
          schema:
            type: string
            default: ""
        - variable: CONTAINER_CACHE
          label: 'CONTAINER_CACHE'
          description: "Set a path to cache downloads of the Foundry distribution archive and speed up subsequent container startups. The path should be in data or another persistent mount point in the container. e.g.; datacontainercache. Alternatively, use FOUNDRYRELEASEURL or FOUNDRYUSERNAMEFOUNDRYPASSWORD.This method can be used in conjunction with the RELEASEURL to use the container cache after the URL expires. The variable FOUNDRYVERSION will be appended to the cached zip file name."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_ADMIN_KEY
          label: 'FOUNDRY_ADMIN_KEY'
          description: "Admin password to be applied at startup. If omitted the admin password will be cleared. May be set using secrets.	"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_LICENSE_KEY
          label: 'FOUNDRY_LICENSE_KEY'
          description: "The license key to install. e.g.; AAAA-BBBB-CCCC-DDDD-EEEE-FFFF If left unset, a license key will be fetched when using account authentication (USERNAMEPASSWORD method). If multiple license keys are associated with an account, one will be chosen at random. Specific licenses can be selected by passing in an integer index. The first license key being 1. May be set using secrets.	"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_WORLD
          label: 'FOUNDRY_WORLD'
          description: "The world to startup at system start. Leave blank to launch Setup page."
          schema:
            type: string
            default: ""
        - variable: CONTAINER_PATCHES
          label: 'CONTAINER_PATCHES'
          description: "Set a path to a directory of shell scripts to be sourced after Foundry is installed but before it is started. The path should be in data or another persistent mount point in the container. e.g.; datacontainerpatches Patch files are sourced in lexicographic order. CONTAINERPATCHES are processed after CONTAINERPATCHURLS."
          schema:
            type: string
            default: ""
        - variable: CONTAINER_PATCH_URLS
          label: 'CONTAINER_PATCH_URLS'
          schema:
            type: string
            default: ""
        - variable: CONTAINER_PRESERVE_CONFIG
          label: 'CONTAINER_PRESERVE_CONFIG'
          description: "Normally new options.json and admin.txt files are generated by the container at each startup. Setting this to true prevents the container from modifying these files when they exist. If they do not exist, they will be created as normal."
          schema:
            type: string
            default: "false"
        - variable: CONTAINER_PRESERVE_OWNER
          label: 'CONTAINER_PRESERVE_OWNER'
          description: "Normally the ownership of the data directory and its contents are changed to match that of the server at startup. Setting this to a regular expression will exclude any matching paths and preserve their ownership. Note This is a match on the whole path, not a search. This is useful if you want mount a volume as read-only inside data (e.g.; a volume that contains assets mounted at dataDataassets)."
          schema:
            type: string
            default: ""
        - variable: CONTAINER_VERBOSE
          label: 'CONTAINER_VERBOSE'
          description: "Set to true to enable verbose logging for the container utility scripts."
          schema:
            type: string
            default: "false"
        - variable: FOUNDRY_AWS_CONFIG
          label: 'FOUNDRY_AWS_CONFIG'
          description: "An absolute or relative path that points to the awsConfig.json or true for AWS environment variable credentials evaluation usage."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_DEMO_CONFIG
          label: 'FOUNDRY_DEMO_CONFIG'
          description: "Path to zip for Demo Mode. Demo mode allows you to configure a world which will be automatically launched and reset at a frequency of your choosing. When the world is reset, it is deactivated. The source data for the world is restored to its original state using a provided .zip file, and the next reset is automatically scheduled. See Configuring demo mode."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_GID
          label: 'FOUNDRY_GID'
          description: "gid the deamon will be run under.	"
          schema:
            type: string
            default: "foundry"
        - variable: FOUNDRY_HOSTNAME
          label: 'FOUNDRY_HOSTNAME'
          description: "A custom hostname to use in place of the host machines public IP address when displaying the address of the game session. This allows for reverse proxies or DNS servers to modify the public address.	"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_IP_DISCOVERY
          label: 'FOUNDRY_IP_DISCOVERY'
          description: "Allow the Foundry server to discover and report the accessibility of the host machines public IP address and port. Setting this to false may reduce server startup time in instances where this discovery would timeout."
          schema:
            type: string
            default: "true"
        - variable: FOUNDRY_LANGUAGE
          label: 'FOUNDRY_LANGUAGE'
          description: "The default application language and module which provides the core translation files."
          schema:
            type: string
            default: "en.core"
        - variable: FOUNDRY_LOCAL_HOSTNAME
          label: 'FOUNDRY_LOCAL_HOSTNAME'
          description: "Override the local network address used for invitation links, mirroring the functionality of the FOUNDRYHOSTNAME option which configures the external address."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_MINIFY_STATIC_FILES
          label: 'FOUNDRY_MINIFY_STATIC_FILES'
          description: "Set to true to reduce network traffic by serving minified static JavaScript and CSS files. Enabling this setting is recommended for most users, but module developers may wish to disable it."
          schema:
            type: string
            default: "true"
        - variable: FOUNDRY_PASSWORD_SALT
          label: 'FOUNDRY_PASSWORD_SALT'
          description: "Custom salt string to be applied to the admin password instead of the default salt string. May be set using secrets."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_PROXY_PORT
          label: 'FOUNDRY_PROXY_PORT'
          description: "Inform the Foundry server that the software is running behind a reverse proxy on some other port. This allows the invitation links created to the game to include the correct external port."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_PROXY_SSL
          label: 'FOUNDRY_PROXY_SSL'
          description: "Indicates whether the software is running behind a reverse proxy that uses SSL. This allows invitation links and AV functionality to work as if the Foundry server had SSL configured directly."
          schema:
            type: string
            default: "false"
        - variable: FOUNDRY_ROUTE_PREFIX
          label: 'FOUNDRY_ROUTE_PREFIX'
          description: "A string path which is appended to the base hostname to serve Foundry VTT content from a specific namespace. For example setting this to demo will result in data being served from httpx.x.x.xPORTdemo."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_SSL_CERT
          label: 'FOUNDRY_SSL_CERT'
          description: "An absolute or relative path that points towards a SSL certificate file which is used jointly with the sslKey option to enable SSL and https connections. If both options are provided, the server will start using HTTPS automatically.	"
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_SSL_KEY
          label: 'FOUNDRY_SSL_KEY'
          description: "An absolute or relative path that points towards a SSL key file which is used jointly with the sslCert option to enable SSL and https connections. If both options are provided, the server will start using HTTPS automatically."
          schema:
            type: string
            default: ""
        - variable: FOUNDRY_UID
          label: 'FOUNDRY_UID'
          description: "uid the daemon will be run under.	"
          schema:
            type: string
            default: "foundry"
        - variable: FOUNDRY_UPNP
          label: 'FOUNDRY_UPNP'
          description: "Allow Universal Plug and Play to automatically request port forwarding for the Foundry server port to your local network address."
          schema:
            type: string
            default: "false"
        - variable: FOUNDRY_UPNP_LEASE_DURATION
          label: 'FOUNDRY_UPNP_LEASE_DURATION'
          description: "Sets the Universal Plug and Play lease duration, allowing for the possibility of permanent leases for routers which do not support temporary leases. To define an indefinite lease duration set the value to 0."
          schema:
            type: string
            default: ""
        - variable: TIMEZONE
          label: 'TIMEZONE'
          description: "Container TZ database name"
          schema:
            type: string
            default: "UTC"

# Include{containerConfig}

  - variable: service
    group: "Networking and Services"
    label: "Configure Service(s)"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelector}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 30000
                              required: true
                          - variable: advanced
                            label: "Show Advanced settings"
                            schema:
                              type: boolean
                              default: false
                              show_subquestions_if: true
                              subquestions:
                                - variable: protocol
                                  label: "Port Type"
                                  schema:
                                    type: string
                                    default: TCP
                                    enum:
                                      - value: HTTP
                                        description: "HTTP"
                                      - value: "HTTPS"
                                        description: "HTTPS"
                                      - value: TCP
                                        description: "TCP"
                                      - value: "UDP"
                                        description: "UDP"
                                - variable: nodePort
                                  label: "Node Port (Optional)"
                                  description: "This port gets exposed to the node. Only considered when service type is NodePort, Simple or LoadBalancer"
                                  schema:
                                    type: int
                                    min: 9000
                                    max: 65535
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 30000



  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:

        - variable: data
          label: "data Storage"
          description: "Maps to container path data. Path to persistent directory for storing Config, Data, and Logs directories for Foundry to use."
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}


# Include{persistenceList}


  - variable: ingress
    label: ""
    group: "Ingress"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Ingress"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}

# Include{ingressTLS}

# Include{ingressTraefik}

# Include{ingressExpert}

# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
