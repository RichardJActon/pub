# Include{groups}
portals: {}
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: false
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}


  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: AUTOSTART
          label: "AUTOSTART"
          description: "true = Enabled  Runs script automatically on startup"
          schema:
            type: string
            default: ""
        - variable: SCRIPTINTERVAL
          label: "SCRIPTINTERVAL"
          description: "#s or #m or #h or #d  s = seconds, m = minutes, h = hours, d = days  Amount of time between each script run, when AUTOSTART is enabled"
          schema:
            type: string
            default: ""
        - variable: LidarrUrl
          label: "LidarrUrl"
          description: "Set domain or IP to your Lidarr instance including port. If using reverse proxy, do not use a trailing slash. Ensure you specify https."
          schema:
            type: string
            default: ""
        - variable: LidarrAPIkey
          label: "LidarrAPIkey"
          description: "Lidarr API key"
          schema:
            type: string
            default: ""
        - variable: LIDARRREMOTEPATH
          label: "LIDARRREMOTEPATH"
          description: "OPTIONAL  ADVANCED FEATURE  Configure this to the local volume path for Lidarr to see the downloads folder, this will enable file moves, instead of copies... Less resource intensive"
          schema:
            type: string
            default: ""
        - variable: ARL_TOKEN
          label: "ARL_TOKEN"
          description: "User token for dl client, for instructions to obtain token httpsnotabug.orgRemixDevsDeezloaderRemixwikiLogin+via+userToken"
          schema:
            type: string
            default: ""
        - variable: DOWNLOADMODE
          label: "DOWNLOADMODE"
          description: "wanted or artist  wanted mode only download missingcutoff  artist mode downloads all albums by an artist (requires lidarr volume mapping root media folders for import)"
          schema:
            type: string
            default: ""
        - variable: ALBUM_TYPE_FILTER
          label: "ALBUM_TYPE_FILTER"
          description: "Filter Types COMPILE, SINGLE, ALBUM, EP (this is a ', ' separated list of Album Types to skip) (artist mode only)"
          schema:
            type: string
            default: ""
        - variable: LIST
          label: "LIST"
          description: "both or missing or cutoff  both = missing + cutoff  missng = lidarr missing list  cutoff = lidarr cutoff li"
          schema:
            type: string
            default: ""
        - variable: SearchType
          label: "SearchType"
          description: "both or artist or fuzzy  both = artist + fuzzy searching  artist = only artist searching  fuzzy = only fuzzy searching (Various Artist is always fuzzy searched, regardless of setting)"
          schema:
            type: string
            default: ""
        - variable: Concurrency
          label: "Concurrency"
          description: "Number of concurrent downloads"
          schema:
            type: string
            default: ""
        - variable: POSTPROCESSTHREADS
          label: "POSTPROCESSTHREADS"
          description: "Controls number of threads used for Format conversion and replaygain tagging"
          schema:
            type: string
            default: ""
        - variable: EMBEDDED_COVER_QUALITY
          label: "EMBEDDED_COVER_QUALITY"
          description: "Controls the quality of the cover image compression in percentage, 100 = no compression"
          schema:
            type: string
            default: ""
        - variable: FORMAT
          label: "FORMAT"
          description: "FLAC or MP3 or OPUS or AAC or ALAC"
          schema:
            type: string
            default: ""
        - variable: BITRATE
          label: "BITRATE"
          description: "FLAC - OPUSAACMP3 will be converted using this bitrate (MP3 320128 is native, not converted)"
          schema:
            type: string
            default: ""
        - variable: FORCECONVERT
          label: "FORCECONVERT"
          description: "true = enabled  This will convert lossy MP3 to desired target format (exluding FLACALAC, ALAC setting will convert to AAC)"
          schema:
            type: string
            default: ""
        - variable: requirequality
          label: "requirequality"
          description: "true = enabled  Requires all downloaded files match target file extension (mp3 or flac) when enabled"
          schema:
            type: string
            default: ""
        - variable: replaygain
          label: "replaygain"
          description: "true = enabled  true = enabled  Scans and analyzes files to add replaygain tags to song metadata"
          schema:
            type: string
            default: ""
        - variable: MatchDistance
          label: "MatchDistance"
          description: "Set as an integer, the higher the number, the more lienet it is. Example A match score of 0 is a perfect match  For more information, this score is produced using this function httpsen.wikibooks.orgwikiAlgorithm_ImplementationStringsLevenshtein_distance"
          schema:
            type: string
            default: ""
        - variable: FolderPermissions
          label: "FolderPermissions"
          description: "Based on chmod linux permissions"
          schema:
            type: string
            default: ""
        - variable: FilePermissions
          label: "FilePermissions"
          description: "Based on chmod linux permissions"
          schema:
            type: string
            default: ""
        - variable: MBRAINZMIRROR
          label: "MBRAINZMIRROR"
          description: "OPTIONAL Only change if using a different mirror"
          schema:
            type: string
            default: ""
        - variable: MBRATELIMIT
          label: "MBRATELIMIT"
          description: "OPTIONAL musicbrainz rate limit, musicbrainz allows only 1 connection per second, max setting is 10  Set to 101 to disable limit"
          schema:
            type: string
            default: ""
        - variable: NOTIFYPLEX
          label: "NOTIFYPLEX"
          description: "true = enabled  Plex must have a Music library added and also be configured with the downloads-ama directory"
          schema:
            type: string
            default: ""
        - variable: PLEXLIBRARYNAME
          label: "PLEXLIBRARYNAME"
          description: "This must exactly match the name of the Plex Library that contains the Lidarr Media Folder data"
          schema:
            type: string
            default: ""
        - variable: PLEXURL
          label: "PLEXURL"
          description: "ONLY used if NOTIFYPLEX is enabled..."
          schema:
            type: string
            default: ""
        - variable: PLEXTOKEN
          label: "PLEXTOKEN"
          description: "ONLY used if NOTIFYPLEX is enabled..."
          schema:
            type: string
            default: ""


  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}

  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: config
          label: "config Storage"
          description: "Container Path config"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}        - variable: hostpathfordownloads-amd
          label: "hostpathfordownloads-amd Storage"
          description: "Container Path downloads-amd (DO NOT DELETE)  !!!!IMPORTANT!!! Map this exact volume mount to your Lidarr Container for everything to work properly!!!"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}

# Include{persistenceList}


# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: false
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}
