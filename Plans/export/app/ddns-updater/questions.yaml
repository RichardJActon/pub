# Include{groups}
portals:
  open:
    protocols:
      - "$kubernetes-resource_configmap_portal_protocol"
    host:
      - "$kubernetes-resource_configmap_portal_host"
    ports:
      - "$kubernetes-resource_configmap_portal_port"
questions:
  - variable: portal
    group: "Container Image"
    label: "Configure Portal Button"
    schema:
      type: dict
      hidden: true
      attrs:
        - variable: enabled
          label: "Enable"
          description: "enable the portal button"
          schema:
            hidden: true
            editable: false
            type: boolean
            default: true
# Include{global}

  - variable: controller
    group: "Controller"
    label: ""
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: advanced
          label: "Show Advanced Controller Settings"
          schema:
            type: boolean
            default: false
            show_subquestions_if: true
            subquestions:
              - variable: type
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Controller Type"
                schema:
                  type: string
                  default: "deployment"
                  required: true
                  enum:
                    - value: "deployment"
                      description: "Deployment"
                    - value: "statefulset"
                      description: "Statefulset"
                    - value: "daemonset"
                      description: "Daemonset"
              - variable: replicas
                description: "Number of desired pod replicas"
                label: "Desired Replicas"
                schema:
                  type: int
                  default: 1
                  required: true
              - variable: strategy
                description: "Please specify type of workload to deploy"
                label: "(Advanced) Update Strategy"
                schema:
                  type: string
                  default: "Recreate"
                  required: true
                  enum:
                    - value: "Recreate"
                      description: "Recreate: Kill existing pods before creating new ones"
                    - value: "RollingUpdate"
                      description: "RollingUpdate: Create new pods and then kill old ones"
                    - value: "OnDelete"
                      description: "(Legacy) OnDelete: ignore .spec.template changes"
# Include{controllerExpert}






  - variable: env
    group: "Container Configuration"
    label: "Image Environment"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: PUBLICIP_FETCHERS
          label: "PUBLICIP_FETCHERS"
          description: "Comma separated fetcher types to obtain the public IP address from http and dns"
          schema:
            type: string
            default: "all"
        - variable: PUBLICIP_HTTP_PROVIDERS
          label: "PUBLICIP_HTTP_PROVIDERS"
          description: "PUBLICIP_HTTP_PROVIDERS gets your public IPv4 or IPv6 address. It can be one or more of the following (defaultall), opendns, ifconfig, ipinfo, ddns, google.You can also specify an HTTPS URL such as httpsipinfo.ioip"
          schema:
            type: string
            default: "all"
        - variable: PUBLICIPV4_HTTP_PROVIDERS
          label: "PUBLICIPV4_HTTP_PROVIDERS"
          description: "PUBLICIPV4_HTTP_PROVIDERS gets your public IPv4 address only. It can be one or more of the following (defaultall), ipify, noip.You can also specify an HTTPS URL such as httpsipinfo.ioip"
          schema:
            type: string
            default: "all"
        - variable: PUBLICIPV6_HTTP_PROVIDERS
          label: "PUBLICIPV6_HTTP_PROVIDERS"
          description: "PUBLICIPV6_HTTP_PROVIDERS gets your public IPv6 address only. It can be one or more of the following (defaultall), ipify, noip.You can also specify an HTTPS URL such as httpsipinfo.ioip"
          schema:
            type: string
            default: "all"
        - variable: PUBLICIP_DNS_PROVIDERS
          label: "PUBLICIP_DNS_PROVIDERS"
          description: "PUBLICIP_DNS_PROVIDERS gets your public IPv4 address only or IPv6 address only or one of them. It can be one or more of the following (defaultall), google, cloudflare,"
          schema:
            type: string
            default: "all"
        - variable: PUBLICIP_DNS_TIMEOUT
          label: "PUBLICIP_DNS_TIMEOUT"
          description: "Public IP DNS query timeout (in seconds)"
          schema:
            type: string
            default: "3s"
        - variable: UPDATE_COOLDOWN_PERIOD
          label: "UPDATE_COOLDOWN_PERIOD"
          description: "Duration to cooldown between updates for each record. This is useful to avoid being rate limited or banned. (in minutes)"
          schema:
            type: string
            default: "5m"
        - variable: HTTP_TIMEOUT
          label: "HTTP_TIMEOUT"
          description: "Timeout for all HTTP requests (in seconds)"
          schema:
            type: string
            default: "10s"
        - variable: BACKUP_DIRECTORY
          label: "BACKUP_DIRECTORY"
          description: "Directory to read and write data files from internally"
          schema:
            type: string
            default: "/updater/data/backup"
        - variable: BACKUP_PERIOD
          label: "BACKUP_PERIOD"
          description: "Set to a period (i.e. 72h15m) to enable zip backups of dataconfig.json and dataupdates.json in a zip file"
          schema:
            type: string
            default: "0"
        - variable: LOG_LEVEL
          label: "LOG_LEVEL"
          description: "Level of logging, debug, info, warning or error"
          schema:
            type: string
            default: "info"
        - variable: LOG_CALLER
          label: "LOG_CALLER"
          description: "Container Variable LOG_CALLER"
          schema:
            type: string
            default: "hidden"
        - variable: ROOT_URL
          label: "ROOT_URL"
          description: "URL path to append to all paths to the webUI (i.e. ddns for accessing httpsexample.comddns through a proxy)"
          schema:
            type: string
            default: "/"
        - variable: SHOUTRRR_ADDRESSES
          label: "SHOUTRRR_ADDRESSES"
          description: "(optional) Comma separated list of Shoutrrr addresses (notification services) -- (See GitHub Documentation)"
          schema:
            type: string
            default: ""
        - variable: HEALTH_SERVER_ADDRESS
          label: "HEALTH_SERVER_ADDRESS"
          description: "Health server listening address"
          schema:
            type: string
            default: "127.0.0.1:9999"


# Include{containerConfig}

  - variable: service
    group: "Networking and Services"
    label: "Configure Service(s)"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Service"
          description: "The Primary service on which the healthcheck runs, often the webUI"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{serviceSelector}
                    - variable: main
                      label: "Main Service Port Configuration"
                      schema:
                        additional_attrs: true
                        type: dict
                        attrs:
                          - variable: port
                            label: "Port"
                            description: "This port exposes the container port on the service"
                            schema:
                              type: int
                              default: 8000
                              required: true
                          - variable: advanced
                            label: "Show Advanced settings"
                            schema:
                              type: boolean
                              default: false
                              show_subquestions_if: true
                              subquestions:
                                - variable: protocol
                                  label: "Port Type"
                                  schema:
                                    type: string
                                    default: TCP
                                    enum:
                                      - value: HTTP
                                        description: "HTTP"
                                      - value: "HTTPS"
                                        description: "HTTPS"
                                      - value: TCP
                                        description: "TCP"
                                      - value: "UDP"
                                        description: "UDP"
                                - variable: nodePort
                                  label: "Node Port (Optional)"
                                  description: "This port gets exposed to the node. Only considered when service type is NodePort, Simple or LoadBalancer"
                                  schema:
                                    type: int
                                    min: 9000
                                    max: 65535
                                - variable: targetPort
                                  label: "Target Port"
                                  description: "The internal(!) port on the container the Application runs on"
                                  schema:
                                    type: int
                                    default: 8000



  - variable: serviceexpert
    group: "Networking and Services"
    label: "Show Expert Config"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: hostNetwork
          group: "Networking and Services"
          label: "Host-Networking (Complicated)"
          schema:
            type: boolean
            default: false

# Include{serviceExpert}

# Include{serviceList}


  - variable: persistence
    label: "Integrated Persistent Storage"
    description: "Integrated Persistent Storage"
    group: "Storage and Persistence"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: config
          label: "App Config Storage"
          description: "Stores the Application Configuration."
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: type
                label: "Type of Storage"
                description: "Sets the persistence type, Anything other than PVC could break rollback!"
                schema:
                  type: string
                  default: "simplePVC"
                  enum:
                    - value: "simplePVC"
                      description: "PVC (simple)"
                    - value: "simpleHP"
                      description: "HostPath (simple)"
                    - value: "emptyDir"
                      description: "emptyDir"
                    - value: "pvc"
                      description: "pvc"
                    - value: "hostPath"
                      description: "hostPath"
# Include{persistenceBasic}
              - variable: hostPath
                label: "hostPath"
                description: "Path inside the container the storage is mounted"
                schema:
                  show_if: [["type", "=", "hostPath"]]
                  type: hostpath
              - variable: medium
                label: "EmptyDir Medium"
                schema:
                  show_if: [["type", "=", "emptyDir"]]
                  type: string
                  default: ""
                  enum:
                    - value: ""
                      description: "Default"
                    - value: "Memory"
                      description: "Memory"
# Include{persistenceAdvanced}
# Include{persistenceList}

  - variable: ingress
    label: ""
    group: "Ingress"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: main
          label: "Main Ingress"
          schema:
            additional_attrs: true
            type: dict
            attrs:
# Include{ingressDefault}

# Include{ingressTLS}

# Include{ingressTraefik}

# Include{ingressExpert}


# Include{ingressList}

# Include{security}

  - variable: advancedSecurity
    label: "Show Advanced Security Settings"
    group: "Security and Permissions"
    schema:
      type: boolean
      default: false
      show_subquestions_if: true
      subquestions:
        - variable: securityContext
          label: "Security Context"
          schema:
            additional_attrs: true
            type: dict
            attrs:
              - variable: privileged
                label: "Privileged mode"
                schema:
                  type: boolean
                  default: false
              - variable: readOnlyRootFilesystem
                label: "ReadOnly Root Filesystem"
                schema:
                  type: boolean
                  default: readOnlyRootFilesystemExample
              - variable: allowPrivilegeEscalation
                label: "Allow Privilege Escalation"
                schema:
                  type: boolean
                  default: false
              - variable: runAsNonRoot
                label: "runAsNonRoot"
                schema:
                  type: boolean
                  default: false
# Include{securityContextAdvanced}

  - variable: podSecurityContext
    group: "Security and Permissions"
    label: "Pod Security Context"
    schema:
      additional_attrs: true
      type: dict
      attrs:
        - variable: runAsUser
          label: "runAsUser"
          description: "The UserID of the user running the application"
          schema:
            type: int
            default: 0
        - variable: runAsGroup
          label: "runAsGroup"
          description: The groupID this App of the user running the application"
          schema:
            type: int
            default: 0
        - variable: fsGroup
          label: "fsGroup"
          description: "The group that should own ALL storage."
          schema:
            type: int
            default: 568
# Include{podSecurityContextAdvanced}


# Include{resources}

# Include{advanced}

# Include{addons}