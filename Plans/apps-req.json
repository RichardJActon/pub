{"daapd": {"Name": "daapd", "Repository": "lscr.io/linuxserver/daapd", "Registry": "https://github.com/orgs/linuxserver/packages/container/package/daapd", "Network": "host", "Privileged": "false", "GitHub": "https://github.com/linuxserver/docker-daapd#application-setup", "Overview": "Daapd(https://owntone.github.io/owntone-server/) (iTunes) media server with support for AirPlay devices, Apple Remote (and compatibles), Chromecast, MPD and internet radio.", "WebUI": "http://[IP]:[PORT:3689]", "Icon": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/linuxserver-ls-logo.png", "CategoryList": ["MediaApp-Music", "MediaServer-Music"], "Sources": ["https://owntone.github.io/owntone-server/", "https://github.com/orgs/linuxserver/packages/container/package/daapd", "https://github.com/linuxserver/docker-daapd#readme"], "Keywords": ["daapd", ["MediaApp-Music", "MediaServer-Music"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"puid": {"value": "", "Name": "PUID", "Target": "PUID", "Default": "99", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "pgid": {"value": "", "Name": "PGID", "Target": "PGID", "Default": "100", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "umask": {"value": "", "Name": "UMASK", "Target": "UMASK", "Default": "022", "Description": "Container Variable: UMASK", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "", "Name": "Appdata", "Target": "/config", "Default": "", "Mode": "rw", "Description": "Where daapd server stores its config and dbase files.", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "pathmusic": {"value": "", "Name": "Path: /music", "Target": "/music", "Default": "", "Mode": "rw", "Description": "Map to your music folder.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "homeassistant": {"Name": "homeassistant", "Repository": "lscr.io/linuxserver/homeassistant", "Registry": "https://github.com/orgs/linuxserver/packages/container/package/homeassistant", "Network": "host", "Privileged": "false", "GitHub": "https://github.com/linuxserver/docker-homeassistant#application-setup", "Overview": "Home Assistant Core(https://www.home-assistant.io/) - Open source home automation that puts local control and privacy first. Powered by a worldwide community of tinkerers and DIY enthusiasts. Perfect to run on a Raspberry Pi or a local server.", "WebUI": "http://[IP]:[PORT:8123]", "Icon": "https://raw.githubusercontent.com/linuxserver/docker-templates/master/linuxserver.io/img/homeassistant-logo.png", "caTemplateURL": "https://raw.githubusercontent.com/linuxserver/templates/master/unraid/homeassistant.xml", "CategoryList": ["Other"], "Sources": ["https://www.home-assistant.io/", "https://github.com/orgs/linuxserver/packages/container/package/homeassistant", "https://github.com/linuxserver/docker-homeassistant#readme"], "Keywords": ["homeassistant", ["Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {"/path/to/device": {"value": "", "Name": "/path/to/device", "Default": "/path/to/device", "Description": "For passing through USB, serial or gpio devices.", "Type": "Device", "Display": "always", "Required": "false", "Mask": "false"}}, "Label": {}, "Variable": {"puid": {"value": "", "Name": "PUID", "Target": "PUID", "Default": "99", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "pgid": {"value": "", "Name": "PGID", "Target": "PGID", "Default": "100", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "umask": {"value": "", "Name": "UMASK", "Target": "UMASK", "Default": "022", "Description": "Container Variable: UMASK", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "", "Name": "Appdata", "Target": "/config", "Default": "", "Mode": "rw", "Description": "Home Assistant config storage path.", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Port": {"port8123": {"value": "", "Name": "Port: 8123", "Target": "8123", "Default": "8123", "Mode": "tcp", "Description": "Application WebUI, only use this if you are not using host mode.", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "netbox": {"Name": "netbox", "Repository": "pitkley/netbox", "Registry": "https://hub.docker.com/r/pitkley/netbox", "Network": "bridge", "Privileged": "false", "Overview": "IP address management (IPAM) and data center infrastructure management (DCIM) tool. [br] To create User cli to the docker then \"./manage.py createsuperuser\" [br] Postgres required", "WebUI": "http://[IP]:[PORT:8000]/", "Icon": "https://raw.githubusercontent.com/A75G/docker-templates/master/templates/icons/netbox.png", "PostArgs": "", "Requires": "Postgres container installed", "CategoryList": ["Tools-Utilities", "Network-Management"], "Sources": ["https://github.com/netbox-community/netbox", "https://hub.docker.com/r/pitkley/netbox"], "Keywords": ["netbox", ["Tools-Utilities", "Network-Management"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"db_host": {"value": "postgres", "Name": "DB_HOST", "Target": "DB_HOST", "Default": "netbox", "Mode": "", "Description": "DB Hostname or IP Postgres", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_name": {"value": "netbox", "Name": "DB_NAME", "Target": "DB_NAME", "Default": "netbox", "Mode": "", "Description": "DB NAME Postgres", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_user": {"value": "netbox", "Name": "DB_USER", "Target": "DB_USER", "Default": "netbox", "Mode": "", "Description": "DB USER Postgres", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_pass": {"value": "netbox", "Name": "DB_PASS", "Target": "DB_PASS", "Default": "netbox", "Mode": "", "Description": "DB PASS Postgres", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "secret_key": {"value": "ChangeMe", "Name": "SECRET_KEY", "Target": "SECRET_KEY", "Default": "ChangeMe", "Mode": "", "Description": "SECRET_KEY", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "allowed_hosts": {"value": "*", "Name": "ALLOWED_HOSTS", "Target": "ALLOWED_HOSTS", "Default": "0.0.0.0", "Mode": "", "Description": "ALLOWED_HOSTS", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {}, "Port": {"port": {"value": "8000", "Name": "Port", "Target": "8000", "Default": "8000", "Mode": "tcp", "Description": "Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "emoncms": {"Name": "emoncms", "Overview": "Energy monitor", "Registry": "https://registry.hub.docker.com/r/snoopy86/emoncms-docker", "Repository": "snoopy86/emoncms-docker", "BindTime": "true", "Privileged": "false", "Networking": {"Mode": "bridge", "Publish": {"Port": [{"HostPort": "8998", "ContainerPort": "80", "Protocol": "tcp"}, {"HostPort": "1883", "ContainerPort": "1883", "Protocol": "tcp"}]}}, "WebUI": "http://[IP]:[PORT:80]/", "Icon": "https://emoncms.org/Modules/site/emoncms_front.png", "Requires": "MySQL / Redis Installed", "CategoryList": ["Productivity"], "Sources": ["https://registry.hub.docker.com/r/snoopy86/emoncms-docker"], "Keywords": ["emoncms", ["Productivity"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"mysql_host": {"Name": "MYSQL_HOST", "Target": "MYSQL_HOST", "value": ""}, "mysql_port": {"Name": "MYSQL_PORT", "Target": "MYSQL_PORT", "value": "3306"}, "mysql_user": {"Name": "MYSQL_USER", "Target": "MYSQL_USER", "value": "emoncms"}, "mysql_password": {"Name": "MYSQL_PASSWORD", "Target": "MYSQL_PASSWORD", "value": ""}, "mysql_database": {"Name": "MYSQL_DATABASE", "Target": "MYSQL_DATABASE", "value": "emoncms"}, "mysql_random_root_password": {"Name": "MYSQL_RANDOM_ROOT_PASSWORD", "Target": "MYSQL_RANDOM_ROOT_PASSWORD", "value": "yes"}, "redis_enabled": {"Name": "REDIS_ENABLED", "Target": "REDIS_ENABLED", "value": "false"}, "redis_host": {"Name": "REDIS_HOST", "Target": "REDIS_HOST", "value": "127.0.0.1"}, "redis_port": {"Name": "REDIS_PORT", "Target": "REDIS_PORT", "value": "6379"}, "redis_prefix": {"Name": "REDIS_PREFIX", "Target": "REDIS_PREFIX", "value": "'emoncms'"}, "mqtt_enabled": {"Name": "MQTT_ENABLED", "Target": "MQTT_ENABLED", "value": "false"}, "mqtt_host": {"Name": "MQTT_HOST", "Target": "MQTT_HOST", "value": "127.0.0.1"}, "mqtt_user": {"Name": "MQTT_USER", "Target": "MQTT_USER", "value": "mqtt"}, "mqtt_password": {"Name": "MQTT_PASSWORD", "Target": "MQTT_PASSWORD", "value": "mqtt"}, "mqtt_basetopic": {"Name": "MQTT_BASETOPIC", "Target": "MQTT_BASETOPIC", "value": "emon"}, "phpfina_dir": {"Name": "PHPFINA_DIR", "Target": "PHPFINA_DIR", "value": "/var/opt/emoncms/phpfina/"}, "phptimeseries_dir": {"Name": "PHPTIMESERIES_DIR", "Target": "PHPTIMESERIES_DIR", "value": "/var/opt/emoncms/phptimeseries/"}}, "Path": {"emoncms": {"Name": "phptimeseries", "value": "/mnt/user/appdata/emoncms/phptimeseries/phpfina", "Target": "/var/opt/emoncms/phptimeseries/", "Mode": "rw"}}, "Port": {}}}, "neo4j": {"Name": "neo4j", "Repository": "neo4j", "Registry": "https://hub.docker.com/_/neo4j/", "Network": "host", "Privileged": "false", "Overview": "Neo4j is a highly scalable, robust native graph database.", "WebUI": "http://[IP]:[PORT:7474]/", "Icon": "https://raw.githubusercontent.com/Data-Monkey/docker-templates/master/Data-Monkey/img/neo4j.png", "PostArgs": "", "Networking": {"Mode": "host"}, "changes": "\n[center] [b]Data-Monkey:[/b] neo4j [/center]\n\n[center][font size=4]Change Log[/font][/center]\n\n[font size=3]2020.03.07[/font]\n- some cosmetic changes\n\n[font size=3]2018.03.25[/font]\n- Initial release of the neo4j template\n  ", "Official": true, "CategoryList": ["Tools-Utilities"], "Sources": ["https://neo4j.com/", "https://hub.docker.com/_/neo4j/"], "Keywords": ["neo4j", ["Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"neo4j_auth": {"value": "none", "Name": "NEO4J_AUTH", "Target": "NEO4J_AUTH", "Default": "none", "Mode": "", "Description": "Container Variable: NEO4J_AUTH", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"data": {"value": "/mnt/user/appdata/neo4j/data/", "Name": "data", "Target": "/data", "Default": "", "Mode": "rw", "Description": "Container Path: /data", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "7474", "Name": "WebUI", "Target": "7474", "Default": "7474", "Mode": "tcp", "Description": "WebUI HTTP Port", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "bolt": {"value": "7687", "Name": "Bolt", "Target": "7687", "Default": "7687", "Mode": "tcp", "Description": "Bolt access to the Neo4j API", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "netdata": {"Name": "netdata", "Repository": "netdata/netdata", "Registry": "https://hub.docker.com/r/netdata/netdata", "Network": "host", "Privileged": "false", "Overview": "[b]Real-time performance monitoring, done right! [/b][br]&amp;#xD;\r\n", "WebUI": "http://[IP]:[PORT:19999]", "Icon": "https://raw.githubusercontent.com/Data-Monkey/docker-templates/master/Data-Monkey/img/netdata.png", "ExtraParams": "--cap-add SYS_PTRACE --security-opt apparmor=unconfined --log-opt max-size=200m --log-opt max-file=1", "PostArgs": "", "Networking": {"Mode": "host"}, "changes": "\n[center] [b]Data-Monkey:[/b] Netdata [/center]\n    \n[center][font size=4]Change Log[/font][/center]\n[font size=3]2020.05.02[/font]    \n- removed config dir. See support forum for example of configuring netdata\n    \n[center][font size=4]Change Log[/font][/center]\n[font size=3]2020.03.07[/font]    \n- change to official docker repo \n- added variable to opt out of anonymous tracking\n- added group id to get access to doker stats \n- fixed some links\n- updated logo again\n\n[font size=3]2019.05.05[/font]    \n- change volume mapping from /mnt/cache/netdata to /mnt/user/netdata\n- change to new logo\n- updated some links to the new urls    \n\n[font size=3]2018.05.07[/font]    \n- change volume mapping from /etc/netdata to /etc/netdata/override\n\n[font size=3]2018.03.18[/font]    \n- added /var/run/docker.sock to transalate docker IDs to names\n    \n[font size=3]2016.06.06[/font]\n- added config mapping\n- added \"log rotation\" for 6.2\n\n[font size=3]2016.06.03[/font]\n- Initial release of the netdata template\n    \n    \n  ", "RecommendedRaw": "3/1/2021", "RecommendedDate": 1614574800, "RecommendedReason": {"en_US": "A great system wide dashboard with no setup required"}, "RecommendedWho": "Andrew", "Official": true, "CategoryList": ["Tools-Utilities"], "Sources": ["https://docs.netdata.cloud/", "https://hub.docker.com/r/netdata/netdata"], "Keywords": ["netdata", ["Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"pgid": {"value": "281", "Name": "PGID", "Target": "PGID", "Default": "281", "Mode": "", "Description": "If you want to have your container names resolved by netdata it needs to have access to docker group. To achive that just add environment variable PGID=999 to netdata container, where 999 is a docker group id from your host. This number can be found by running:\r\n\r\ngrep docker /etc/group | cut -d ':' -f 3", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "donottrack": {"value": "0", "Name": "Do Not Track", "Target": "DO_NOT_TRACK", "Default": "0", "Mode": "", "Description": "Set to 1 to stop anonymous tracking\r\n( https://docs.netdata.cloud/docs/anonymous-statistics/#opt-out )", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"proc": {"value": "/proc", "Name": "proc", "Target": "/host/proc", "Default": "/proc", "Mode": "ro", "Description": "Container Path: /host/proc", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "sys": {"value": "/sys", "Name": "sys", "Target": "/host/sys", "Default": "/host/sys", "Mode": "ro", "Description": "Container Path: /host/sys", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "doker-sock": {"value": "/var/run/docker.sock", "Name": "doker.sock", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "ro", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "plex-meta-manager": {"Name": "plex-meta-manager", "Repository": "meisnate12/plex-meta-manager", "Registry": "https://hub.docker.com/r/meisnate12/plex-meta-manager/", "Network": "host", "Privileged": "false", "Overview": "Python script to update metadata and automatically build collections.\n", "WebUI": "", "Icon": "https://metamanager.wiki/en/latest/_static/pmm.png", "PostArgs": "", "Networking": {"Mode": "host"}, "changes": "", "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/meisnate12/Plex-Meta-Manager/wiki/", "https://hub.docker.com/r/meisnate12/plex-meta-manager/"], "Keywords": ["plex-meta-manager", ["Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"timetorun": {"value": "6:00", "Name": "Time to Run", "Target": "PMM_TIME", "Default": "6:00", "Mode": "", "Description": "Container Variable: PMM_TIME", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "dividercharacter": {"value": "=", "Name": "Divider Character", "Target": "PMM_DIVIDER", "Default": "", "Mode": "", "Description": "Container Variable: PMM_DIVIDER", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "screenwidth": {"value": "200", "Name": "Screen Width", "Target": "PMM_WIDTH", "Default": "", "Mode": "", "Description": "Container Variable: PMM_WIDTH", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"config": {"value": "/mnt/user/appdata/plex-meta-manager", "Name": "Config", "Target": "/config", "Default": "", "Mode": "rw", "Description": "Container Path: /config", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "apcupsd-influxdb-exporter": {"Name": "apcupsd-influxdb-exporter", "Repository": "atribe/apcupsd-influxdb-exporter", "Registry": "https://cloud.docker.com/repository/docker/atribe/apcupsd-influxdb-exporter", "Network": "bridge", "Privileged": "false", "Overview": "Docker wrapper for a python script to query apcupsd via a python version of apcaccess, it then sends the data to influxdb.", "WebUI": "", "Icon": "", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/atribe/apcupsd-influxdb-exporter", "https://cloud.docker.com/repository/docker/atribe/apcupsd-influxdb-exporter"], "Keywords": ["apcupsd-influxdb-exporter", ["Tools-Utilities"]], "Requires": " Influxdb (autoadd) exporter app (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"hostname": {"value": "panthro", "Name": "HOSTNAME", "Target": "HOSTNAME", "Default": "unraid", "Mode": "", "Description": "host you want the measurements to show up as in influxdb", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "watts": {"value": "1500", "Name": "WATTS", "Target": "WATTS", "Default": "", "Mode": "", "Description": "If your UPS doesn't have the NOMPOWER metric then specify the rated watts so that the load percentage can be used to calculate the current watts", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "influxdb_host": {"value": "10.13.13.15", "Name": "INFLUXDB_HOST", "Target": "INFLUXDB_HOST", "Default": "localhost", "Mode": "", "Description": "ip address of influxdb", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "apcupsd_host": {"value": "10.13.13.15", "Name": "APCUPSD_HOST", "Target": "APCUPSD_HOST", "Default": "localhost", "Mode": "", "Description": "address of host running apcupsd", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "influxdb_port": {"value": "8086", "Name": "INFLUXDB_PORT", "Target": "INFLUXDB_PORT", "Default": "8086", "Mode": "", "Description": "Container Variable: INFLUXDB_PORT", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "influxdb_database": {"value": "apcupsd", "Name": "INFLUXDB_DATABASE", "Target": "INFLUXDB_DATABASE", "Default": "apcupsd", "Mode": "", "Description": "influxdb database name to store values", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "influxdb_user": {"value": "", "Name": "INFLUXDB_USER", "Target": "INFLUXDB_USER", "Default": "", "Mode": "", "Description": "User name for Influxdb", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "influxdb_password": {"value": "", "Name": "INFLUXDB_PASSWORD", "Target": "INFLUXDB_PASSWORD", "Default": "", "Mode": "", "Description": "Password for Influxdb", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "debuggingoutput": {"value": "false", "Name": "Debugging Output", "Target": "VERBOSE", "Default": "false", "Mode": "", "Description": "Set this variable to true to see the output in the docker log.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {}}}, "hddtemp": {"Name": "hddtemp", "Repository": "drewster727/hddtemp-docker", "Registry": "https://hub.docker.com/r/drewster727/hddtemp-docker/", "Network": "host", "Privileged": "true", "Overview": "Ubuntu based image with hddtemp installed and configured to be accessible by other docker containers. In this case it is perfect for use with Telegraf and it's hdd temp plugin.", "WebUI": "", "Icon": "https://github.com/atribe/unRAID-docker/raw/master/icons/hddtemp.png", "PostArgs": "", "MinVer": "", "Networking": {"Mode": "host"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://hub.docker.com/r/drewster727/hddtemp-docker/", "https://hub.docker.com/r/drewster727/hddtemp-docker/"], "Keywords": ["hddtemp", ["Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"timezone": {"value": "America/Denver", "Name": "timezone", "Target": "TZ", "Default": "America/Denver", "Mode": "", "Description": "Timezone", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "hddtemp_args": {"value": "-q -d -F /dev/sd*", "Name": "HDDTEMP_ARGS", "Target": "HDDTEMP_ARGS", "Default": "-q -d -F /dev/sd*", "Mode": "", "Description": "Container Variable: HDDTEMP_ARGS", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"docker-sock": {"value": "/var/run/docker.sock", "Name": "docker.sock", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "rw", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "dev": {"value": "/dev", "Name": "/dev", "Target": "/dev", "Default": "/dev", "Mode": "rw", "Description": "Container Path: /dev", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "influxdb": {"Name": "influxdb", "Overview": "InfluxDB is an open source time series database with no external dependencies. It's useful for recording metrics, events, and performing analytics.", "Registry": "https://hub.docker.com/_/influxdb/", "GitHub": "https://github.com/influxdata/influxdb", "Repository": "influxdb", "BindTime": "true", "Privileged": "false", "Networking": {"Mode": "bridge", "Publish": {"Port": [{"HostPort": "8083", "ContainerPort": "8083", "Protocol": "tcp"}, {"HostPort": "8086", "ContainerPort": "8086", "Protocol": "tcp"}]}}, "WebUI": "http://[IP]:[PORT:8083]/", "Icon": "https://raw.githubusercontent.com/pootzko/InfluxData.Net/master/nuget-icon.png", "Official": true, "CategoryList": ["Network-Management", "Tools-Utilities"], "Sources": ["https://influxdata.com/", "https://hub.docker.com/_/influxdb/"], "Keywords": ["influxdb", ["Network-Management", "Tools-Utilities"]], "Requires": " Influxdb (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"influxdb": {"Name": "influxdb", "value": "/mnt/user/appdata/influxdb", "Target": "/var/lib/influxdb", "Mode": "rw"}}, "Port": {}}}, "speedtestforinfluxdb": {"Name": "speedtestforinfluxdb", "Repository": "barrycarey/speedtest-for-influxdb-and-grafana", "Registry": "https://hub.docker.com/r/barrycarey/speedtest-for-influxdb-and-grafana", "Network": "bridge", "Privileged": "false", "Overview": "A speedtest docker container that forwards the data to influxDB. Download the config.ini file from https://github.com/barrycarey/Speedtest-for-InfluxDB-and-Grafana/blob/master/config.ini before you start the container.", "WebUI": "", "Icon": "", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CAComment": "Technically this app is deprecated (retired) and has been replaced.  See <a href=https://github.com/barrycarey/Speedtest-for-InfluxDB-and-Grafana/issues/46#issuecomment-933066819 target=_blank>here</a>.  This app itself though is not being deprecated within Apps for the time being", "CategoryList": ["Cloud", "Network-Web"], "Sources": ["https://github.com/barrycarey/speedtest-for-influxdb-and-grafana", "https://hub.docker.com/r/barrycarey/speedtest-for-influxdb-and-grafana"], "Keywords": ["speedtestforinfluxdb", ["Cloud", "Network-Web"]], "Requires": " Influxdb (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "telegraf": {"Name": "telegraf", "Repository": "telegraf", "Registry": "https://hub.docker.com/_/telegraf/", "Network": "host", "Privileged": "true", "Overview": "Telegraf gathers metrics from your system and sends them to an InfluxDB server for storage. From InfluxDB you would typically use something like Grafana to plot the data.[br]\r\n", "Icon": "https://github.com/atribe/unRAID-docker/raw/master/icons/telegraf.png", "Official": true, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/influxdata/telegraf", "https://hub.docker.com/_/telegraf/"], "Keywords": ["telegraf", ["Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"key1": {"value": "", "Name": "Key 1", "Target": "HOST_PROC", "Default": "/rootfs/proc", "Mode": "", "Description": "Container Variable: HOST_PROC", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "key2": {"value": "", "Name": "Key 2", "Target": "HOST_SYS", "Default": "/rootfs/sys", "Mode": "", "Description": "Container Variable: HOST_SYS", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "key3": {"value": "", "Name": "Key 3", "Target": "HOST_ETC", "Default": "/rootfs/etc", "Mode": "", "Description": "Container Variable: HOST_ETC", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "key4": {"value": "", "Name": "Key 4", "Target": "HOST_MOUNT_PREFIX", "Default": "/rootfs", "Mode": "", "Description": "Container Variable: HOST_MOUNT_PREFIX", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"hostpath1": {"value": "", "Name": "Host Path 1", "Target": "/var/run/utmp", "Default": "/var/run/utmp", "Mode": "ro", "Description": "Container Path: /var/run/utmp", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath2": {"value": "", "Name": "Host Path 2", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "ro", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath3": {"value": "", "Name": "Host Path 3", "Target": "/rootfs", "Default": "/", "Mode": "ro", "Description": "Container Path: /rootfs", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath4": {"value": "", "Name": "Host Path 4", "Target": "/rootfs/sys", "Default": "/sys", "Mode": "ro", "Description": "Container Path: /rootfs/sys", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath5": {"value": "", "Name": "Host Path 5", "Target": "/rootfs/etc", "Default": "/etc", "Mode": "ro", "Description": "Container Path: /rootfs/etc", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath6": {"value": "", "Name": "Host Path 6", "Target": "/rootfs/proc", "Default": "/proc", "Mode": "ro", "Description": "Container Path: /rootfs/proc", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath7": {"value": "", "Name": "Host Path 7", "Target": "/etc/telegraf/telegraf.conf", "Default": "/mnt/user/appdata/telegraf/telegraf.conf", "Mode": "rw", "Description": "Container Path: /etc/telegraf/telegraf.conf", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "hostpath8": {"value": "", "Name": "Host Path 8", "Target": "/run/udev", "Default": "/run/udev", "Mode": "ro", "Description": "Container Path: /run/udev", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "wordpress": {"Name": "wordpress", "Repository": "wordpress", "Registry": "https://hub.docker.com/_/wordpress/", "Network": "bridge", "Privileged": "false", "Overview": "WordPress is a free and open source blogging tool and a content management system (CMS) based on PHP and MySQL, which runs on a web hosting service.\r\n", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://s.w.org/style/images/about/WordPress-logotype-wmark.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "MariaDB / MySQL database installed", "Official": true, "CategoryList": ["Other", "Network-Web"], "Sources": ["https://wordpress.org/", "https://hub.docker.com/_/wordpress/"], "Keywords": ["wordpress", ["Other", "Network-Web"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"wordpress_db_host": {"value": "", "Name": "WORDPRESS_DB_HOST", "Target": "WORDPRESS_DB_HOST", "Default": "", "Mode": "", "Description": "External database container hostname and port \r\n&lt;br&gt;ex. 192.168.1.100:8080", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "wordpress_db_user": {"value": "", "Name": "WORDPRESS_DB_USER", "Target": "WORDPRESS_DB_USER", "Default": "", "Mode": "", "Description": "External database user", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "wordpress_db_password": {"value": "", "Name": "WORDPRESS_DB_PASSWORD", "Target": "WORDPRESS_DB_PASSWORD", "Default": "", "Mode": "", "Description": "External database password", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "wordpress_db_name": {"value": "", "Name": "WORDPRESS_DB_NAME", "Target": "WORDPRESS_DB_NAME", "Default": "", "Mode": "", "Description": "The WORDPRESS_DB_NAME needs to already exist on the given DB server; it will not be created by the wordpress container.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"www": {"value": "/mnt/user/appdata/wordpress", "Name": "www", "Target": "/var/www/html", "Default": "", "Mode": "rw", "Description": "Container Path: /var/www/html", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"containerport": {"value": "8080", "Name": "Container port", "Target": "80", "Default": "", "Mode": "tcp", "Description": "Connects to internal port 80 (Ex. 8080:80)", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "taskcafe": {"Beta": "true", "Name": "taskcafe", "Overview": "A free and open source alternative project management tool.\n", "Registry": "https://hub.docker.com/r/taskcafe/taskcafe", "Repository": "taskcafe/taskcafe", "Network": "bridge", "Networking": {"Mode": "bridge"}, "WebUI": "http://[IP]:[PORT:3333]/", "Icon": "https://raw.githubusercontent.com/cheesemarathon/docker-templates/master/images/taskcafe.png", "Requires": "Postgres container installed", "Official": true, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/JordanKnott/taskcafe", "https://hub.docker.com/r/taskcafe/taskcafe"], "Keywords": ["taskcafe", ["Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"taskcafe_database_host": {"value": "", "Name": "TASKCAFE_DATABASE_HOST", "Target": "TASKCAFE_DATABASE_HOST", "Default": "", "Mode": "", "Description": "Container Variable: TASKCAFE_DATABASE_HOST", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "taskcafe_migrate": {"value": "true", "Name": "TASKCAFE_MIGRATE", "Target": "TASKCAFE_MIGRATE", "Default": "true", "Mode": "", "Description": "Container Variable: TASKCAFE_MIGRATE", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "taskcafe_database_password": {"value": "", "Name": "TASKCAFE_DATABASE_PASSWORD", "Target": "TASKCAFE_DATABASE_PASSWORD", "Default": "", "Mode": "", "Description": "Container Variable: TASKCAFE_DATABASE_PASSWORD", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "taskcafe_database_user": {"value": "", "Name": "TASKCAFE_DATABASE_USER", "Target": "TASKCAFE_DATABASE_USER", "Default": "", "Mode": "", "Description": "Container Variable: TASKCAFE_DATABASE_USER", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {}, "Port": {"webui": {"value": "3298", "Name": "Web UI", "Target": "3333", "Default": "3298", "Mode": "tcp", "Description": "Container Port: 3333", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "tailscale": {"Name": "tailscale", "Repository": "deasmi/unraid-tailscale", "Registry": "https://hub.docker.com/repository/docker/deasmi/unraid-tailscale", "Network": "host", "Privileged": "true", "Overview": "Private networks made easy\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/deasmi/unraid-tailscale/master/logo.png", "ExtraParams": "--cap-add=NET_ADMIN --hostname=unraid", "PostArgs": "", "Networking": {"Mode": "host"}, "RecommendedRaw": "11/1/2021", "RecommendedDate": 1635739200, "RecommendedReason": {"en_US": "With over 335K downloads to date, Tailscale is this month's CA Spotlight container"}, "CategoryList": ["Network-VPN"], "Sources": ["https://github.com/deasmi/unraid-tailscale", "https://hub.docker.com/repository/docker/deasmi/unraid-tailscale"], "Keywords": ["tailscale", ["Network-VPN"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"up_flags": {"value": "", "Name": "UP_FLAGS", "Target": "UP_FLAGS", "Default": "", "Mode": "", "Description": "Additional flags to pass to tailscale on startup", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"appdatapath": {"value": "/mnt/user/appdata/tailscale", "Name": "Appdata path", "Target": "/state", "Default": "", "Mode": "rw", "Description": "Container Path: /state", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "sia": {"Name": "sia", "Repository": "mtlynch/sia", "Registry": "https://hub.docker.com/r/mtlynch/sia/", "Network": "host", "Privileged": "false", "Overview": "Sia is a decentralized storage platform secured by blockchain technology. The Sia Storage Platform leverages underutilized hard drive capacity around the world to create a data storage marketplace that is more reliable and lower cost than traditional cloud storage providers. [Block-chain] [BTC-Token]", "WebUI": "", "Icon": "https://i.imgur.com/XiSQgV4.png", "PostArgs": "", "MinVer": "6.5.1", "Networking": {"Mode": "host"}, "CategoryList": ["Cloud", "Other"], "Sources": ["https://sia.tech/", "https://hub.docker.com/r/mtlynch/sia/"], "Keywords": ["sia", ["Cloud", "Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"siamodules": {"value": "gctwh", "Name": "Sia modules", "Target": "SIA_MODULES", "Default": "gctw", "Mode": "", "Description": "Container Variable: SIA_MODULES", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "siawalletpassword": {"value": "", "Name": "Sia wallet password", "Target": "SIA_WALLET_PASSWORD", "Default": "", "Mode": "", "Description": "Container Variable: SIA_WALLET_PASSWORD", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"containerpathonhost": {"value": "/mnt/user/Sia", "Name": "Container path on host", "Target": "/sia-data", "Default": "", "Mode": "rw", "Description": "Container Path: /sia-data", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "fogproject": {"Name": "fogproject", "Repository": "mudislander/fogproject", "Registry": "https://hub.docker.com/r/mudislander/fogproject//Dockerfile/", "Network": "host", "Privileged": "true", "Overview": "FOG Project can capture, deploy, and manage Windows, Mac OSX, and various Linux distributions.", "Icon": "https://raw.githubusercontent.com/Mudislander/docker-templates/master/img/fogproject_icon.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CAComment": "Note that this container appears to have been abandonded and is only installing a very old version of FOG.  While functional, do not expect updates to happen to this app", "CategoryList": ["Network-Other"], "Sources": ["https://fogproject.org/", "https://hub.docker.com/r/mudislander/fogproject//Dockerfile/"], "Keywords": ["fogproject", ["Network-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"ipserver": {"value": "192.168.0.200", "Name": "IP Server", "Target": "IP", "Default": "", "Mode": "", "Description": "Container Variable: IP", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"mysql": {"value": "/mnt/cache/FOGServer/MySQL", "Name": "MySQL", "Target": "/var/lib/mysql", "Default": "", "Mode": "rw", "Description": "Container Path: /var/lib/mysql", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "images": {"value": "/mnt/cache/FOGServer/images", "Name": "Images", "Target": "/images", "Default": "", "Mode": "rw", "Description": "Container Path: /images", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"port80": {"value": "80", "Name": "Port 80", "Target": "80", "Default": "", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "port69tcp": {"value": "69", "Name": "Port 69 TCP", "Target": "69", "Default": "", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "port69udp": {"value": "69", "Name": "Port 69 UDP", "Target": "69", "Default": "", "Mode": "udp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "port21": {"value": "21", "Name": "Port 21", "Target": "21", "Default": "", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "port9000": {"value": "9000", "Name": "Port 9000", "Target": "9000", "Default": "", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "onetimesecret": {"Name": "onetimesecret", "Repository": "siw36/onetimesecret", "Registry": "https://hub.docker.com/r/siw36/onetimesecret/", "Network": "bridge", "Privileged": "false", "Overview": "Containerized OneTimeSecret with customization, and without paid/account features.\r\n", "Requires": "Redis container installed", "WebUI": "http://[IP]:[PORT:7143]", "Icon": "https://raw.githubusercontent.com/CorneliousJD/Docker-Templates/master/icons/onetimesecret.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Productivity", "Security", "Tools-Utilities"], "Sources": ["https://github.com/siw36/onetimesecret", "https://hub.docker.com/r/siw36/onetimesecret/"], "Keywords": ["onetimesecret", ["Productivity", "Security", "Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"ots_domain": {"value": "onetime.domain.com", "Name": "OTS_DOMAIN", "Target": "OTS_DOMAIN", "Default": "onetime.domain.com", "Mode": "", "Description": "Domain/host for generated links, either IP:7134 or sub.domain.com", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ots_master_key": {"value": "CHANGEME", "Name": "OTS_MASTER_KEY", "Target": "OTS_MASTER_KEY", "Default": "", "Mode": "", "Description": "Please change to a randomly generated value for encryption.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ots_redis_host": {"value": "", "Name": "OTS_REDIS_HOST", "Target": "OTS_REDIS_HOST", "Default": "", "Mode": "", "Description": "Redis host address.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ots_redis_port": {"value": "6379", "Name": "OTS_REDIS_PORT", "Target": "OTS_REDIS_PORT", "Default": "6379", "Mode": "", "Description": "Redis port number.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ots_redis_pw": {"value": "", "Name": "OTS_REDIS_PW", "Target": "OTS_REDIS_PW", "Default": "", "Mode": "", "Description": "Redis password, which is required.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "ots_image_fav_icon": {"value": "", "Name": "OTS_IMAGE_FAV_ICON", "Target": "OTS_IMAGE_FAV_ICON", "Default": "", "Mode": "", "Description": "Optional link to a favicon.ico file.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ots_image_logo": {"value": "", "Name": "OTS_IMAGE_LOGO", "Target": "OTS_IMAGE_LOGO", "Default": "", "Mode": "", "Description": "Optional link to a logo file.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ots_color": {"value": "#DD4A22", "Name": "OTS_COLOR", "Target": "OTS_COLOR", "Default": "#DD4A22", "Mode": "", "Description": "Change the color theme of the web interface.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ots_ssl": {"value": "false", "Name": "OTS_SSL", "Target": "OTS_SSL", "Default": "false", "Mode": "", "Description": "Changes how URLs are generated, with HTTPS or without (set to true for use behind reverse proxy!)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webinterfaceport": {"value": "7143", "Name": "Web Interface Port", "Target": "7143", "Default": "7143", "Mode": "tcp", "Description": "Container Port: 7143", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "openeats": {"Name": "openeats", "Repository": "bramblegb/openeats", "Registry": "https://hub.docker.com/r/bramblegb/openeats/", "Network": "bridge", "Privileged": "false", "Overview": "OpenEats is a recipe management site that allows users to create, share, and store their personal collection of recipes.\r\n", "WebUI": "http://[IP]:[PORT:80]", "Icon": "https://raw.githubusercontent.com/CorneliousJD/Docker-Templates/master/icons/openeats.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "MySQL / MariaDB installed", "CategoryList": ["Productivity", "Tools-Utilities", "Other"], "Sources": ["https://github.com/open-eats/OpenEats", "https://hub.docker.com/r/bramblegb/openeats/"], "Keywords": ["openeats", ["Productivity", "Tools-Utilities", "Other"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"openeats_version": {"value": "master", "Name": "OPENEATS_VERSION", "Target": "OPENEATS_VERSION", "Default": "master", "Mode": "", "Description": "Version of OpenEats to pull", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "allowed_host": {"value": "*", "Name": "ALLOWED_HOST", "Target": "ALLOWED_HOST", "Default": "*", "Mode": "", "Description": "Either * (all) or local IP, openeatas.domain.com", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "superuser_name": {"value": "openeats", "Name": "SUPERUSER_NAME", "Target": "SUPERUSER_NAME", "Default": "openeats", "Mode": "", "Description": "Initial superuser account name", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "superuser_password": {"value": "password", "Name": "SUPERUSER_PASSWORD", "Target": "SUPERUSER_PASSWORD", "Default": "password", "Mode": "", "Description": "Initial superuser account password", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "mysql_host": {"value": "", "Name": "MYSQL_HOST", "Target": "MYSQL_HOST", "Default": "", "Mode": "", "Description": "SQL server host address", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mysql_port": {"value": "3306", "Name": "MYSQL_PORT", "Target": "MYSQL_PORT", "Default": "3306", "Mode": "", "Description": "SQL server port number", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mysql_database": {"value": "openeats", "Name": "MYSQL_DATABASE", "Target": "MYSQL_DATABASE", "Default": "openeats", "Mode": "", "Description": "SQL server database to connect to", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mysql_user": {"value": "", "Name": "MYSQL_USER", "Target": "MYSQL_USER", "Default": "", "Mode": "", "Description": "SQL server user", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mysql_root_password": {"value": "", "Name": "MYSQL_ROOT_PASSWORD", "Target": "MYSQL_ROOT_PASSWORD", "Default": "", "Mode": "", "Description": "SQL server password", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "django_secret_key": {"value": "", "Name": "DJANGO_SECRET_KEY", "Target": "DJANGO_SECRET_KEY", "Default": "", "Mode": "", "Description": "Enter a randomized set of 32 characters here", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "django_debug": {"value": "False", "Name": "DJANGO_DEBUG", "Target": "DJANGO_DEBUG", "Default": "False", "Mode": "", "Description": "Set debug mode", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "node_locale": {"value": "en", "Name": "NODE_LOCALE", "Target": "NODE_LOCALE", "Default": "en", "Mode": "", "Description": "English: en\r\nGerman: de\r\nSpanish: es\r\nFrench: fr", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/openeats/", "Name": "Appdata", "Target": "/code/site-media/", "Default": "/mnt/user/appdata/openeats/", "Mode": "rw", "Description": "Container Path: /code/site-media/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"httpport": {"value": "8760", "Name": "HTTP Port", "Target": "80", "Default": "8760", "Mode": "tcp", "Description": "Container Port: 80", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "passwordpusher": {"Name": "passwordpusher", "Repository": "pglombardo/pwpush-postgres", "Registry": "https://hub.docker.com/r/pglombardo/pwpush-postgres/", "Network": "bridge", "Privileged": "false", "Overview": "This version requires a separate PostgreSQL container. PasswordPusher or PWPush is an opensource application to communicate passwords over the web. Links to passwords expire after a certain number of views and/or time has passed.", "WebUI": "http://[IP]:[PORT:5100]", "Icon": "https://raw.githubusercontent.com/CorneliousJD/Docker-Templates/master/icons/passwordpusher.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Postgres container installed", "CategoryList": ["Productivity", "Security", "Tools-Utilities"], "Sources": ["https://github.com/pglombardo/PasswordPusher", "https://hub.docker.com/r/pglombardo/pwpush-postgres/"], "Keywords": ["passwordpusher", ["Productivity", "Security", "Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"postgresqldatabase": {"value": "postgresql://pwpush_user:pwpush_pass@pgsql_server:5432/pwpush_db", "Name": "PostgreSQL Database", "Target": "DATABASE_URL", "Default": "postgresql://pwpush_user:pwpush_pass@pgsql_server:5432/pwpush_db", "Mode": "", "Description": "Format: postgresql://username:password@server:port/database", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {}, "Port": {"webinterface": {"value": "51U00", "Name": "Web Interface", "Target": "5100", "Default": "5100", "Mode": "tcp", "Description": "Container Port: 5100", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "phpservermonitor": {"Name": "phpservermonitor", "Repository": "benoitpodwinski/phpservermon", "Registry": "https://hub.docker.com/r/benoitpodwinski/phpservermon/", "Network": "bridge", "Privileged": "false", "Overview": "PHP Server Monitor checks whether your websites and servers are up and running.Web based user interface where you can manage your checks, users, etc. Email, SMS, Discord, Pushover, Telegram and Jabber notifications. Requires MySQL or MariaDB.", "WebUI": "http://[IP]:[PORT:80]", "Icon": "https://raw.githubusercontent.com/CorneliousJD/Docker-Templates/master/icons/phpservermon.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "MySQL / MariaDB installed", "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/phpservermon/phpservermon", "https://hub.docker.com/r/benoitpodwinski/phpservermon/"], "Keywords": ["phpservermonitor", ["Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"psm_base_url": {"value": "", "Name": "PSM_BASE_URL", "Target": "PSM_BASE_URL", "Default": "", "Mode": "", "Description": "Leave blank if you're just accessing locally, otherwise enter your full reverse proxy URL (including https://)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "psm_db_host": {"value": "", "Name": "PSM_DB_HOST", "Target": "PSM_DB_HOST", "Default": "", "Mode": "", "Description": "Hostname or IP of MySQL or MariaDB.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "psm_db_port": {"value": "3306", "Name": "PSM_DB_PORT", "Target": "PSM_DB_PORT", "Default": "3306", "Mode": "", "Description": "Container Variable: PSM_DB_PORT", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "psm_db_name": {"value": "phpservermon", "Name": "PSM_DB_NAME", "Target": "PSM_DB_NAME", "Default": "phpservermon", "Mode": "", "Description": "Container Variable: PSM_DB_NAME", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "psm_db_user": {"value": "phpservermon", "Name": "PSM_DB_USER", "Target": "PSM_DB_USER", "Default": "phpservermon", "Mode": "", "Description": "Container Variable: PSM_DB_USER", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "psm_db_pass": {"value": "", "Name": "PSM_DB_PASS", "Target": "PSM_DB_PASS", "Default": "", "Mode": "", "Description": "Container Variable: PSM_DB_PASS", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "php_timezone": {"value": "UTC", "Name": "PHP_TIMEZONE", "Target": "PHP_TIMEZONE", "Default": "UTC", "Mode": "", "Description": "Container Variable: PHP_TIMEZONE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "update_interval": {"value": "120", "Name": "UPDATE_INTERVAL", "Target": "UPDATE_INTERVAL", "Default": "120", "Mode": "", "Description": "Container Variable: UPDATE_INTERVAL", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "psm_db_prefix": {"value": "psm_", "Name": "PSM_DB_PREFIX", "Target": "PSM_DB_PREFIX", "Default": "psm_", "Mode": "", "Description": "Container Variable: PSM_DB_PREFIX", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "php_memory_limit": {"value": "512M", "Name": "PHP_MEMORY_LIMIT", "Target": "PHP_MEMORY_LIMIT", "Default": "512M", "Mode": "", "Description": "Container Variable: PHP_MEMORY_LIMIT", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "max_upload": {"value": "128M", "Name": "MAX_UPLOAD", "Target": "MAX_UPLOAD", "Default": "128M", "Mode": "", "Description": "Container Variable: MAX_UPLOAD", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webinterface": {"value": "7139", "Name": "Web Interface", "Target": "80", "Default": "7139", "Mode": "tcp", "Description": "Container Port: 80", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "unifiprotect": {"Name": "unifiprotect", "Repository": "markdegroot/unifi-protect-x86", "Registry": "https://hub.docker.com/r/markdegroot/unifi-protect-x86/", "Network": "host", "Privileged": "false", "Overview": "Run UniFi Protect in Docker on x86 hardware. \r\n", "WebUI": "http://[IP]:[PORT:7080]", "Icon": "https://raw.githubusercontent.com/CorneliousJD/Docker-Templates/master/icons/unifiprotect.png", "ExtraParams": "--tmpfs /srv/unifi-protect/temp -m 2048m", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Network-Other"], "Sources": ["https://github.com/markdegrootnl/unifi-protect-x86", "https://hub.docker.com/r/markdegroot/unifi-protect-x86/"], "Keywords": ["unifiprotect", ["Network-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"appdata": {"value": "/mnt/user/appdata/unifiprotect/data", "Name": "AppData", "Target": "/srv/unifi-protect", "Default": "/mnt/user/appdata/unifiprotect/data", "Mode": "rw", "Description": "Container Path: /srv/unifi-protect", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "database": {"value": "/mnt/user/appdata/unifiprotect/database", "Name": "Database", "Target": "/var/lib/postgresql/10/main", "Default": "/mnt/user/appdata/unifiprotect/database", "Mode": "rw", "Description": "Container Path: /var/lib/postgresql/10/main", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "mymediaforalexa": {"Name": "mymediaforalexa", "Repository": "bizmodeller/mymediaforalexa", "Registry": "https://hub.docker.com/r/bizmodeller/mymediaforalexa/~/dockerfile/", "Network": "host", "Privileged": "false", "Overview": "A media server that allows you to stream audio files (e.g. music and audiobooks) that are stored on your unRAID server to Alexa enabled devices such as Amazon Echo or Amazon Dot using voice control.[p]\r\n", "WebUI": "http://[IP]:[PORT:52051]", "Icon": "https://raw.githubusercontent.com/itimpi/MyMediaForAlexa/master/MyMediaForAlexa.png", "PostArgs": "", "Networking": {"Mode": "host"}, "RecommendedRaw": "10/1/2020", "RecommendedDate": 1601524800, "RecommendedReason": {"en_US": "Nothing beats being able to play your own music collection on your Alexa device"}, "RecommendedWho": "Andrew", "CategoryList": ["HomeAutomation", "MediaServer-Music"], "Sources": ["https://hub.docker.com/r/bizmodeller/mymediaforalexa/~/dockerfile/"], "Keywords": ["mymediaforalexa", ["HomeAutomation", "MediaServer-Music"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"datafolder": {"value": "/mnt/user/appdata/MyMediaForAlexa", "Name": "Data folder", "Target": "/datadir", "Default": "", "Mode": "rw", "Description": "The location for config settings and indexing information", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "medialibrary": {"value": "", "Name": "Media Library", "Target": "/medialibrary", "Default": "", "Mode": "rw", "Description": "The location of the media to be handled by My Media For Alexa", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"alexaport": {"value": "52050", "Name": "Alexa port", "Target": "52050", "Default": "", "Mode": "tcp", "Description": "Port used to communicate with Alexa\r\n&lt;p&gt;MUST NOT BE CHANGED&lt;/p&gt;", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "adminport": {"value": "52051", "Name": "Admin port", "Target": "52051", "Default": "", "Mode": "tcp", "Description": "Admin port used to manage My Media For Alexa\r\n&lt;p&gt;MUST NOT BE CHANGED&lt;/p&gt;", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "rust-server": {"Name": "rust-server", "Repository": "mdarkness1988/rust-server", "Registry": "https://hub.docker.com/r/mdarkness1988/rust-server", "Network": "host", "Privileged": "true", "Overview": "Fully customizable Rust Server at your fingertips. [br] \r\n", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://orig00.deviantart.net/f0bf/f/2014/018/9/6/rust___icon_by_blagoicons-d72pie6.png", "ExtraParams": "-m 16g --restart unless-stopped", "PostArgs": "-m 16", "Networking": {"Mode": "host"}, "CategoryList": ["GameServers"], "Sources": ["https://hub.docker.com/r/mdarkness1988/rust-server"], "Keywords": ["rust-server", ["GameServers"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"public": {"value": "1", "Name": "Public", "Target": "PUBLIC", "Default": "1", "Mode": "", "Description": "1 = Yes &lt;/br&gt; \r\n0 = No &lt;/br&gt;\r\nBe accessible online. &lt;/br&gt;\r\nWill automatically port forward your router. (UPnP) ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "pve": {"value": "0", "Name": "PVE", "Target": "PVE", "Default": "0", "Mode": "", "Description": "1 = Enabled  (Player Vs Entities) &lt;/br&gt;\r\n0 = Disabled (Player Vs Player) ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "automaintenance": {"value": "1", "Name": "Auto Maintenance", "Target": "AUTO", "Default": "1", "Mode": "", "Description": "1 = Yes &lt;/br&gt;\r\n0 = No &lt;/br&gt;\r\nAutomatically updates server/oxide and manages wipes.  &lt;/br&gt;\r\nWill notify players before update happens. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "autowipe": {"value": "", "Name": "Auto Wipe", "Target": "WIPEDAYS", "Default": "", "Mode": "", "Description": "Leave (BLANK) for no server wipes.  &lt;/br&gt;\r\nEnter the amount of days until server wipes. &lt;/br&gt;\r\nExample.. 7 will wipe the server 7 days after the map was created. &lt;/br&gt;\r\nPlayers will be notified before wipe. ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "wipedateontitle": {"value": "0", "Name": "Wipe Date On Title", "Target": "WIPE_TITLE", "Default": "0", "Mode": "", "Description": "1 = Enabled &lt;/br&gt;\r\n0 = Disabled &lt;/br&gt;\r\nWill show the the server wiped date in the server name. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "oxideplugin": {"value": "0", "Name": "Oxide Plugin", "Target": "OXIDE", "Default": "0", "Mode": "", "Description": "1 = Enabled &lt;/br&gt;\r\n0 = Disable &lt;/br&gt; \r\nBe able to install plugins from Oxide. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "performance": {"value": "1", "Name": "Performance", "Target": "PERFORMANCE", "Default": "1", "Mode": "", "Description": "1 = Resource Friendly (Optimized)  &lt;/br&gt;\r\n2 = Original (Rust Default Settings) &lt;/br&gt;\r\n3 = Competitive (Resource Gobbler)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "serverrelease": {"value": "public", "Name": "Server Release", "Target": "RELEASE", "Default": "public", "Mode": "", "Description": "public = (Latest update)  &lt;/br&gt;\r\nprerelease = (Under development)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "servername": {"value": "My Rust Server", "Name": "Server Name", "Target": "NAME", "Default": "", "Mode": "", "Description": "Enter the server name. &lt;/br&gt;\r\nThis is the name that will show up in Rust server list. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "serverdescription": {"value": "", "Name": "Server Description", "Target": "DESCRIPTION", "Default": "", "Mode": "", "Description": "The information about the server. &lt;/br&gt;\r\nThis will be shown when this server is selected in rust server list. &lt;/br&gt;\r\nUse \\n for new line. ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "bannerurl": {"value": "", "Name": "Banner URL", "Target": "BANNER", "Default": "", "Mode": "", "Description": "Banner must be 512x256 PNG", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "maxplayers": {"value": "50", "Name": "Max Players", "Target": "PLAYERS", "Default": "100", "Mode": "", "Description": "Max amount of players that can join. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mapsize": {"value": "medium", "Name": "Map Size", "Target": "MAPSIZE", "Default": "medium", "Mode": "", "Description": "tiny | small &lt;/br&gt;\r\nmedium | large &lt;/br&gt;\r\nmassive", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "rconpassword": {"value": "server", "Name": "Rcon Password", "Target": "PASSWORD", "Default": "changeme", "Mode": "", "Description": "Password to access Rcon (Remote Console) &lt;/br&gt;\r\nLeave blank for unsecure login (Not Recommended) ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "(advanced)extrastartuparguments": {"value": "", "Name": "(ADVANCED) Extra Startup Arguments", "Target": "ARGUMENTS", "Default": "", "Mode": "", "Description": "Extra rust arguments to be applied when starting up server. ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "announce1": {"value": "", "Name": "Announce 1", "Target": "ANNOUNCE1", "Default": "", "Mode": "", "Description": "Leave BLANK to disable announcements.  &lt;/br&gt;\r\nEnter announcement in order 1-5. &lt;/br&gt;\r\nNot all announcements must be filled ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "announce2": {"value": "", "Name": "Announce 2", "Target": "ANNOUNCE2", "Default": "", "Mode": "", "Description": "ANNOUNCEMENT 2", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "announce3": {"value": "", "Name": "Announce 3", "Target": "ANNOUNCE3", "Default": "", "Mode": "", "Description": "ANNOUNCEMENT 3", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "announce4": {"value": "", "Name": "Announce 4", "Target": "ANNOUNCE4", "Default": "", "Mode": "", "Description": "ANNOUNCEMENT 4", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "announce5": {"value": "", "Name": "Announce 5", "Target": "ANNOUNCE5", "Default": "", "Mode": "", "Description": "ANNOUNCEMENT 5", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "portforwardweb": {"value": "8080", "Name": "Port Forward Web", "Target": "PORTFORWARD_WEB", "Default": "8080", "Mode": "", "Description": "Match this port with (Web Port)", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "portforwardrust": {"value": "28015", "Name": "Port Forward Rust", "Target": "PORTFORWARD_RUST", "Default": "28015", "Mode": "", "Description": "Match this port with (Rust Port)", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "portforwardrcon": {"value": "28016", "Name": "Port Forward Rcon", "Target": "PORTFORWARD_RCON", "Default": "28016", "Mode": "", "Description": "Match this port with (Rcon Port)", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "mapseed": {"value": "0", "Name": "Map Seed", "Target": "MAPSEED", "Default": "0", "Mode": "", "Description": "0 = Randomises the map terrain etc..  &lt;/br&gt;\r\nOr enter your own value if you want a consistent map on each wipe.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "serverfoldername": {"value": "My-server-name", "Name": "Server Folder Name", "Target": "IDENTITY", "Default": "Server-1", "Mode": "", "Description": "Server folder name,  e.g My-server-name", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "saveintervals": {"value": "300", "Name": "Save Intervals", "Target": "SAVE_INTERVAL", "Default": "300", "Mode": "", "Description": "Value is in seconds. ", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "announcedelay": {"value": "8", "Name": "Announce Delay", "Target": "ANNOUNCE_DELAY", "Default": "8", "Mode": "", "Description": "Delay in minutes between each announcement.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"rustserverdirectory": {"value": "/mnt/user/appdata/Rust-Server/", "Name": "Rust Server Directory", "Target": "/steamcmd/rust", "Default": "/mnt/user/appdata/Rust-Server/", "Mode": "rw", "Description": "Mapping Directory", "Type": "Path", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Port": {"webport": {"value": "8080", "Name": "Web Port", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "Web host for Rcon", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "rconport": {"value": "28016", "Name": "Rcon Port", "Target": "28016", "Default": "28016", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "rustporttcp": {"value": "28015", "Name": "Rust Port TCP", "Target": "28015", "Default": "28015", "Mode": "tcp", "Description": "TCP", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "rustportudp": {"value": "28015", "Name": "Rust Port UDP", "Target": "28015", "Default": "28015", "Mode": "udp", "Description": "UDP", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}}}}, "gsdock": {"Name": "gsdock", "Repository": "shrmn/gsdock", "Registry": "https://hub.docker.com/r/shrmn/gsdock/", "Network": "host", "Privileged": "false", "Overview": "GoodSync Connect Server\r\n", "WebUI": "http://[IP]:[PORT:11000]/", "Icon": "https://lh5.ggpht.com/wKQx6--IZ50yitxPX24gbsO2rrehdaGNw9J4rHceHlwNPFrNY7CfCO3UDQub7GrsQr4=w300", "PostArgs": "", "Networking": {"Mode": "host"}, "Beta": "true", "CategoryList": ["Backup"], "Sources": ["https://hub.docker.com/r/shrmn/gsdock/"], "Keywords": ["gsdock", ["Backup"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"gs_user": {"value": "", "Name": "GS_USER", "Target": "GS_USER", "Default": "", "Mode": "", "Description": "GoodSync Connect Username", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "gs_pwd": {"value": "", "Name": "GS_PWD", "Target": "GS_PWD", "Default": "", "Mode": "", "Description": "GoodSync Connect Password", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "gs_id": {"value": "unraid", "Name": "GS_ID", "Target": "GS_ID", "Default": "unraid", "Mode": "", "Description": "(optional) GS Server Name. Will be container ID if blank.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "puid": {"value": "99", "Name": "PUID", "Target": "PUID", "Default": "99", "Mode": "", "Description": "UID for permissions. Do not change unless you know what you're doing.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "pgid": {"value": "100", "Name": "PGID", "Target": "PGID", "Default": "100", "Mode": "", "Description": "GID for permissions. Do not change unless you know what you're doing.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Path": {"goodsyncconnectbackupsdatapath": {"value": "/mnt/user", "Name": "GoodSync Connect Backups Data Path", "Target": "/data", "Default": "/mnt/user", "Mode": "rw", "Description": "Holds backup data. Should place this outside of appdata, in a dedicated backups share", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "gsserverconfigurationfolder": {"value": "/mnt/user/appdata/gsdock", "Name": "GS Server Configuration Folder", "Target": "/config", "Default": "/mnt/user/appdata/gsdock", "Mode": "rw", "Description": "Holds settings.tix and users.tix config files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"gstpport": {"value": "33333", "Name": "GSTP Port", "Target": "33333", "Default": "33333", "Mode": "tcp", "Description": "For Goodsync Connect protocol", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "goodsyncbroadcast1": {"value": "33338", "Name": "GoodSync Broadcast 1", "Target": "33338", "Default": "33338", "Mode": "udp", "Description": "GoodSync Broadcast 1", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "goodsyncbroadcast2": {"value": "33339", "Name": "GoodSync Broadcast 2", "Target": "33339", "Default": "33339", "Mode": "udp", "Description": "GoodSync Broadcast 2", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "webuiport": {"value": "11000", "Name": "WebUI Port", "Target": "11000", "Default": "11000", "Mode": "tcp", "Description": "WebUI Configuration can be accessed through this port. Credentials are same as GS Connect credentials.", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}}}}, "foundryvtt": {"Name": "foundryvtt", "Repository": "fithwum/foundry_vtt", "Registry": "https://hub.docker.com/r/fithwum/foundry_vtt/", "Network": "host", "BindTime": "true", "Privileged": "false", "Overview": "FoundryVTT is a web based Dungeons and Dragons application that allows users to play with others over the internet.  You will have to purchase a copy of foundryvtt from https://foundryvtt.com[br][br]\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/fithwum/files-for-dockers/master/icons/d20.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["GameServers"], "Sources": ["https://foundryvtt.com/", "https://hub.docker.com/r/fithwum/foundry_vtt/"], "Keywords": ["foundryvtt", ["GameServers"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"key2": {"value": "99", "Name": "Key 2", "Target": "PUID", "Default": "99", "Mode": "", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "key3": {"value": "100", "Name": "Key 3", "Target": "PGID", "Default": "100", "Mode": "", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"datapath": {"value": "", "Name": "Data Path", "Target": "/foundry/data", "Default": "", "Mode": "rw", "Description": "Container Path: /foundry/data", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "appdataconfigpath": {"value": "/mnt/user/appdata/FoundryVTT", "Name": "AppData Config Path", "Target": "/foundry/fvtt", "Default": "/mnt/user/appdata/FoundryVTT", "Mode": "rw", "Description": "Container Path: /foundry/fvtt", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"hostport1": {"value": "30000", "Name": "Host Port 1", "Target": "30000", "Default": "30000", "Mode": "tcp", "Description": "Container Port: 30000", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "minecraft": {"Name": "minecraft", "Repository": "fithwum/minecraft", "Registry": "https://hub.docker.com/r/fithwum/minecraft/", "Network": "host", "BindTime": "true", "Privileged": "false", "Overview": "This docker is for running Minecraft vanilla server version 1.18 and java 17. You can run a modded server you can just do not delete the files that are in the folder.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/fithwum/files-for-dockers/master/icons/Minecraft.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["GameServers"], "Sources": ["https://www.minecraft.net/en-us/", "https://hub.docker.com/r/fithwum/minecraft/"], "Keywords": ["minecraft", ["GameServers"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"accepteula": {"value": "true", "Name": "Accept EULA", "Target": "ACCEPT_EULA", "Default": "false", "Mode": "", "Description": "Head over to: https://account.mojang.com/documents/minecraft_eula to read the EULA. (If you accept the EULA change the value to 'true' without quotes).", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "key2": {"value": "99", "Name": "Key 2", "Target": "PUID", "Default": "99", "Mode": "", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "key3": {"value": "100", "Name": "Key 3", "Target": "PGID", "Default": "100", "Mode": "", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"savedata": {"value": "", "Name": "Save Data", "Target": "/MCserver/world/", "Default": "", "Mode": "rw", "Description": "Container Path: /MCserver/world/", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "appdataconfigpath": {"value": "/mnt/user/appdata/minecraft-server", "Name": "AppData Config Path", "Target": "/MCserver", "Default": "/mnt/user/appdata/minecraft-server", "Mode": "rw", "Description": "Container Path: /MCserver", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"hostport1": {"value": "25565", "Name": "Host Port 1", "Target": "25565", "Default": "25565", "Mode": "udp", "Description": "Container Port: 25565", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport2": {"value": "25565", "Name": "Host Port 2", "Target": "25565", "Default": "25565", "Mode": "tcp", "Description": "Container Port: 25565", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "teamspeak3-simple": {"Name": "teamspeak3-simple", "Repository": "fithwum/teamspeak3", "Registry": "https://hub.docker.com/r/fithwum/teamspeak3/", "Network": "host", "BindTime": "true", "Privileged": "false", "Overview": "TeamSpeak is proprietary voice-over-Internet Protocol (VoIP) software that allows computer users to speak on a chat channel with fellow computer users, much like a telephone conference call. A TeamSpeak user will often wear a headset with an integrated microphone. Users use the TeamSpeak client software to connect to a TeamSpeak server of their choice, from there they can join chat channels and discuss things.[br][br]\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/fithwum/files-for-dockers/master/icons/Ts3Icon.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Network-Voip"], "Sources": ["https://www.teamspeak.com/", "https://hub.docker.com/r/fithwum/teamspeak3/"], "Keywords": ["teamspeak3-simple", ["Network-Voip"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"key2": {"value": "99", "Name": "Key 2", "Target": "PUID", "Default": "99", "Mode": "", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "key3": {"value": "100", "Name": "Key 3", "Target": "PGID", "Default": "100", "Mode": "", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"appdataconfigpath": {"value": "/mnt/user/appdata/teamspeak3", "Name": "AppData Config Path", "Target": "/ts3server", "Default": "/mnt/user/appdata/teamspeak3", "Mode": "rw", "Description": "Container Path: /ts3server", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"hostport1": {"value": "9987", "Name": "Host Port 1", "Target": "9987", "Default": "9987", "Mode": "udp", "Description": "Container Port: 9987", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport2": {"value": "10011", "Name": "Host Port 2", "Target": "10011", "Default": "10011", "Mode": "tcp", "Description": "Container Port: 10011", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport3": {"value": "30033", "Name": "Host Port 3", "Target": "30033", "Default": "30033", "Mode": "tcp", "Description": "Container Port: 30033", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "teamspeak-alpine": {"Name": "teamspeak-alpine", "Repository": "fithwum/teamspeak-alpine", "Registry": "https://hub.docker.com/r/fithwum/teamspeak-alpine/", "Network": "host", "BindTime": "true", "Privileged": "false", "Overview": "TeamSpeak is proprietary voice-over-Internet Protocol (VoIP) software that allows computer users to speak on a chat channel with fellow computer users, much like a telephone conference call. A TeamSpeak user will often wear a headset with an integrated microphone. Users use the TeamSpeak client software to connect to a TeamSpeak server of their choice, from there they can join chat channels and discuss things.[br][br]\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/fithwum/files-for-dockers/master/icons/Ts3Icon.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Network-Voip"], "Sources": ["https://www.teamspeak.com/", "https://hub.docker.com/r/fithwum/teamspeak-alpine/"], "Keywords": ["teamspeak-alpine", ["Network-Voip"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"key3": {"value": "100", "Name": "Key 3", "Target": "PGID", "Default": "100", "Mode": "", "Description": "Container Variable: PGID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "key2": {"value": "99", "Name": "Key 2", "Target": "PUID", "Default": "99", "Mode": "", "Description": "Container Variable: PUID", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"filebrowser": {"value": "", "Name": "File Browser", "Target": "/ts3server/files/virtualserver_1/", "Default": "", "Mode": "rw", "Description": "Container Path: /ts3server/files/virtualserver_1/", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "appdataconfigpath": {"value": "/mnt/user/appdata/ts3-alpine", "Name": "AppData Config Path", "Target": "/ts3server", "Default": "/mnt/user/appdata/ts3-alpine", "Mode": "rw", "Description": "Container Path: /ts3server", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"hostport1": {"value": "9987", "Name": "Host Port 1", "Target": "9987", "Default": "9987", "Mode": "udp", "Description": "Container Port: 9987", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport2": {"value": "10011", "Name": "Host Port 2", "Target": "10011", "Default": "10011", "Mode": "tcp", "Description": "Container Port: 10011", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport3": {"value": "30033", "Name": "Host Port 3", "Target": "30033", "Default": "30033", "Mode": "tcp", "Description": "Container Port: 30033", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "szurubooru-api": {"Name": "szurubooru-api", "Repository": "szurubooru/server", "Registry": "https://hub.docker.com/r/szurubooru/server", "Network": "bridge", "Privileged": "false", "Overview": "Backend API container for Szurubooru, an image board engine for small and medium communities", "Requires": "Postgres 11 installed", "WebUI": "", "Icon": "https://github.com/FoxxMD/unraid-docker-templates/raw/master/szurubooru.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["MediaServer-Photos"], "Sources": ["https://github.com/rr-/szurubooru", "https://hub.docker.com/r/szurubooru/server"], "Keywords": ["szurubooru-api", ["MediaServer-Photos"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"postgreshost": {"value": "", "Name": "Postgres Host", "Target": "POSTGRES_HOST", "Default": "", "Mode": "", "Description": "IP address of Postgres instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "postgresdb": {"value": "", "Name": "Postgres DB", "Target": "POSTGRES_DB", "Default": "", "Mode": "", "Description": "Name of the database on Postgres instance to use", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "postgresuser": {"value": "", "Name": "Postgres User", "Target": "POSTGRES_USER", "Default": "", "Mode": "", "Description": "Username of Postgres user", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "postgrespassword": {"value": "", "Name": "Postgres Password", "Target": "POSTGRES_PASSWORD", "Default": "", "Mode": "", "Description": "Password of Postgres user", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {"imagedata": {"value": "/mnt/user/appdata/szurubooru/data", "Name": "Image Data", "Target": "/data", "Default": "/mnt/user/appdata/szurubooru/data", "Mode": "rw", "Description": "Directory on host to store image data", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"apiport": {"value": "6666", "Name": "Api Port", "Target": "6666", "Default": "6666", "Mode": "tcp", "Description": "Port to expose API interface on. This is accessed by the frontend.", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "szurubooru-client": {"Name": "szurubooru-client", "Repository": "szurubooru/client", "Registry": "https://hub.docker.com/r/szurubooru/client", "Network": "bridge", "Privileged": "false", "Overview": "Frontend container for Szurubooru, an image board engine for small and medium communities", "Requires": "zurubooru-api installed", "WebUI": "http://[IP]:[PORT:80]/", "Icon": "https://github.com/FoxxMD/unraid-docker-templates/raw/master/szurubooru.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["MediaApp-Photos"], "Sources": ["https://github.com/rr-/szurubooru", "https://hub.docker.com/r/szurubooru/client"], "Keywords": ["szurubooru-client", ["MediaApp-Photos"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"buildinfo": {"value": "latest", "Name": "Build Info", "Target": "BUILD_INFO", "Default": "latest", "Mode": "", "Description": "Determines which git commit to use to build client code. Recommend keep as 'latest'", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "backendhost": {"value": "", "Name": "Backend Host", "Target": "BACKEND_HOST", "Default": "", "Mode": "", "Description": "IP Address of the backend API instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"data": {"value": "/mnt/user/appdata/szurubooru/data", "Name": "Data", "Target": "/data", "Default": "/mnt/user/appdata/szurubooru/data", "Mode": "ro", "Description": "Directory on host where image data is stored. Should be same as 'Image Data' variable on szurubooru-api", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"httpport": {"value": "8118", "Name": "Http Port", "Target": "80", "Default": "8118", "Mode": "tcp", "Description": "Port to serve site to on host", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "xlink-kai-evolution": {"Name": "xlink-kai-evolution", "Repository": "ich777/xlinkkaievolution", "Registry": "https://hub.docker.com/r/ich777/xlinkkaievolution/", "Network": "host", "Privileged": "false", "Overview": "This Docker will download and install XLink Kai: Evolution.\r\n", "WebUI": "http://[IP]:[PORT:34522]", "Icon": "https://raw.githubusercontent.com/ich777/docker-templates/master/ich777/images/xlinkkai.png", "ExtraParams": "--cap-add=NET_ADMIN --restart=unless-stopped", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["GameServers"], "Sources": ["https://www.teamxlink.co.uk/", "https://hub.docker.com/r/ich777/xlinkkaievolution/"], "Keywords": ["xlink-kai-evolution", ["GameServers"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"interfacename": {"value": "eth0", "Name": "Interface Name", "Target": "INTERFACE_NAME", "Default": "", "Mode": "", "Description": "Only change if you know what you are doing!", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "extraparameters": {"value": "", "Name": "Extra Parameters", "Target": "EXTRA_PARAMS", "Default": "", "Mode": "", "Description": "Enter extra startup parameters here if needed.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "uid": {"value": "99", "Name": "UID", "Target": "UID", "Default": "", "Mode": "", "Description": "Container Variable: UID", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "gid": {"value": "100", "Name": "GID", "Target": "GID", "Default": "", "Mode": "", "Description": "Container Variable: GID", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "umask": {"value": "000", "Name": "UMASK", "Target": "UMASK", "Default": "", "Mode": "", "Description": "Container Variable: UMASK", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "udp-connectiontotheorbs": {"value": "30000", "Name": "UDP - Connection to the Orbs", "Target": "UDP_PORT", "Default": "", "Mode": "", "Description": "This port must be forwarded in your router so that the XLinkKai Orbs can communicate with the container.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"serverfiles": {"value": "/mnt/cache/appdata/xlinkkaievolution/", "Name": "ServerFiles", "Target": "/xlinkkaievolution", "Default": "", "Mode": "rw", "Description": "Container Path: /xlinkkaievolution", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "steam-headless": {"Name": "steam-headless", "Repository": "josh5/steam-headless", "Registry": "https://hub.docker.com/r/josh5/steam-headless", "Network": "host", "Privileged": "true", "Overview": "Headless Steam Service\r\n", "WebUI": "http://[IP]:[PORT:8083]/", "Icon": "https://raw.githubusercontent.com/Josh5/docker-steam-headless/master/images/steam-icon.png", "ExtraParams": "--hostname='SteamHeadless' --add-host='SteamHeadless:127.0.0.1' --restart=unless-stopped --shm-size=2G --ipc=\"host\" -v '/tmp/.X11-unix':'/tmp/.X11-unix':'rw' -v '/dev/input':'/dev/input':'ro'", "PostArgs": "", "Requires": "\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Nvidia-Driver plugin** (nVidia Support)\r<br>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;**Radeon-TOP plugin** (AMD Support)\r<br>&nbsp;&nbsp;&nbsp;&nbsp; App uses hostnetworking (autoadd)", "CategoryList": ["GameServers"], "Sources": ["https://store.steampowered.com/", "https://hub.docker.com/r/josh5/steam-headless"], "Keywords": ["steam-headless", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"userpassword": {"value": "password", "Name": "User password", "Target": "USER_PASSWORD", "Default": "password", "Mode": "", "Description": "The password for this container.\r\nNote: This password will also be used for the root user. However, the default user has sudo access.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "true"}, "timezone": {"value": "Pacific/Auckland", "Name": "Timezone", "Target": "TZ", "Default": "Pacific/Auckland", "Mode": "", "Description": "Enter your local timezone.\r\nYou can find a full list of supported timezones \r\nin: '/usr/share/zoneinfo' (eg: 'Etc/UTC' or 'Australia/Melbourne',...)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "locales": {"value": "en_US.UTF-8 UTF-8", "Name": "Locales", "Target": "USER_LOCALES", "Default": "en_US.UTF-8 UTF-8", "Mode": "", "Description": "Enter your prefered locales.\r\nYou can find a full list of supported languages \r\nin: '/usr/share/i18n/SUPPORTED' (eg: 'en_US.UTF-8 UTF8' or 'de_DE.UTF-8 UTF-8',...)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "nvidiagpuuuid": {"value": "all", "Name": "Nvidia GPU UUID", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "all", "Mode": "", "Description": "For users with multiple GPUs, add the ID found under the ", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "drivercapabilities": {"value": "all", "Name": "Driver Capabilities", "Target": "NVIDIA_DRIVER_CAPABILITIES", "Default": "all", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "enablewebuiaudio": {"value": "true", "Name": "Enable WebUI Audio", "Target": "ENABLE_VNC_AUDIO", "Default": "true", "Mode": "", "Description": "Enable WebUI Audio. This creats a opus encoded audio websocket that will tie into the VNC WebUI. Disable this if your browser is incompatible or you do not wish for this additional process overhead.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "displayid": {"value": ":55", "Name": "Display ID", "Target": "DISPLAY", "Default": ":55", "Mode": "", "Description": "Set the X display. To use the host X server, set this to :0 (or whatever your host is currently running in /tmp/.X11-unix/X*)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "mode": {"value": "primary", "Name": "Mode", "Target": "MODE", "Default": "primary", "Mode": "", "Description": "Options: ['primary', 'secondary']. Most of the time this should be set to 'primary' on a headless server. If your server is already running an X server that you wish to use, set this to 'secondary'.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/steam-headless", "Name": "Appdata", "Target": "/home/default", "Default": "/mnt/user/appdata/steam-headless", "Mode": "rw", "Description": "Default user home directory.\r\nAll application software and configuration will be saved into this directory.\r\nAny files saved outside of this path will be cleared if the container image this templated is updated.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "games": {"value": "/mnt/user/Games", "Name": "Games", "Target": "/mnt/games", "Default": "/mnt/user/Games", "Mode": "rw", "Description": "Option path to your games.\r\nThis path will need to also be configured in Steam after the first boot.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8083", "Name": "WebUI", "Target": "8083", "Default": "8083", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "advanced", "Required": "false", "Mask": "false"}, "websocket": {"value": "32123", "Name": "Websocket", "Target": "32123", "Default": "32123", "Mode": "tcp", "Description": "Websocket (Required for audio playback through WebUI)", "Type": "Port", "Display": "advanced", "Required": "false", "Mask": "false"}, "ssh": {"value": "2222", "Name": "SSH", "Target": "2222", "Default": "2222", "Mode": "tcp", "Description": "OpenSSH Server Port.\r\nTo avoid conflicts, this has been configured to run on a non-default port", "Type": "Port", "Display": "advanced", "Required": "false", "Mask": "false"}}}}, "steam-headless-secondary": {"Name": "steam-headless-secondary", "Repository": "josh5/steam-headless", "Registry": "https://hub.docker.com/r/josh5/steam-headless", "Network": "br0", "Privileged": "true", "Overview": "Headless Steam Service (Secondary)\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/Josh5/docker-steam-headless/master/images/steam-icon.png", "ExtraParams": "--hostname='SteamHeadlessSecondary' --add-host='SteamHeadlessSecondary:127.0.0.1' --restart=unless-stopped --shm-size=2G -v '/tmp/.X11-unix':'/tmp/.X11-unix':'rw' -v '/dev/input':'/dev/input':'ro'", "PostArgs": "", "Requires": "**Steam Headless**", "CAComment": "This template is set up to use a custom network. You may have to adjust the network or IP address etc to match your system", "CategoryList": ["GameServers"], "Sources": ["https://store.steampowered.com/", "https://hub.docker.com/r/josh5/steam-headless"], "Keywords": ["steam-headless-secondary", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"userpassword": {"value": "password", "Name": "User password", "Target": "USER_PASSWORD", "Default": "password", "Mode": "", "Description": "The password for this container.\r\nNote: This password will also be used for the root user. However, the default user has sudo access.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "true"}, "timezone": {"value": "Pacific/Auckland", "Name": "Timezone", "Target": "TZ", "Default": "Pacific/Auckland", "Mode": "", "Description": "Enter your local timezone.\r\nYou can find a full list of supported timezones \r\nin: '/usr/share/zoneinfo' (eg: 'Etc/UTC' or 'Australia/Melbourne',...)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "locales": {"value": "en_US.UTF-8 UTF-8", "Name": "Locales", "Target": "USER_LOCALES", "Default": "en_US.UTF-8 UTF-8", "Mode": "", "Description": "Enter your prefered locales.\r\nYou can find a full list of supported languages \r\nin: '/usr/share/i18n/SUPPORTED' (eg: 'en_US.UTF-8 UTF8' or 'de_DE.UTF-8 UTF-8',...)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "nvidiagpuuuid": {"value": "all", "Name": "Nvidia GPU UUID", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "all", "Mode": "", "Description": "For users with multiple GPUs, add the ID found under the ", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "drivercapabilities": {"value": "all", "Name": "Driver Capabilities", "Target": "NVIDIA_DRIVER_CAPABILITIES", "Default": "all", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "displayid": {"value": ":55", "Name": "Display ID", "Target": "DISPLAY", "Default": ":55", "Mode": "", "Description": "Set the X display. To use the host X server, set this to :0 (or whatever your host is currently running in /tmp/.X11-unix/X*)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "mode": {"value": "secondary", "Name": "Mode", "Target": "MODE", "Default": "secondary", "Mode": "", "Description": "Options: ['primary', 'framebuffer', 'secondary'].", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/steam-headless-secondary", "Name": "Appdata", "Target": "/home/default", "Default": "/mnt/user/appdata/steam-headless-secondary", "Mode": "rw", "Description": "Default user home directory.\r\nAll application software and configuration will be saved into this directory.\r\nAny files saved outside of this path will be cleared if the container image this templated is updated.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "games": {"value": "/mnt/user/Games", "Name": "Games", "Target": "/mnt/games", "Default": "/mnt/user/Games", "Mode": "rw", "Description": "Option path to your games.\r\nThis path will need to also be configured in Steam after the first boot.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "adguard-exporter": {"Name": "adguard-exporter", "Repository": "ebrianne/adguard-exporter", "Registry": "https://hub.docker.com/r/ebrianne/adguard-exporter", "Network": "bridge", "Privileged": "false", "Overview": "Docker AdGuard Exporter for Prometheus.", "WebUI": "http://[IP]:[PORT:9617]/metrics", "Icon": "https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/prometheus.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/ebrianne/adguard-exporter", "https://hub.docker.com/r/ebrianne/adguard-exporter"], "Keywords": ["adguard-exporter", ["Tools-Utilities"]], "Requires": " exporter app (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"adguard_protocol": {"value": "http", "Name": "adguard_protocol", "Target": "adguard_protocol", "Default": "http", "Mode": "", "Description": "Container Variable: adguard_protocol", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "adguard_hostname": {"value": "", "Name": "adguard_hostname", "Target": "adguard_hostname", "Default": "AdGuard IP", "Mode": "", "Description": "Container Variable: adguard_hostname", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "adguard_username": {"value": "", "Name": "adguard_username", "Target": "adguard_username", "Default": "AdGuard UserName", "Mode": "", "Description": "Container Variable: adguard_username", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "adguard_password": {"value": "", "Name": "adguard_password", "Target": "adguard_password", "Default": "AdGuard Password", "Mode": "", "Description": "Container Variable: adguard_password", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "true"}, "adguard_port": {"value": "", "Name": "adguard_port", "Target": "adguard_port", "Default": "", "Mode": "", "Description": "optional if adguard is not using port 80 (http)/443 (https)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "interval": {"value": "30s", "Name": "interval", "Target": "interval", "Default": "30s", "Mode": "", "Description": "Container Variable: interval", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "log_limit": {"value": "10000", "Name": "log_limit", "Target": "log_limit", "Default": "", "Mode": "", "Description": "Container Variable: log_limit", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "server_port": {"value": "9617", "Name": "server_port", "Target": "server_port", "Default": "9617", "Mode": "", "Description": "Container Variable: server_port", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"porttoexposemetrics": {"value": "9617", "Name": "Port to expose metrics", "Target": "9617", "Default": "", "Mode": "tcp", "Description": "Container Port: 9617", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "airconnect": {"Name": "airconnect", "Repository": "1activegeek/airconnect", "Registry": "https://hub.docker.com/r/1activegeek/airconnect/", "Network": "host", "Privileged": "false", "Overview": "AirConnect container for turning Chromecast into Airplay targets\r\n", "Icon": "https://i.imgur.com/hatCnm0.png", "RepoShort": "Selfhosters", "CategoryList": ["MediaServer-Video", "MediaServer-Music", "MediaServer-Other"], "Sources": ["https://github.com/philippe44/AirConnect", "https://hub.docker.com/r/1activegeek/airconnect/"], "Keywords": ["airconnect", ["MediaServer-Video", "MediaServer-Music", "MediaServer-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "lg-connector": {"Name": "lg-connector", "Repository": "fison67/lg-connector", "Registry": "https://hub.docker.com/r/fison67/lg-connector/", "Network": "host", "Overview": "Connector for LG devices with SmartThings\r\n", "WebUI": "http://[IP]:[PORT:30020]/", "Icon": "https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/lg-connector.png", "RepoShort": "Selfhosters", "RecommendedRaw": "12/1/2021", "RecommendedDate": 1638334800, "RecommendedReason": {"en_US": "Sends Alerts/Notifications from my Wifi enabled LG Washer and Dryer to my phone and other home automation components"}, "RecommendedWho": "zeta_cartel_CFO", "CategoryList": ["HomeAutomation"], "Sources": ["https://github.com/fison67/LG-Connector", "https://hub.docker.com/r/fison67/lg-connector/"], "Keywords": ["lg-connector", ["HomeAutomation"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "0.0.3", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "monitorss-bot": {"Name": "monitorss-bot", "Repository": "synzen/monitorss", "Registry": "https://hub.docker.com/r/synzen/monitorss", "Privileged": "false", "Icon": "https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/monitorss.png", "Overview": "Discord RSS bot (formerly known as Discord.RSS) with customizable feeds.\n", "Requires": "A MongoDB container", "Network": "bridge", "RepoShort": "Selfhosters", "CategoryList": ["Network-Messenger"], "Sources": ["https://github.com/synzen/MonitoRSS", "https://hub.docker.com/r/synzen/monitorss"], "Keywords": ["monitorss-bot", ["Network-Messenger"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"bot_prefix": {"value": "", "Name": "BOT_PREFIX", "Target": "DRSS_BOT_PREFIX", "Default": "\\", "Mode": "", "Description": "Information here https://docs.monitorss.xyz/configuration/bot-configuration#bot", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "token": {"value": "", "Name": "TOKEN", "Target": "DRSS_BOT_TOKEN", "Default": "22222222222", "Mode": "", "Description": "Information here https://docs.monitorss.xyz/configuration/bot-configuration#bot", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "database_uri": {"value": "", "Name": "DATABASE_URI", "Target": "DRSS_DATABASE_URI", "Default": "mongodb://[REPLACE-WITH-IP]:27017/drss", "Mode": "", "Description": "Information here https://docs.monitorss.xyz/configuration/web-interface#database", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "component": {"value": "", "Name": "Component", "Target": "DRSS_START", "Default": "bot", "Mode": "", "Description": "Do not change", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Path": {}, "Port": {}}}, "paperless-ngx": {"Name": "paperless-ngx", "Repository": "ghcr.io/paperless-ngx/paperless-ngx", "Registry": "https://github.com/paperless-ngx/paperless-ngx/pkgs/container/paperless-ngx", "Network": "bridge", "Privileged": "false", "Requires": "Redis container installed", "ExtraSearchTerms": "dms archiving document-management-system", "Overview": "Paperless-ngx is a document management system that transforms your physical documents into a searchable online archive so you can keep, well, less paper. Paperless-ngx forked from paperless-ng to continue the great work and distribute responsibility of supporting and advancing the project among a team of people.[br][br]\n", "WebUI": "http://[IP]:[PORT:8000]", "Icon": "https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/paperless.png", "RepoShort": "Selfhosters", "Official": true, "CategoryList": ["Productivity"], "Sources": ["https://github.com/paperless-ngx/paperless-ngx", "https://github.com/paperless-ngx/paperless-ngx/pkgs/container/paperless-ngx"], "Keywords": ["paperless-ngx", ["Productivity"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"paperless_redis": {"value": "", "Name": "PAPERLESS_REDIS", "Target": "PAPERLESS_REDIS", "Default": "redis://[REPLACE-WITH-IP]:6379", "Mode": "", "Description": "Container Variable: PAPERLESS_REDIS . This is required for processing scheduled tasks such as email fetching, index optimization and for training the automatic document matcher.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "paperless_ocr_language": {"value": "", "Name": "PAPERLESS_OCR_LANGUAGE", "Target": "PAPERLESS_OCR_LANGUAGE", "Default": "eng", "Mode": "", "Description": "Container Variable: PAPERLESS_OCR_LANGUAGE . The default language to use for OCR. Set this to the language most of your documents are written in. Use a 3-letter language code consistent with ISO 639: https://www.loc.gov/standards/iso639-2/php/code_list.php. This can be a combination of multiple languages such as deu+eng, in which case tesseract will use whatever language matches best.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "paperless_ocr_languages": {"value": "", "Name": "PAPERLESS_OCR_LANGUAGES", "Target": "PAPERLESS_OCR_LANGUAGES", "Default": "", "Mode": "", "Description": "Container Variable: PAPERLESS_OCR_LANGUAGES . Additional languages to install for text recognition. The container installs English, German, Italian, Spanish and French by default. Use a space separated list of 3-letter language codes consistent with ISO 639: https://www.loc.gov/standards/iso639-2/php/code_list.php", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "paperless_filename_format": {"value": "", "Name": "PAPERLESS_FILENAME_FORMAT", "Target": "PAPERLESS_FILENAME_FORMAT", "Default": "{created}-{correspondent}-{title}", "Mode": "", "Description": "Container Variable: PAPERLESS_FILENAME_FORMAT . Changes the filenames paperless uses to store documents in the media directory. Setting none disables this feature. Uniqueness of filenames is ensured, as an incrementing counter is attached. See https://paperless-ngx.readthedocs.io/en/latest/advanced_usage.html#file-name-handling for placeholders.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "paperless_time_zone": {"value": "", "Name": "PAPERLESS_TIME_ZONE", "Target": "PAPERLESS_TIME_ZONE", "Default": "America/Los_Angeles", "Mode": "", "Description": "Container Variable: PAPERLESS_TIME_ZONE . Use this variable to set a timezone for the Paperless Docker containers. If not specified, defaults to UTC.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "paperless_ignore_dates": {"value": "", "Name": "PAPERLESS_IGNORE_DATES", "Target": "PAPERLESS_IGNORE_DATES", "Default": "", "Mode": "", "Description": "Container Variable: PAPERLESS_IGNORE_DATES . Comma separated list of dates supported by dateparser that should be ignored when extracting the creation date. Example: 2020-12-02,22.04.1999", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "paperless_consumer_polling": {"value": "", "Name": "PAPERLESS_CONSUMER_POLLING", "Target": "PAPERLESS_CONSUMER_POLLING", "Default": "0", "Mode": "", "Description": "Container Variable: PAPERLESS_CONSUMER_POLLING . If set to a value n greater than 0, inotify is disabled and the directory is polled every n seconds. This option is useful when inotify doesn't fire events like when the consume folder is a NFS share", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "paperless_secret_key": {"value": "", "Name": "PAPERLESS_SECRET_KEY", "Target": "PAPERLESS_SECRET_KEY", "Default": "e11fl1oa-*ytql8p)(06fbj4ukrlo+n7k&q5+$1md7i+mge=ee", "Mode": "", "Description": "Container Variable: PAPERLESS_SECRET_KEY . Paperless uses this to make session tokens. If you expose paperless on the internet, you need to change this, since the default secret is well known", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "puid": {"value": "", "Name": "PUID", "Target": "USERMAP_UID", "Default": "99", "Mode": "", "Description": "Container Variable: USERMAP_UID", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "pgid": {"value": "", "Name": "PGID", "Target": "USERMAP_GID", "Default": "100", "Mode": "", "Description": "Container Variable: USERMAP_GID", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"data": {"value": "", "Name": "Data", "Target": "/usr/src/paperless/data", "Default": "/mnt/user/appdata/paperless-ngx/data", "Mode": "rw", "Description": "Container Path: /usr/src/paperless/data . \r\nThis contains the paperless database. Should be in appdata.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "media": {"value": "", "Name": "Media", "Target": "/usr/src/paperless/media", "Default": "", "Mode": "rw", "Description": "Container Path: /usr/src/paperless/media . \r\nThis is where your consumed documents and thumbnails are stored.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "consumption": {"value": "", "Name": "Consumption", "Target": "/usr/src/paperless/consume", "Default": "", "Mode": "rw", "Description": "Container Path: /usr/src/paperless/consume . \r\nFiles placed here will be consumed by paperless.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "export": {"value": "", "Name": "Export", "Target": "/usr/src/paperless/export", "Default": "", "Mode": "rw", "Description": "Container Path: /usr/src/paperless/export . \r\nLocation for files used by the exporter utility.\r\nSee https://paperless-ngx.readthedocs.io/en/latest/administration.html#document-exporter", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"port": {"value": "", "Name": "Port", "Target": "8000", "Default": "8000", "Mode": "tcp", "Description": "Container Port: 8000", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "tuyagateway": {"Name": "tuyagateway", "Repository": "tradeface/tuyagateway", "Registry": "https://registry.hub.docker.com/r/tradeface/tuyagateway/", "Branch": [{"Tag": "latest", "TagDescription": "Latest stable release of TuyaGateway."}, {"Tag": "beta", "TagDescription": "Latest beta release of TuyaGateway. Use with caution!"}], "Network": "host", "Privileged": "false", "Overview": "This is the official TuyaGateway 2.0 Docker", "Icon": "https://raw.githubusercontent.com/selfhosters/unRAID-CA-templates/master/templates/img/tuyagateway.png", "RepoShort": "Selfhosters", "CategoryList": ["Tools-Utilities", "HomeAutomation", "Other"], "Sources": ["https://github.com/TradeFace/tuyagateway", "https://registry.hub.docker.com/r/tradeface/tuyagateway/"], "Keywords": ["tuyagateway", ["Tools-Utilities", "HomeAutomation", "Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"mqtthost": {"value": "", "Name": "MQTT Host", "Target": "MQTTHOST", "Default": "127.0.0.1", "Mode": "", "Description": "MQTT Host IP", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mqttport": {"value": "", "Name": "MQTT Port", "Target": "MQTTPORT", "Default": "1883", "Mode": "", "Description": "MQTT Host Port", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mqttuser": {"value": "", "Name": "MQTT User", "Target": "MQTTUSER", "Default": "user", "Mode": "", "Description": "MQTT Username", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "mqttpass": {"value": "", "Name": "MQTT Pass", "Target": "MQTTPASS", "Default": "password", "Mode": "", "Description": "MQTT Password", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"config": {"value": "", "Name": "Config", "Target": "/usr/src/app/etc", "Default": "/mnt/user/appdata/tuyagateway", "Mode": "rw", "Description": "Container Path: /usr/src/app/etc", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {}}}, "xteve_dnsforge": {"Name": "xteve_dnsforge", "Repository": "dnsforge/xteve", "Registry": "https://hub.docker.com/r/dnsforge/xteve", "Network": "host", "Privileged": "false", "Overview": "xTeVe is a M3U proxy server for Plex, Emby and any client and provider which supports the .TS and .M3U8 (HLS) streaming formats.\r\n", "WebUI": "http://[IP]:[PORT:34400]/web/", "Icon": "https://avatars0.githubusercontent.com/u/53275662?s=460&amp;v=4", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Downloaders", "MediaServer-Video", "Network-Proxy"], "Sources": ["https://hub.docker.com/r/dnsforge/xteve"], "Keywords": ["xteve_dnsforge", ["Downloaders", "MediaServer-Video", "Network-Proxy"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"timezone": {"value": "Europe/London", "Name": "Timezone", "Target": "TZ", "Default": "", "Mode": "", "Description": "Container Variable: TZ", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "xteve_port": {"value": "34400", "Name": "XTEVE_PORT", "Target": "XTEVE_PORT", "Default": "", "Mode": "", "Description": "Container Variable: XTEVE_PORT", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "xteve_branch": {"value": "master", "Name": "XTEVE_BRANCH", "Target": "XTEVE_BRANCH", "Default": "", "Mode": "", "Description": "Container Variable: XTEVE_BRANCH", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "xteve_debug": {"value": "", "Name": "XTEVE_DEBUG", "Target": "XTEVE_DEBUG", "Default": "0", "Mode": "", "Description": "Container Variable: XTEVE_DEBUG", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "xteve_api": {"value": "1", "Name": "XTEVE_API", "Target": "XTEVE_API", "Default": "", "Mode": "", "Description": "Container Variable: XTEVE_API", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"xteve_conf": {"value": "/mnt/user/appdata/xteve/", "Name": "XTEVE_CONF", "Target": "/home/xteve/conf", "Default": "", "Mode": "rw", "Description": "Container Path: /home/xteve/conf", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "guide2go_conf": {"value": "/mnt/user/appdata/xteve/guide2go/", "Name": "GUIDE2GO_CONF", "Target": "/home/xteve/guide2go/conf", "Default": "", "Mode": "rw", "Description": "Container Path: /home/xteve/guide2go/conf", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "xteve_g2g_owi": {"Name": "xteve_g2g_owi", "Repository": "alturismo/xteve_g2g_owi", "Registry": "https://hub.docker.com/r/alturismo/xteve_g2g_owi", "Network": "host", "Privileged": "false", "Overview": "xteve, guide2go, owi2plex in one docker with cron\r\n", "WebUI": "http://[IP]:[PORT:34400]/web/", "Icon": "https://avatars0.githubusercontent.com/u/53275662?s=460&amp;v=4", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Downloaders", "Tools-Utilities"], "Sources": ["https://github.com/alturismo/xteve_g2g_owi/", "https://hub.docker.com/r/alturismo/xteve_g2g_owi"], "Keywords": ["xteve_g2g_owi", ["Downloaders", "Tools-Utilities"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "", "Name": "/config", "Target": "/config", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/xteve/_config/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "root-xteve": {"value": "/mnt/user/appdata/xteve/", "Name": "/root/.xteve", "Target": "/root/.xteve", "Default": "", "Mode": "rw", "Description": "Container Path: /root/.xteve", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "guide2go": {"value": "", "Name": "/guide2go", "Target": "/guide2go", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/xteve/_guide2go/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "owi2plex": {"value": "", "Name": "/owi2plex", "Target": "/owi2plex", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/xteve/_owi2plex/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "tmpxteve": {"value": "", "Name": "/tmp/xteve", "Target": "/tmp/xteve", "Default": "", "Mode": "rw", "Description": "/tmp/xteve", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "tvh": {"value": "", "Name": "/TVH", "Target": "/TVH", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/tvheadend/data/", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "xteve_guide2go": {"Name": "xteve_guide2go", "Repository": "alturismo/xteve_guide2go", "Registry": "https://hub.docker.com/r/alturismo/xteve_guide2go", "Network": "host", "Privileged": "false", "Overview": "xteve, guide2go in one docker with cron\r\n", "WebUI": "http://[IP]:[PORT:34400]/web/", "Icon": "https://avatars0.githubusercontent.com/u/53275662?s=460&amp;v=4", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Downloaders", "Network-Proxy"], "Sources": ["https://github.com/alturismo/xteve_guide2go", "https://hub.docker.com/r/alturismo/xteve_guide2go"], "Keywords": ["xteve_guide2go", ["Downloaders", "Network-Proxy"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "", "Name": "/config", "Target": "/config", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/xteve/_config/\r\nas suggestion as subfolder", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "xteve": {"value": "/mnt/user/appdata/xteve/", "Name": "/xteve", "Target": "/root/.xteve/", "Default": "", "Mode": "rw", "Description": "where all data will be, when changing startup options with custom location u have to adjust here too", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "guide2go": {"value": "/mnt/user/appdata/xteve/guide2go/", "Name": "/guide2go", "Target": "/guide2go", "Default": "", "Mode": "rw", "Description": "guide2go data and .json dir", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "tmp": {"value": "", "Name": "/tmp", "Target": "/tmp/xteve", "Default": "", "Mode": "rw", "Description": "/tmp/xteve/\r\nin case u want buffering etc in RAMDISK", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "tvh": {"value": "", "Name": "/TVH", "Target": "/TVH", "Default": "", "Mode": "rw", "Description": "/mnt/user/appdata/tvheadend/data/\r\nin case TVH move functions are enabled u need to mount this", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "nut-influxdb-exporter": {"Name": "nut-influxdb-exporter", "Repository": "maihai/nut-influxdb-exporter", "Registry": "https://hub.docker.com/r/maihai/nut-influxdb-exporter", "Network": "bridge", "Privileged": "false", "Overview": "Docker wrapper for a Python script to query NUT - Network UPS Tools via a Python script and then send the results to InfluxDB for storage.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/kiwimato/nut-influxdb-exporter/master/assets/nut.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/kiwimato/nut-influxdb-exporter", "https://hub.docker.com/r/maihai/nut-influxdb-exporter"], "Keywords": ["nut-influxdb-exporter", ["Tools-Utilities"]], "Requires": " Influxdb (autoadd) exporter app (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"hostname": {"value": "unraid-ups", "Name": "HOSTNAME", "Target": "HOSTNAME", "Default": "unraid", "Mode": "", "Description": "host you want the measurements to show up as in InfluxDB", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "watts": {"value": "1500", "Name": "WATTS", "Target": "WATTS", "Default": "", "Mode": "", "Description": "If your UPS doesn't have the nominal power metric then specify the rated watts so that the load percentage can be used to calculate the current watts", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "influxdb_host": {"value": "127.0.0.1", "Name": "INFLUXDB_HOST", "Target": "INFLUXDB_HOST", "Default": "localhost", "Mode": "", "Description": "IP address of influxdb", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "influxdb_port": {"value": "8086", "Name": "INFLUXDB_PORT", "Target": "INFLUXDB_PORT", "Default": "8086", "Mode": "", "Description": "Container Variable: INFLUXDB_PORT", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "influxdb_database": {"value": "nut", "Name": "INFLUXDB_DATABASE", "Target": "INFLUXDB_DATABASE", "Default": "nut", "Mode": "", "Description": "InfluxDB database name to store the values", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "influxdb_user": {"value": "", "Name": "INFLUXDB_USER", "Target": "INFLUXDB_USER", "Default": "", "Mode": "", "Description": "User name for Influxdb", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "influxdb_password": {"value": "", "Name": "INFLUXDB_PASSWORD", "Target": "INFLUXDB_PASSWORD", "Default": "", "Mode": "", "Description": "Password for Influxdb", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "nut_host": {"value": "127.0.0.1", "Name": "NUT_HOST", "Target": "NUT_HOST", "Default": "127.0.0.1", "Mode": "", "Description": "NUT hostname", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "nut_port": {"value": "", "Name": "NUT_PORT", "Target": "NUT_PORT", "Default": "", "Mode": "", "Description": "NUT Port", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "ups_name": {"value": "", "Name": "UPS_NAME", "Target": "UPS_NAME", "Default": "ups", "Mode": "", "Description": "NUT UPS name", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "nut_username": {"value": "", "Name": "NUT_USERNAME", "Target": "NUT_USERNAME", "Default": "", "Mode": "", "Description": "Username for NUT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "nut_password": {"value": "", "Name": "NUT_PASSWORD", "Target": "NUT_PASSWORD", "Default": "", "Mode": "", "Description": "Password for NUT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "debuggingoutput": {"value": "false", "Name": "Debugging Output", "Target": "VERBOSE", "Default": "false", "Mode": "", "Description": "Set this variable to true to see the output in the docker log.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {}}}, "coturn": {"Name": "coturn", "Repository": "instrumentisto/coturn", "Registry": "https://hub.docker.com/r/instrumentisto/coturn/", "Network": "host", "Privileged": "false", "Overview": "Coturn TURN Server is a VoIP media traffic NAT traversal server and gateway. It can be used as a general-purpose network traffic TURN server and gateway, too.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/xthursdayx/docker-templates/master/xthursdayx/images/webrtc-icon.png", "PostArgs": "-c /coturn/turnserver.conf", "Networking": {"Mode": "host"}, "CategoryList": ["Network-Voip"], "Sources": ["https://github.com/coturn/coturn", "https://hub.docker.com/r/instrumentisto/coturn/"], "Keywords": ["coturn", ["Network-Voip"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "/mnt/cache/appdata/coturn/turnserver.conf", "Name": "Config", "Target": "/coturn/turnserver.conf", "Default": "/mnt/cache/appdata/coturn/turnserver.conf", "Mode": "rw", "Description": "Container Path: /coturn/turnserver.conf", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "keys": {"value": "/mnt/cache/appdata/coturn/keys", "Name": "Keys", "Target": "/etc/ssl/", "Default": "/mnt/cache/appdata/coturn/keys", "Mode": "rw", "Description": "Container Path: /etc/ssl/", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"turnovertcp": {"value": "3478", "Name": "TURN over TCP", "Target": "3478", "Default": "3478", "Mode": "tcp", "Description": "Container Port: 3478", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "turnoverudp": {"value": "49152:65535", "Name": "TURN over UDP", "Target": "49152:65535", "Default": "49152:65535", "Mode": "udp", "Description": "Container Path: 49152:65535", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "turnovertcp-tls": {"value": "5349", "Name": "TURN over TCP - TLS", "Target": "5349", "Default": "5349", "Mode": "tcp", "Description": "Container Port: 5349", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "turnoverudp-tls": {"value": "5349", "Name": "TURN over UDP - TLS", "Target": "5349", "Default": "5349", "Mode": "udp", "Description": "Container Port: 5349", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "roonserver": {"Name": "roonserver", "Repository": "steefdebruijn/docker-roonserver", "Registry": "https://hub.docker.com/r/steefdebruijn/docker-roonserver/", "Network": "host", "Privileged": "false", "Overview": "Docker image for running Roon Server. Roon Server is a software package that provides a \u201cheadless\u201d version of Roon. It will be the brain of your music system, managing your music files, streaming services, and your audio devices. Roon Server is used in conjunction with Roon or Roon Remote, both of which provide control functionality.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/xthursdayx/docker-templates/master/xthursdayx/images/roon-icon.png", "ExtraParams": "--restart unless-stopped", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["MediaServer-Music"], "Sources": ["https://roonlabs.com/", "https://hub.docker.com/r/steefdebruijn/docker-roonserver/"], "Keywords": ["roonserver", ["MediaServer-Music"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "/mnt/cache/appdata/roonserver/app", "Name": "Config", "Target": "/app", "Default": "/mnt/cache/appdata/roonserver/app/", "Mode": "rw", "Description": "Container Path: /app", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "data": {"value": "/mnt/cache/appdata/roonserver/data", "Name": "Data", "Target": "/data", "Default": "/mnt/cache/appdata/roonserver/data/", "Mode": "rw", "Description": "Container Path: /data", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "music": {"value": "", "Name": "Music", "Target": "/music", "Default": "", "Mode": "rw", "Description": "Container Path: /music", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "backup": {"value": "", "Name": "Backup", "Target": "/backup", "Default": "", "Mode": "rw", "Description": "Container Path: /backup", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "macinabox": {"Name": "macinabox", "Repository": "spaceinvaderone/macinabox", "Registry": "https://hub.docker.com/r/spaceinvaderone/macinabox", "Network": "bridge", "Privileged": "true", "Overview": "Downloads and installs a macOS VM. Either Monterey, Big Sur, Catalina, Mojave or High Sierra. It will download the install media from Apple servers and convert it to a usable format for use for a VM. It can fully autoinstall a macOS VM on the server. Also it can prepare all files ready for a manual install if you prefer. Tools are also provided to fix the xml when the custom xml has been stripped out of the VM after its been edited by the Unraid VM manager.\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/SpaceinvaderOne/Docker-Templates-Unraid/master/spaceinvaderone/docker_icons/Macinabox.png", "PostArgs": "", "Requires": " Usercripts plugin\r<br> vm_custom_icons (0ptional for the correct icons for macOS)\r<br><br>", "MinVer": "6.7.0", "CategoryList": ["Tools-Utilities", "Other"], "Sources": ["https://github.com/SpaceinvaderOne/Macinabox", "https://hub.docker.com/r/spaceinvaderone/macinabox"], "Keywords": ["macinabox", ["Tools-Utilities", "Other"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"operatingsystemversion": {"value": "Big Sur", "Name": "Operating System Version", "Target": "flavour", "Default": "Big Sur|Monterey|Catalina|Mojave|High Sierra", "Mode": "", "Description": "Choose macOS version to install ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "installtype": {"value": "Auto install", "Name": "Install Type", "Target": "vminstall", "Default": "Auto install|Manual install", "Mode": "", "Description": "Auto install to install a vm directly into Unraid. Manual for advanced install", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "vdisksize": {"value": "100G", "Name": "Vdisk Size", "Target": "vdisksize", "Default": "", "Mode": "", "Description": "Enter desired vdisk size (only used by auto install - ignored by manual install)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "vdisktype": {"value": "raw", "Name": "Vdisk Type", "Target": "vdisktype", "Default": "raw|qcow2", "Mode": "", "Description": "Choose vdisk type  raw or qcow2  (qcow2 takes less space)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "opencorestockorcustom": {"value": "stock", "Name": "Opencore stock or custom", "Target": "opencore", "Default": "stock|custom", "Mode": "", "Description": "Choose from the built in Opencore in macinabox or choose a custom one (add in appdata/macinabox/custom_opencore)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "deleteandreplaceopencore": {"value": "no", "Name": "Delete and replace Opencore", "Target": "replaceopencore", "Default": "no|yes", "Mode": "", "Description": "Set to ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "overridedefualtnictype": {"value": "no", "Name": "Override defualt NIC type", "Target": "overridenic", "Default": "no|e1000-82545em|virtio|virtio-net|vmxnet3", "Mode": "", "Description": "Defualt is no\r\nChange to override the template defualt for the NIC", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "vmimageslocationagain!!!": {"value": "/mnt/user/domains/", "Name": "VM Images Location AGAIN !!!", "Target": "VMIMAGES", "Default": "/mnt/user/domains/", "Mode": "", "Description": "This must match the above VM Images Location (yes we need it twice!)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "isossharelocationagain!!!": {"value": "/mnt/user/isos/", "Name": "Isos Share Location AGAIN !!!", "Target": "ISOIMAGES", "Default": "/mnt/user/isos/", "Mode": "", "Description": "This must match the above Isos Share Location (yes we need it twice!)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "injectmacinaboxhelperscripts": {"value": "yes", "Name": "Inject Macinabox helper scripts", "Target": "injectfixxml", "Default": "yes|no", "Mode": "", "Description": "Injects macinabox helper userscript directly into userscripts plugin ", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"vmimageslocation": {"value": "/mnt/user/domains/", "Name": "VM Images Location", "Target": "/domains", "Default": "/mnt/user/domains/", "Mode": "rw", "Description": "Select where your vm images are stored on the server - defualt location is /mnt/user/domains/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "isossharelocation": {"value": "/mnt/user/isos/", "Name": "Isos Share Location", "Target": "/isos", "Default": "/mnt/user/isos/", "Mode": "rw", "Description": "Your isos share path - macOS install media will be put here.  defualt location is  /mnt/user/isos/", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "appdata": {"value": "/mnt/user/appdata/macinabox", "Name": "appdata", "Target": "/config", "Default": "/mnt/user/appdata/macinabox", "Mode": "rw", "Description": "Appdata location. If you change this you will need to do the same in the macinabox help user script", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "customovmflocation": {"value": "/mnt/user/system/custom_ovmf/", "Name": "custom ovmf location", "Target": "/customovmf/", "Default": "/mnt/user/system/custom_ovmf/", "Mode": "rw", "Description": "Dont change", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "userscriptslocation": {"value": "/boot/config/plugins/user.scripts/scripts", "Name": "Userscripts Location", "Target": "/userscripts", "Default": "/boot/config/plugins/user.scripts/scripts", "Mode": "rw", "Description": "Dont change this!", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Port": {}}}, "flexconnect": {"Name": "flexconnect", "Repository": "digitalhigh/flexconnect", "Registry": "https://hub.docker.com/r/digitalhigh/flexconnect", "Network": "host", "Privileged": "false", "Overview": "FlexConnect is a stand-alone version of the FlexTV Plugin. It is intended as a replacement once Plex sunsest the plugin feature. This is currently for development purposes only.", "WebUI": "http://[IP]:[PORT:5667]", "Icon": "https://github.com/d8ahazard/Phlex/raw/master/img/android-icon-144x144.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Tools"], "Sources": ["https://github.com/d8ahazard/FlexConnect", "https://hub.docker.com/r/digitalhigh/flexconnect"], "Keywords": ["flexconnect", ["Tools"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"hostpath2": {"value": "", "Name": "Host Path 2", "Target": "/plex", "Default": "", "Mode": "ro", "Description": "Container Path: /plex", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "appdataconfigpath": {"value": "/mnt/user/appdata/FlexConnect", "Name": "AppData Config Path", "Target": "/config", "Default": "/mnt/user/appdata/FlexConnect", "Mode": "rw", "Description": "Container Path: /config", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {}}}, "glimmr": {"Name": "glimmr", "Overview": "Glimmr synchronizes your Hue Lights, nanoleaf panels, and lifx bulbs with a DreamScreen controller.", "Registry": "https://registry.hub.docker.com/r/digitalhigh/glimmr", "GitHub": "https://github.com/d8ahazard/unraid-repository", "Repository": "digitalhigh/glimmr", "BindTime": "true", "Network": "host", "Privileged": "false", "Networking": {"Mode": "bridge"}, "WebUI": "http://[IP]:[PORT:80]", "Icon": "https://github.com/d8ahazard/unraid-repository/blob/master/img/glimmr_icon.png?raw=true", "CategoryList": ["Tools"], "Sources": ["https://github.com/d8ahazard/glimmr", "https://registry.hub.docker.com/r/digitalhigh/glimmr"], "Keywords": ["glimmr", ["Tools"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"userdatalocation": {"value": "/mnt/user/appdata/glimmr/", "Name": "UserData Location", "Target": "/etc/glimmr", "Default": "", "Mode": "rw", "Description": "Where to store HueData config.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "80", "Type": "Port", "Name": "Web UI", "Target": "80", "Default": "80", "Mode": "tcp", "Description": "Web UI port.", "Display": "always", "Required": "true"}, "huessdpdiscovery": {"value": "1900", "Type": "Port", "Name": "Hue SSDP Discovery", "Target": "1900", "Default": "1900", "Mode": "udp", "Description": "Hue Bridge discovery port.", "Display": "always", "Required": "true"}, "huenanoleafmdnsdiscovery": {"value": "5353", "Type": "Port", "Name": "Hue/Nanoleaf MDNS Discovery", "Target": "5353", "Default": "5353", "Mode": "udp", "Description": "MDNS Discovery Port", "Display": "always", "Required": "true"}, "huestreaming": {"value": "2100", "Type": "Port", "Name": "Hue Streaming", "Target": "2100", "Default": "2100", "Mode": "udp", "Description": "Hue Bridge streaming port.", "Display": "always", "Required": "true"}, "dreamscreencommunication": {"value": "8888", "Type": "Port", "Name": "DreamScreen Communication", "Target": "8888", "Default": "8888", "Mode": "udp", "Description": "DreamScreen emulation port.", "Display": "always", "Required": "true"}, "nanoleafcommunication": {"value": "60222", "Type": "Port", "Name": "NanoLeaf Communication", "Target": "60222", "Default": "60222", "Mode": "udp", "Description": "DreamScreen emulation port.", "Display": "always", "Required": "true"}, "lifxcommunication": {"value": "56700", "Type": "Port", "Name": "Lifx Communication", "Target": "56700", "Default": "56700", "Mode": "udp", "Description": "Port used for Lifx communication.", "Display": "always", "Required": "true"}}}}, "moodle": {"Name": "moodle", "Repository": "bitnami/moodle", "Registry": "https://hub.docker.com/r/bitnami/moodle/", "Network": "bridge", "Privileged": "false", "Overview": "Moodle is a very popular open source learning management solution (LMS) for the delivery of elearning courses and programs.", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/A75G/docker-templates/master/templates/icons/moodle.png", "Requires": "MariaDB / MySQL installed", "CategoryList": ["Productivity", "Network-Web"], "Sources": ["https://moodle.org", "https://hub.docker.com/r/bitnami/moodle/"], "Keywords": ["moodle", ["Productivity", "Network-Web"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"mariadbhostnameorip": {"value": "mariadb", "Name": "MariaDB Hostname or IP", "Target": "MOODLE_DATABASE_HOST", "Default": "mariadb", "Mode": "", "Description": "MariaDB Hostname or IP", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mariadbdatabaseport": {"value": "3306", "Name": "MariaDB Database Port", "Target": "MOODLE_DATABASE_PORT_NUMBER", "Default": "3306", "Mode": "", "Description": "MariaDB Database Port", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasename": {"value": "bitnami_moodle", "Name": "Database Name", "Target": "MOODLE_DATABASE_NAME", "Default": "bitnami_moodle", "Mode": "", "Description": "Database Name", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseuser": {"value": "bn_moodle", "Name": "Database User", "Target": "MOODLE_DATABASE_USER", "Default": "bn_moodle", "Mode": "", "Description": "Database User", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasepassword": {"value": "", "Name": "Database Password", "Target": "MOODLE_DATABASE_PASSWORD", "Default": "", "Mode": "", "Description": "Database Password", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "moodleusername": {"value": "user", "Name": "Moodle Username", "Target": "MOODLE_USERNAME", "Default": "user", "Mode": "", "Description": "Default Moodle Username", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "moodlepassword": {"value": "bitnami", "Name": "Moodle Password", "Target": "MOODLE_PASSWORD", "Default": "bitnami", "Mode": "", "Description": "Default Moodle Password", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "php_memory_limit": {"value": "256M", "Name": "PHP_MEMORY_LIMIT", "Target": "PHP_MEMORY_LIMIT", "Default": "256M", "Mode": "", "Description": "PHP_MEMORY_LIMIT", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "smtp_host": {"value": "", "Name": "SMTP_HOST", "Target": "SMTP_HOST", "Default": "", "Mode": "", "Description": "SMTP host", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "smtp_port": {"value": "", "Name": "SMTP_PORT", "Target": "SMTP_PORT", "Default": "", "Mode": "", "Description": "SMTP port", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "smtp_user": {"value": "", "Name": "SMTP_USER", "Target": "SMTP_USER", "Default": "", "Mode": "", "Description": "SMTP account user", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "smtp_password": {"value": "", "Name": "SMTP_PASSWORD", "Target": "SMTP_PASSWORD", "Default": "", "Mode": "", "Description": "SMTP account password", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "smtp_protocol": {"value": "", "Name": "SMTP_PROTOCOL", "Target": "SMTP_PROTOCOL", "Default": "", "Mode": "", "Description": "SMTP protocol", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "allow_empty_password": {"value": "no", "Name": "ALLOW_EMPTY_PASSWORD", "Target": "ALLOW_EMPTY_PASSWORD", "Default": "no|yes", "Mode": "", "Description": "It can be used to allow blank passwords.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"moodlepath": {"value": "/mnt/user/appdata/moodle/", "Name": "MoodlePath", "Target": "/bitnami/moodle", "Default": "/mnt/user/appdata/moodle/", "Mode": "rw", "Description": "MoodlePath", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "moodledata": {"value": "/mnt/user/appdata/moodle/data/", "Name": "Moodledata", "Target": "/bitnami/moodledata", "Default": "/mnt/user/appdata/moodle/data/", "Mode": "rw", "Description": "Moodledata", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"http": {"value": "8080", "Name": "HTTP", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "HTTP", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "https": {"value": "8443", "Name": "HTTPs", "Target": "8443", "Default": "8443", "Mode": "tcp", "Description": "HTTPs (Not needed if you use reverse proxy)", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "ersatztv": {"Beta": "true", "Name": "ersatztv", "Repository": "jasongdove/ersatztv", "Registry": "https://hub.docker.com/r/jasongdove/ersatztv", "Branch": [{"Tag": "latest", "TagDescription": "latest release"}, {"Tag": "latest-vaapi", "TagDescription": "latest release + vaapi"}, {"Tag": "latest-nvidia", "TagDescription": "latest release + nvidia"}, {"Tag": "develop-vaapi", "TagDescription": "develop release + vaapi"}, {"Tag": "develop-nvidia", "TagDescription": "develop release + nvidia"}], "Privileged": "false", "Icon": "https://raw.githubusercontent.com/RandomNinjaAtk/unraid-templates/master/randomninjaatk/img/ersatztv.png", "Overview": "Stream custom live channels using your own media.\n", "WebUI": "http://[IP]:[PORT:8409]", "PostArgs": "", "Network": "host", "CategoryList": ["MediaApp-Video"], "Sources": ["https://github.com/jasongdove/ErsatzTV", "https://hub.docker.com/r/jasongdove/ersatztv"], "Keywords": ["ersatztv", ["MediaApp-Video"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"nvidiavisibledevices": {"value": "", "Name": "Nvidia Visible Devices", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "", "Mode": "", "Description": "Nvidia Visible Devices (Optional - Requires Nvidia GPU and Unraid Nvidia build)", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"hostpathforroot-localshareersatztv": {"value": "", "Name": "Host Path for /root/.local/share/ersatztv", "Target": "/root/.local/share/ersatztv", "Default": "/mnt/user/appdata/ErsatzTV", "Mode": "rw", "Description": "Container Path: /root/.local/share/ersatztv", "Type": "Path", "Display": "always-hide", "Required": "true", "Mask": "false"}}, "Port": {"hostportfor8409": {"value": "", "Name": "Host Port for 8409", "Target": "8409", "Default": "8409", "Mode": "tcp", "Description": "Container Port: 8409", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "netdata-glibc": {"Name": "netdata-glibc", "Repository": "d34dc3n73r/netdata-glibc", "Registry": "https://hub.docker.com/r/d34dc3n73r/netdata-glibc", "Network": "bridge", "Privileged": "false", "Overview": "[b]Netdata with Nvidia GPU monitoring in a container.[/b] An automated build of netdata with glibc for use with Nvidia GPUs.[br] [b][u][span style='color: #E80000;']NOTE:[/span][/u][/b] An Nvidia GPU and the Unraid Nvidia Plugin are required to use this image. If you wish to use it without a gpu, (eg need glibc for another reason) turn on Advanced View and remove '--runtime=nvidia' from Extra Parameters, and remove NVIDIA_VISIBLE_DEVICES or set it to 'void'.", "WebUI": "http://[IP]:[PORT:19999]", "Icon": "https://raw.githubusercontent.com/netdata/netdata/master/web/gui/dashboard/images/ms-icon-310x310.png", "ExtraParams": "--runtime=nvidia --cap-add SYS_PTRACE --security-opt apparmor=unconfined", "Branch": [{"Tag": "latest", "TagDescription": "Automated build based on netdata/netdata:latest"}, {"Tag": "stable", "TagDescription": "Built using netdata/netdata:stable"}, {"Tag": "v1.33.1", "TagDescription": "Built using netdata/netdata:v1.33.1"}, {"Tag": "v1.32.1", "TagDescription": "Built using netdata/netdata:v1.32.1"}], "Requires": "nVidia Unraid plugin and an nVidia GPU", "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/D34DC3N73R/netdata-glibc", "https://hub.docker.com/r/d34dc3n73r/netdata-glibc"], "Keywords": ["netdata-glibc", ["Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"anonymousstatistics": {"value": "", "Name": "Anonymous Statistics", "Target": "DO_NOT_TRACK", "Default": "", "Mode": "", "Description": "Set to 1 to disable anonymous statistics.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "dockerpgid": {"value": "281", "Name": "Docker PGID", "Target": "PGID", "Default": "281", "Mode": "", "Description": "Host docker user gid. Required for container name resolution.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "nvidia_visible_devices": {"value": "all", "Name": "NVIDIA_VISIBLE_DEVICES", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "all", "Mode": "", "Description": "Valid options: 0,1,2, GPU-fef8089b, all, none, void", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"netdataoverride": {"value": "/mnt/user/appdata/netdata/override", "Name": "Netdata Override", "Target": "/etc/netdata", "Default": "/mnt/user/appdata/netdata/override", "Mode": "rw", "Description": "Container Path: /etc/netdata", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "hostproc": {"value": "/proc", "Name": "Host /proc", "Target": "/host/proc", "Default": "/proc", "Mode": "ro", "Description": "Container Path: /host/proc", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "hostsys": {"value": "/sys", "Name": "Host /sys", "Target": "/host/sys", "Default": "/sys", "Mode": "ro", "Description": "Container Path: /host/sys", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}, "doker-sock": {"value": "/var/run/docker.sock", "Name": "doker.sock", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "ro", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Port": {"netdatawebuiport": {"value": "19999", "Name": "Netdata Web UI Port", "Target": "19999", "Default": "19999", "Mode": "tcp", "Description": "Netdata Web UI Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "projectzomboidreporter-api": {"Name": "projectzomboidreporter-api", "Repository": "chrisashtear/zomboid-reporter-backend", "Registry": "https://hub.docker.com/r/chrisashtear/zomboid-reporter-backend/", "Network": "bridge", "Privileged": "false", "Overview": "This api is used to access your project zomboid data stored in sql to pass to the main reporter.\r\n", "WebUI": "http://[IP]:[PORT:3001]/", "Icon": "https://github.com/natcoso9955/unRAID-docker/raw/master/icons/projectzomboid-api.png", "ExtraParams": "--restart=always", "PostArgs": "", "Requires": "MySQL", "Networking": {"Mode": "bridge"}, "CategoryList": ["GameServers"], "Sources": ["https://github.com/ChrisAshtear/Zomboid-Server-Stats-Reporter/", "https://hub.docker.com/r/chrisashtear/zomboid-reporter-backend/"], "Keywords": ["projectzomboidreporter-api", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sql_host": {"value": "192.168.1.129", "Name": "SQL_HOST", "Target": "SQL_HOST", "Default": "", "Mode": "", "Description": "Container Variable: SQL_HOST", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_database": {"value": "Zombo", "Name": "SQL_DATABASE", "Target": "SQL_DATABASE", "Default": "", "Mode": "", "Description": "Container Variable: SQL_DATABASE", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_user": {"value": "SQL_USER", "Name": "SQL_USER", "Target": "SQL_USER", "Default": "", "Mode": "", "Description": "Container Variable: SQL_USER", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_pass": {"value": "SQL_PASS", "Name": "SQL_PASS", "Target": "SQL_PASS", "Default": "", "Mode": "", "Description": "Container Variable: SQL_PASSWORD", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "sql_port": {"value": "3307", "Name": "SQL_PORT", "Target": "SQL_PORT", "Default": "", "Mode": "", "Description": "Container Variable: SQL_PORT", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"index-js_fix": {"value": "/mnt/user/appdata/zb-reporter-backend/index.js", "Name": "index.js_fix", "Target": "/usr/src/app/index.js", "Default": "/mnt/user/appdata/ProjectZomboidReporter/index.js", "Mode": "ro", "Description": "Container Path: /usr/src/app/index.js", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"apiport": {"value": "3001", "Name": "API port", "Target": "3001", "Default": "3001", "Mode": "tcp", "Description": "Container Port: 3001", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "projectzomboidreporter-ingester": {"Name": "projectzomboidreporter-ingester", "Repository": "chrisashtear/zomboid-reporter", "Registry": "https://hub.docker.com/r/chrisashtear/zomboid-reporter/", "Network": "bridge", "Privileged": "false", "Overview": "This is the ingester which grabs statiscs from your Project Zomboid server files and uploads them to the SQL database for the API to access.\r\n", "WebUI": "", "Icon": "https://github.com/natcoso9955/unRAID-docker/raw/master/icons/projectzomboid-ingest.png", "ExtraParams": "--restart=always", "PostArgs": "", "Requires": "Project Zomboid", "Networking": {"Mode": "bridge"}, "CategoryList": ["GameServers"], "Sources": ["https://github.com/ChrisAshtear/Zomboid-Server-Stats-Reporter/", "https://hub.docker.com/r/chrisashtear/zomboid-reporter/"], "Keywords": ["projectzomboidreporter-ingester", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"zomboid_server_name": {"value": "Iopy_Server", "Name": "ZOMBOID_SERVER_NAME", "Target": "ZOMBOID_SERVER_NAME", "Default": "servertest", "Mode": "", "Description": "Container Variable: ZOMBOID_SERVER_NAME", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_host": {"value": "", "Name": "SQL_HOST", "Target": "SQL_HOST", "Default": "serverip:port", "Mode": "", "Description": "Container Variable: SQL_HOST", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_database": {"value": "Zombo", "Name": " SQL_DATABASE", "Target": " SQL_DATABASE", "Default": "Zombo", "Mode": "", "Description": "Container Variable:  SQL_DATABASE", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_user": {"value": "SQL_USER", "Name": "SQL_USER", "Target": "SQL_USER", "Default": "", "Mode": "", "Description": "Container Variable: SQL_USER", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "sql_pass": {"value": "SQL_PASS", "Name": "SQL_PASS", "Target": "SQL_PASS", "Default": "", "Mode": "", "Description": "Container Variable: SQL_PASSWORD", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"projectzomboidserverfiles": {"value": "/mnt/user/appdata/ProjectZomboid/Zomboid/", "Name": "Project Zomboid Server Files", "Target": "/var/www/html/sv", "Default": "/mnt/user/appdata/ProjectZomboid/Zomboid/", "Mode": "ro", "Description": "Container Path: /var/www/html/sv", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "projectzomboidreporter-web": {"Name": "projectzomboidreporter-web", "Repository": "chrisashtear/zomboid-reporter-nginx", "Registry": "https://hub.docker.com/r/chrisashtear/zomboid-reporter-nginx/", "Network": "bridge", "Privileged": "true", "Overview": "This is an nginx server with a custom conf applied. It will grab combined API calls to the api endpoint, and also components from the frontend template.\r\n", "WebUI": "http://[IP]:[PORT:80]/", "Icon": "https://github.com/natcoso9955/unRAID-docker/raw/master/icons/projectzomboid-web.png", "ExtraParams": "--restart=always", "PostArgs": "", "Requires": "ProjectZomboidReporter-API<br>  ProjectZomboidReporter-Frontend", "Networking": {"Mode": "bridge"}, "CategoryList": ["GameServers"], "Sources": ["https://github.com/ChrisAshtear/Zomboid-Server-Stats-Reporter/", "https://hub.docker.com/r/chrisashtear/zomboid-reporter-nginx/"], "Keywords": ["projectzomboidreporter-web", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"conf": {"value": "/mnt/user/appdata/ProjectZomboidReporter-nginx", "Name": "conf", "Target": "/etc/nginx/conf.d", "Default": "/mnt/user/appdata/ProjectZomboidReporter-nginx", "Mode": "ro", "Description": "Container Path: /etc/nginx/conf.d", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "3050", "Name": "webUI", "Target": "80", "Default": "3050", "Mode": "tcp", "Description": "Container Port: 3050", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "gluster-server": {"Name": "gluster-server", "Repository": "testdasi/gluster-server", "Registry": "https://registry.hub.docker.com/r/testdasi/gluster-server/", "Network": "host", "Privileged": "true", "Overview": "A docker running gluster server. This allows me to use a folder in the Unraid cache pool as persistent storage for Kubernetes / Docker Swarm through glusterfs. It works way better than NFS, especially for high-availability applications.\r\n", "WebUI": "", "Icon": "https://github.com/testdasi/gluster-server/raw/main/gluster.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Drivers", "Tools-Utilities", "Other", "Network-Other"], "Sources": ["https://github.com/testdasi/gluster-server", "https://registry.hub.docker.com/r/testdasi/gluster-server/"], "Keywords": ["gluster-server", ["Drivers", "Tools-Utilities", "Other", "Network-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"brick_port_range": {"value": "49152-49162", "Name": "BRICK_PORT_RANGE", "Target": "BRICK_PORT_RANGE", "Default": "49152-49162", "Mode": "", "Description": "Container Variable: BRICK_PORT_RANGE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"metadata": {"value": "/mnt/user/appdata/gluster-server/metadata", "Name": "Metadata", "Target": "/var/lib/glusterd", "Default": "/mnt/user/appdata/gluster-server/metadata", "Mode": "rw", "Description": "Container Path: /var/lib/glusterd", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "config": {"value": "/mnt/user/appdata/gluster-server/config", "Name": "Config", "Target": "/etc/glusterfs", "Default": "/mnt/user/appdata/gluster-server/config", "Mode": "rw", "Description": "Container Path: /etc/glusterfs", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "log": {"value": "/mnt/user/appdata/gluster-server/log", "Name": "Log", "Target": "/var/log/glusterfs", "Default": "/mnt/user/appdata/gluster-server/log", "Mode": "rw", "Description": "Container Path: /var/log/glusterfs", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "data": {"value": "/mnt/user/appdata/gluster-server/data", "Name": "Data", "Target": "/gluster", "Default": "/mnt/user/appdata/gluster-server/data", "Mode": "rw", "Description": "Container Path: /gluster", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "hostfile(removeifnotrequired)": {"value": "/mnt/user/appdata/gluster-server/hosts", "Name": "Host file (remove if not required)", "Target": "/etc/hosts", "Default": "/mnt/user/appdata/gluster-server/hosts", "Mode": "rw", "Description": "Container Path: /etc/hosts", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "grafana-unraid-stack": {"Name": "grafana-unraid-stack", "Repository": "testdasi/grafana-unraid-stack", "Registry": "https://registry.hub.docker.com/r/testdasi/grafana-unraid-stack/", "Network": "host", "Privileged": "true", "Overview": "Meet Gus! He has everything you need to start monitoring Unraid in style (Grafana - Influxdb - Telegraf - Loki - Promtail).\r\n", "WebUI": "http://[IP]:[PORT:3006]/", "Icon": "https://raw.githubusercontent.com/testdasi/grafana-unraid-stack-base/master/grafana-unraid-stack.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Productivity", "Tools-Utilities", "Other"], "Sources": ["https://github.com/testdasi/grafana-unraid-stack", "https://registry.hub.docker.com/r/testdasi/grafana-unraid-stack/"], "Keywords": ["grafana-unraid-stack", ["Productivity", "Tools-Utilities", "Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"use_hddtemp": {"value": "no", "Name": "USE_HDDTEMP", "Target": "USE_HDDTEMP", "Default": "yes|no", "Mode": "", "Description": "Container Variable: USE_HDDTEMP", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "influxdb_http_port": {"value": "8086", "Name": "INFLUXDB_HTTP_PORT", "Target": "INFLUXDB_HTTP_PORT", "Default": "8086", "Mode": "", "Description": "Container Variable: INFLUXDB_HTTP_PORT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "loki_port": {"value": "3100", "Name": "LOKI_PORT", "Target": "LOKI_PORT", "Default": "3100", "Mode": "", "Description": "Container Variable: LOKI_PORT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "promtail_port": {"value": "9086", "Name": "PROMTAIL_PORT", "Target": "PROMTAIL_PORT", "Default": "9086", "Mode": "", "Description": "Container Variable: PROMTAIL_PORT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "grafana_port": {"value": "3006", "Name": "GRAFANA_PORT", "Target": "GRAFANA_PORT", "Default": "3006", "Mode": "", "Description": "Container Variable: GRAFANA_PORT", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "host_etc": {"value": "/rootfs/etc", "Name": "HOST_ETC", "Target": "HOST_ETC", "Default": "/rootfs/etc", "Mode": "", "Description": "Container Variable: HOST_ETC", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "host_proc": {"value": "/rootfs/proc", "Name": "HOST_PROC", "Target": "HOST_PROC", "Default": "/rootfs/proc", "Mode": "", "Description": "Container Variable: HOST_PROC", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "host_sys": {"value": "/rootfs/sys", "Name": "HOST_SYS", "Target": "HOST_SYS", "Default": "/rootfs/sys", "Mode": "", "Description": "Container Variable: HOST_SYS", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "host_mount_prefix": {"value": "/rootfs", "Name": "HOST_MOUNT_PREFIX", "Target": "HOST_MOUNT_PREFIX", "Default": "/rootfs", "Mode": "", "Description": "Container Variable: HOST_MOUNT_PREFIX", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"config": {"value": "/mnt/user/appdata/Grafana-Unraid-Stack/config", "Name": "Config", "Target": "/config", "Default": "/mnt/user/appdata/Grafana-Unraid-Stack/config", "Mode": "rw", "Description": "Container Path: /config", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "data(db)": {"value": "/mnt/user/appdata/Grafana-Unraid-Stack/data", "Name": "Data (db)", "Target": "/data", "Default": "/mnt/user/appdata/Grafana-Unraid-Stack/data", "Mode": "rw", "Description": "Container Path: /data", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "telegraf1": {"value": "/", "Name": "Telegraf 1", "Target": "/rootfs", "Default": "/", "Mode": "ro", "Description": "Container Path: /rootfs", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf2": {"value": "/etc", "Name": "Telegraf 2", "Target": "/rootfs/etc", "Default": "/etc", "Mode": "ro", "Description": "Container Path: /rootfs/etc", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf3": {"value": "/proc", "Name": "Telegraf 3", "Target": "/rootfs/proc", "Default": "/proc", "Mode": "ro", "Description": "Container Path: /rootfs/proc", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf4": {"value": "/sys", "Name": "Telegraf 4", "Target": "/rootfs/sys", "Default": "/sys", "Mode": "ro", "Description": "Container Path: /rootfs/sys", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf5": {"value": "/var/run/docker.sock", "Name": "Telegraf 5", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "ro", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf6": {"value": "/var/run/utmp", "Name": "Telegraf 6", "Target": "/var/run/utmp", "Default": "/var/run/utmp", "Mode": "ro", "Description": "Container Path: /var/run/utmp", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "telegraf7": {"value": "/run/udev", "Name": "Telegraf 7", "Target": "/run/udev", "Default": "/run/udev", "Mode": "ro", "Description": "Container Path: /run/udev", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Port": {}}}, "antennas": {"Name": "antennas", "Repository": "thejf/antennas", "Registry": "https://hub.docker.com/r/thejf/antennas/", "Network": "bridge", "Privileged": "false", "Overview": "HDHomeRun emulator for Plex/Jellyfin/Emby DVR to connect to Tvheadend.[br][br]\n", "Requires": "<br>&nbsp;&nbsp;&nbsp;&nbsp;To run this container, first create a config.yml on the config folder with the following lines (changing to the IPs, ports and tuner count of your system)<br>&nbsp;&nbsp;&nbsp;&nbsp;tvheadend_url: http://user:pas@X.X.X.X:9981<br>&nbsp;&nbsp;&nbsp;&nbsp;antennas_url: http://X.X.X.X:5004<br>&nbsp;&nbsp;&nbsp;&nbsp;tuner_count: 4 <br>  ", "WebUI": "http://[IP]:[PORT:5004]", "Icon": "https://raw.githubusercontent.com/yayitazale/unraid-templates/main/antennas.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities", "MediaApp-Other"], "Sources": ["https://github.com/TheJF/antennas", "https://hub.docker.com/r/thejf/antennas/"], "Keywords": ["antennas", ["Tools-Utilities", "MediaApp-Other"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "/mnt/user/appdata/antennas", "Name": "Config", "Target": "/antennas/config", "Default": "", "Mode": "rw", "Description": "Container Path: /antennas/config", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"port": {"value": "5004", "Name": "Port", "Target": "5004", "Default": "", "Mode": "tcp", "Description": "Container Port: 5004", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "deepstack-ui": {"Name": "deepstack-ui", "Repository": "robmarkcole/deepstack-ui", "Registry": "https://hub.docker.com/r/robmarkcole/deepstack-ui", "Network": "bridge", "Privileged": "false", "Overview": "UI for working with Deepstack. Allows uploading an image and performing object detection or face recognition with Deepstack. Also faces can be registered with Deepstack. The effect of various parameters can be explored, including filtering objects by confidence, type and location in the image. Created by robmarkcole.\r\n", "WebUI": "http://[IP]:[PORT:8501]", "Icon": "https://raw.githubusercontent.com/n8detar/docker-templates/master/n8detar/images/deepstack-ui.png", "PostArgs": "", "Requires": "Deepstack", "Networking": {"Mode": "bridge"}, "CategoryList": ["HomeAutomation", "Tools-Utilities", "Other"], "Sources": ["https://github.com/robmarkcole/deepstack-ui", "https://hub.docker.com/r/robmarkcole/deepstack-ui"], "Keywords": ["deepstack-ui", ["HomeAutomation", "Tools-Utilities", "Other"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"deepstackip": {"value": "localhost", "Name": "Deepstack IP", "Target": "DEEPSTACK_IP", "Default": "localhost", "Mode": "", "Description": "The IP address of your Deepstack instance. Default is localhost.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "deepstackport": {"value": "80", "Name": "Deepstack Port", "Target": "DEEPSTACK_PORT", "Default": "80", "Mode": "", "Description": "The PORT of your Deepstack instance. Default is 80. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "deepstackapikey": {"value": "", "Name": "Deepstack API Key", "Target": "DEEPSTACK_API_KEY", "Default": "", "Mode": "", "Description": "The API key of your Deepstack instance, if you have set one.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "deepstacktimeout": {"value": "10", "Name": "Deepstack Timeout", "Target": "DEEPSTACK_TIMEOUT", "Default": "10", "Mode": "", "Description": "The timeout to wait for Deepstack. Default is 10 seconds.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "deepstackcustommodel": {"value": "", "Name": "Deepstack Custom Model", "Target": "DEEPSTACK_CUSTOM_MODEL", "Default": "", "Mode": "", "Description": "The name of a custom model, if you wish to use one.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "deepstackuidebugmode": {"value": "False", "Name": "Deepstack UI Debug Mode", "Target": "DEEPSTACK_UI_DEBUG_MODE", "Default": "False|True", "Mode": "", "Description": "Lowers the minimum confidence threshold to 1%. Default is False.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webui": {"value": "8501", "Name": "WebUI", "Target": "8501", "Default": "8501", "Mode": "tcp", "Description": "For access to the Web UI. Default is 8501.", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "jfa-go": {"Name": "jfa-go", "Repository": "hrfee/jfa-go", "Registry": "https://hub.docker.com/r/hrfee/jfa-go/", "Network": "bridge", "Privileged": "false", "Overview": "jfa-go is a user management app for Jellyfin (and now Emby) that provides invite-based account creation as well as other features that make one's instance much easier to manage.\r\n", "WebUI": "http://[IP]:[PORT:8056]/", "Icon": "https://raw.githubusercontent.com/hrfee/jfa-go/main/images/jfa-go-icon.png", "PostArgs": "", "Requires": "Jellyfin or Emby", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/hrfee/jfa-go", "https://hub.docker.com/r/hrfee/jfa-go/"], "Keywords": ["jfa-go", ["Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"config": {"value": "/mnt/user/appdata/jfa-go", "Name": "Config", "Target": "/data", "Default": "/mnt/user/appdata/jfa-go", "Mode": "rw", "Description": "Path to wherever you want to store the config file and other data.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "jellfyfinconfigdirectory": {"value": "/mnt/user/appdata/jellyfin/", "Name": "Jellfyfin Config Directory", "Target": "/jf", "Default": "/mnt/user/appdata/jellyfin/", "Mode": "rw", "Description": "Path to Jellyfin config directory, ignore if using Emby.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "time": {"value": "/etc/localtime", "Name": "Time", "Target": "/etc/localtime", "Default": "/etc/localtime", "Mode": "ro", "Description": "", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"webui": {"value": "8056", "Name": "WebUI", "Target": "8056", "Default": "8056", "Mode": "tcp", "Description": "Port to use to access jfa-go webui.", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "scrypted": {"Name": "scrypted", "Repository": "koush/scrypted", "Registry": "https://hub.docker.com/r/koush/scrypted/", "Network": "host", "Privileged": "false", "Overview": "Scrypted Home Automation", "WebUI": "https://[IP]:[PORT:9443]/", "Icon": "https://raw.githubusercontent.com/PTRFRLL/unraid-templates/master/scrypted/icon.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["HomeAutomation"], "Sources": ["https://github.com/koush/scrypted", "https://hub.docker.com/r/koush/scrypted/"], "Keywords": ["scrypted", ["HomeAutomation"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"appdata": {"value": "/mnt/user/appdata/scrypted", "Name": "Appdata", "Target": "/server/volume", "Default": "", "Mode": "rw", "Description": "Container Path: /server/volume", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "9443", "Name": "WebUI", "Target": "9443", "Default": "9443", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "planka": {"Name": "planka", "Repository": "meltyshev/planka", "Registry": "https://hub.docker.com/r/meltyshev/planka/", "Network": "bridge", "Privileged": "false", "Requires": "Postgres database", "Overview": "A Trello-like kanban board built with React and Redux.\r", "WebUI": "http://[IP]:[PORT:1337]", "Icon": "https://raw.githubusercontent.com/C4ArtZ/Unraid-Templates/master/templates/icons/planka.png", "CategoryList": ["Productivity"], "Sources": ["https://github.com/plankanban/planka", "https://hub.docker.com/r/meltyshev/planka/"], "Keywords": ["planka", ["Productivity"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"baseurl": {"value": "", "Name": "Base url", "Target": "BASE_URL", "Default": "http://localhost:3000", "Mode": "", "Description": "Domain of you instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseurl": {"value": "", "Name": "Database url", "Target": "DATABASE_URL", "Default": "", "Mode": "", "Description": "Connection string postgresql://user:password@host/database", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "secretkey": {"value": "", "Name": "Secret key", "Target": "SECRET_KEY", "Default": "notsecretkey", "Mode": "", "Description": "change to a random string. use 'openssl rand -hex 64' to generate one", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {"useravatars": {"value": "", "Name": "User avatars", "Target": "/app/public/user-avatars", "Default": "/mnt/user/appdata/planka/user-avatars", "Mode": "rw", "Description": "Where user avatars will be stored", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "projektbackgroundimages": {"value": "", "Name": "Projekt background images", "Target": "/app/public/project-background-images", "Default": "/mnt/user/appdata/planka/projekt-background-images", "Mode": "rw", "Description": "Where background images of projects will be stored", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "attachments": {"value": "/mnt/user/appdata/planka/attachments", "Name": "Attachments", "Target": "/app/public/attachments", "Default": "/mnt/user/appdata/planka/attachments", "Mode": "rw", "Description": "Where attachments will be stored", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"webuiport": {"value": "", "Name": "WebUI port", "Target": "1337", "Default": "3000", "Mode": "tcp", "Description": "Container Port: 1337", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "pornvault": {"Name": "pornvault", "Repository": "leadwolf/porn-vault", "Registry": "https://hub.docker.com/r/leadwolf/porn-vault/", "Network": "bridge", "Privileged": "false", "Overview": "\ud83d\udc8b Manage your ever-growing porn collection. Using Vue &amp; GraphQL\r\n", "WebUI": "http://[IP]:[PORT:3000]", "Icon": "https://raw.githubusercontent.com/C4ArtZ/Unraid-Templates/master/templates/icons/porn-vault.png", "Requires": "ElasticSearch installed", "CAComment": "There are some complications in getting this app to work.  See <a href=https://forums.unraid.net/topic/102829-support-c4artz-templates/page/3/?tab=comments#comment-1070413 target=_blank>HERE</a> for more information.  This app *may* eventually be removed from CA due to this", "CategoryList": ["Cloud", "MediaApp-Video", "MediaApp-Photos"], "Sources": ["https://github.com/porn-vault/porn-vault", "https://hub.docker.com/r/leadwolf/porn-vault/"], "Keywords": ["pornvault", ["Cloud", "MediaApp-Video", "MediaApp-Photos"]], "Tag": "0.25.0-alpine", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"configdirectory": {"value": "", "Name": "Config directory", "Target": "/config", "Default": "/mnt/user/appdata/porn-vault", "Mode": "rw", "Description": "Directory for persistent files (config file, database, backups...)", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "imagesimportdirectory": {"value": "", "Name": "Images import directory", "Target": "/images", "Default": "", "Mode": "rw", "Description": "Images stored here will be shown in the WebUI under 'Images'", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "videosimportdirectory": {"value": "", "Name": "Videos import directory", "Target": "/videos", "Default": "", "Mode": "rw", "Description": "Videos stored here will be shown in the WebUI under 'Scenes'", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "uploadedimagesdirectory": {"value": "", "Name": "Uploaded images directory", "Target": "/config/library/images", "Default": "", "Mode": "rw", "Description": "Images added through the WebUI are stored here. By default this is inside the config directory", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webuiport": {"value": "", "Name": "WebUI port", "Target": "3000", "Default": "3000", "Mode": "tcp", "Description": "The port for the porn-vault webinterface", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "alpaca-to-influxdb": {"Name": "alpaca-to-influxdb", "Repository": "nixoninnes/alpaca-to-influxdb", "Registry": "https://hub.docker.com/r/nixoninnes/binance-to-influxdb", "Network": "bridge", "Privileged": "false", "Overview": "Alpaca to Influx is a container designed to be run on an [Unraid](https://www.unraid.net/) server via Docker. The purpose of the container is to simplify the ingestion of stock market data, provided by the [Alpaca API](https://alpaca.markets/), into your own [Influx database](https://www.influxdata.com/).  \r\n", "WebUI": "", "Icon": "", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Downloaders", "Tools-Utilities"], "Sources": ["https://hub.docker.com/r/nixoninnes/binance-to-influxdb"], "Keywords": ["alpaca-to-influxdb", ["Downloaders", "Tools-Utilities"]], "Requires": " Influxdb (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"alpacaapikeyid": {"value": "", "Name": "Alpaca API Key ID", "Target": "ALPACA_ID", "Default": "", "Mode": "", "Description": "Container Variable: ALPACA_ID", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "alpacaapikeysecret": {"value": "", "Name": "Alpaca API Key Secret", "Target": "ALPACA_KEY", "Default": "", "Mode": "", "Description": "Container Variable: ALPACA_KEY", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "influxdbtoken": {"value": "", "Name": "InfluxDB Token", "Target": "INFLUX_TOKEN", "Default": "", "Mode": "", "Description": "Container Variable: INFLUX_TOKEN", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"config": {"value": "/mnt/user/appdata/alpaca-to-influxdb", "Name": "Config", "Target": "/config", "Default": "/mnt/user/appdata/alpaca-to-influxdb", "Mode": "rw", "Description": "Container Path: /config", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "binance-to-influxdb": {"Name": "binance-to-influxdb", "Repository": "nixoninnes/binance-to-influxdb", "Registry": "https://registry.hub.docker.com/r/nixoninnes/binance-to-influxdb", "Network": "bridge", "Privileged": "false", "Overview": "Binance to Influx is a container designed to be run on an [Unraid](https://www.unraid.net/) server via Docker. The purpose of the container is to simplify the ingestion of cryptocurrency market data, provided by the [Binance API](https://binance.com/), into your own [Influx database](https://www.influxdata.com/).  \r\n", "WebUI": "", "Icon": "", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Downloaders", "Tools-Utilities"], "Sources": ["https://registry.hub.docker.com/r/nixoninnes/binance-to-influxdb"], "Keywords": ["binance-to-influxdb", ["Downloaders", "Tools-Utilities"]], "Requires": " Influxdb (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"influxdbtoken": {"value": "", "Name": "InfluxDB Token", "Target": "INFLUXDB_TOKEN", "Default": "", "Mode": "", "Description": "Influx database access token", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"config": {"value": "/mnt/user/appdata/binance-to-influxdb", "Name": "Config", "Target": "/config", "Default": "/mnt/user/appdata/binance-ingester", "Mode": "rw", "Description": "Container Path: /config", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "kibana": {"Name": "kibana", "Repository": "kibana", "Registry": "https://hub.docker.com/_/kibana/", "Network": "bridge", "Privileged": "false", "Overview": "Kibana gives shape to any kind of data \u2014 structured and unstructured \u2014 indexed in Elasticsearch.  \r\n", "WebUI": "http://[IP]:[PORT:5601]", "Icon": "https://raw.githubusercontent.com/cschanot/docker-templates/main/images/kibana.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "ElasticSearch installed", "Official": true, "CategoryList": ["Tools-Utilities", "Other"], "Sources": ["https://www.elastic.co/kibana", "https://hub.docker.com/_/kibana/"], "Keywords": ["kibana", ["Tools-Utilities", "Other"]], "Tag": "7.12.0", "Config": {"Device": {}, "Label": {}, "Variable": {"elasticsearch_hosts": {"value": "http://192.168.1.20:9200", "Name": "ELASTICSEARCH_HOSTS", "Target": "ELASTICSEARCH_HOSTS", "Default": "", "Mode": "", "Description": "Container Variable: ELASTICSEARCH_HOSTS", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webui": {"value": "5601", "Name": "Web UI", "Target": "5601", "Default": "", "Mode": "tcp", "Description": "Container Port: 5601", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "ntopng": {"Name": "ntopng", "Repository": "ntop/ntopng", "Registry": "https://hub.docker.com/r/ntop/ntopng/", "Network": "host", "Privileged": "false", "Overview": "High-Speed Web-based Traffic Analysis and Flow Collection \r\n", "WebUI": "http://[IP]:[PORT:3000]/", "Icon": "https://raw.githubusercontent.com/cschanot/docker-templates/main/images/ntopng-icon-150x150.png", "PostArgs": "-i eth0 --http-port 0.0.0.0:3000", "Networking": {"Mode": "host"}, "CategoryList": ["Security", "Network-Management"], "Sources": ["https://www.ntop.org/", "https://hub.docker.com/r/ntop/ntopng/"], "Keywords": ["ntopng", ["Security", "Network-Management"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "stable", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "chia": {"Name": "chia", "Repository": "ghcr.io/chia-network/chia", "Registry": "https://github.com/orgs/chia-network/packages/container/package/chia", "Network": "host", "Privileged": "false", "Overview": "This template uses the official Chia-Docker. Chia-Docker is a containerised version of the Chia Blockchain (no GUI) for HDD Farming. Helps turn your Unraid server into a XCH / cryptocurrency farming rig.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/PartitionPixel/unraid-templates/main/PartitionPixel/chia-icon.png", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Tools-Utilities", "Other", "Network-Web", "Network-Other", "Crypto"], "Sources": ["https://www.chia.net/", "https://github.com/orgs/chia-network/packages/container/package/chia"], "Keywords": ["chia", ["Tools-Utilities", "Other", "Network-Web", "Network-Other", "Crypto"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"mnemonic": {"value": "/root/.chia/mnemonic.txt", "Name": "mnemonic", "Target": "keys", "Default": "generate", "Mode": "", "Description": "Container Variable: keys", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "full_node_port": {"value": "", "Name": "full_node_port", "Target": "full_node_port", "Default": "", "Mode": "", "Description": "Container Variable: full_node_port", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "Container Variable: farmer_address", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "farmer_port": {"value": "", "Name": "farmer_port", "Target": "farmer_port", "Default": "", "Mode": "", "Description": "Container Variable: farmer_port", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "testnet": {"value": "false", "Name": "testnet", "Target": "testnet", "Default": "false", "Mode": "", "Description": "Container Variable: testnet", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "farmer_only": {"value": "false", "Name": "farmer_only", "Target": "farmer", "Default": "false", "Mode": "", "Description": "Container Variable: farmer", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "harvester_only": {"value": "false", "Name": "harvester_only", "Target": "harvester", "Default": "false", "Mode": "", "Description": "Container Variable: harvester", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"plots": {"value": "", "Name": "plots", "Target": "/plots", "Default": "", "Mode": "rw", "Description": "Container Path: /plots", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Container Path: /plotting", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "appdata": {"value": "/mnt/user/appdata/chia/", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/chia/", "Mode": "rw", "Description": "Container Path: /root/.chia", "Type": "Path", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Port": {"chia_protocol": {"value": "8444", "Name": "chia_protocol", "Target": "8444", "Default": "8444", "Mode": "tcp", "Description": "Container Port: ", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "chia_rpc": {"value": "8555", "Name": "chia_rpc", "Target": "8555", "Default": "8555", "Mode": "tcp", "Description": "Container Port: 8555", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}}}}, "machinaris": {"Name": "machinaris", "Repository": "ghcr.io/guydavis/machinaris", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris", "Network": "host", "Privileged": "false", "Overview": "Building upon the official Chia binaries, Machinaris also offers a plot manager, log monitor, and a simple WebUI for Unraid.", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/machinaris.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris"], "Keywords": ["machinaris", ["Crypto"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mnemonic": {"value": "/root/.chia/mnemonic.txt", "Name": "mnemonic", "Target": "keys", "Default": "/root/.chia/mnemonic.txt", "Mode": "", "Description": "Path to the mnemonic key used by Chia to run.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "auto_plot": {"value": "false", "Name": "auto_plot", "Target": "AUTO_PLOT", "Default": "false", "Mode": "", "Description": "When true, a Plotman plotting loop will be immediately launched on start of the container, applying your plotman.yaml settings.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container folders holding your completed plots.", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "blockchains": {"value": "chia", "Name": "blockchains", "Target": "blockchains", "Default": "chia", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'chia'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed Chia plots for farming.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"chia_protocol": {"value": "8444", "Name": "chia_protocol", "Target": "8444", "Default": "8444", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "8447", "Name": "farmer_port", "Target": "8447", "Default": "8447", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "web": {"value": "8926", "Name": "web", "Target": "8926", "Default": "8926", "Mode": "tcp", "Description": "Machinaris local web app port.", "Type": "Port", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "api": {"value": "8927", "Name": "api", "Target": "8927", "Default": "8927", "Mode": "tcp", "Description": "Machinaris local API port.", "Type": "Port", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}}}, "machinaris-btcgreen": {"Name": "machinaris-btcgreen", "Repository": "ghcr.io/guydavis/machinaris-btcgreen", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-btcgreen", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the BTCGreen blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/btcgreen.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-btcgreen"], "Keywords": ["machinaris-btcgreen", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8938", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "btcgreen", "Name": "blockchains", "Target": "blockchains", "Default": "btcgreen", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'btcgreen'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-btcgreen", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-btcgreen", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot btcgreenage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8938", "Name": "worker_port", "Target": "8938", "Default": "8938", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8938 for BTCGreen blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "9282", "Name": "protocol_port", "Target": "9282", "Default": "9282", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18655", "Name": "farmer_port", "Target": "18655", "Default": "18655", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-btcgreen-harvester": {"Name": "machinaris-btcgreen-harvester", "Repository": "ghcr.io/guydavis/machinaris-btcgreen", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-btcgreen-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/btcgreen.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-btcgreen-harvester"], "Keywords": ["machinaris-btcgreen-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the BTCgreen fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18655", "Name": "farmer_port", "Target": "farmer_port", "Default": "18655", "Mode": "", "Description": "The port of the BTCgreen fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8938", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "btcgreen", "Name": "blockchains", "Target": "blockchains", "Default": "btcgreen", "Mode": "", "Description": "Leave at 'btcgreen'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-btcgreen", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-btcgreen", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8938", "Name": "worker_port", "Target": "8938", "Default": "8938", "Mode": "tcp", "Description": "Leave at 8938 for BTCgreen", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-cactus": {"Name": "machinaris-cactus", "Repository": "ghcr.io/guydavis/machinaris-cactus", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-cactus", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Cactus blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/cactus.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-cactus"], "Keywords": ["machinaris-cactus", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8936", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "cactus", "Name": "blockchains", "Target": "blockchains", "Default": "cactus", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'cactus'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-cactus", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-cactus", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8936", "Name": "worker_port", "Target": "8936", "Default": "8936", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8936 for Cactus blockchain.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "11444", "Name": "protocol_port", "Target": "11444", "Default": "11444", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "11447", "Name": "farmer_port", "Target": "11447", "Default": "11447", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-cactus-harvester": {"Name": "machinaris-cactus-harvester", "Repository": "ghcr.io/guydavis/machinaris-cactus", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-cactus-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/cactus.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-cactus-harvester"], "Keywords": ["machinaris-cactus-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Cactus fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "11447", "Name": "farmer_port", "Target": "farmer_port", "Default": "11447", "Mode": "", "Description": "The port of the Cactus fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8936", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "cactus", "Name": "blockchains", "Target": "blockchains", "Default": "cactus", "Mode": "", "Description": "Leave at 'cactus'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-cactus", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-cactus", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8936", "Name": "worker_port", "Target": "8936", "Default": "8936", "Mode": "tcp", "Description": "Leave at 8936 for Cactus", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-chives": {"Name": "machinaris-chives", "Repository": "ghcr.io/guydavis/machinaris-chives", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-chives", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Chives blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/chives.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-chives"], "Keywords": ["machinaris-chives", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8931", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "chives", "Name": "blockchains", "Target": "blockchains", "Default": "chives", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'chives'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-chives", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-chives", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8931", "Name": "worker_port", "Target": "8931", "Default": "8931", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8931 for Chives blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "9699", "Name": "protocol_port", "Target": "9699", "Default": "9699", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "9647", "Name": "farmer_port", "Target": "9647", "Default": "9647", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-chives-harvester": {"Name": "machinaris-chives-harvester", "Repository": "ghcr.io/guydavis/machinaris-chives", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-chives-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chives (NOT CHIA) plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/chives.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-chives-harvester"], "Keywords": ["machinaris-chives-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Chives fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "9647", "Name": "farmer_port", "Target": "farmer_port", "Default": "9647", "Mode": "", "Description": "The port of the Chives fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8931", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "chives", "Name": "blockchains", "Target": "blockchains", "Default": "chives", "Mode": "", "Description": "Leave at 'chives'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-chives", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-chives", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed Chives plots for farming. Recommend a 'chives' sub-folder within your Chia plots folder! Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8931", "Name": "worker_port", "Target": "8931", "Default": "8931", "Mode": "tcp", "Description": "Leave at 8931 for Chives", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-cryptodoge": {"Name": "machinaris-cryptodoge", "Repository": "ghcr.io/guydavis/machinaris-cryptodoge", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-cryptodoge", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Cryptodoge blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/cryptodoge.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-cryptodoge"], "Keywords": ["machinaris-cryptodoge", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8937", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "cryptodoge", "Name": "blockchains", "Target": "blockchains", "Default": "cryptodoge", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'cryptodoge'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-cryptodoge", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-cryptodoge", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot cryptodogeage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8937", "Name": "worker_port", "Target": "8937", "Default": "8937", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8937 for Cryptodoge blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "15994", "Name": "protocol_port", "Target": "15994", "Default": "15994", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "16895", "Name": "farmer_port", "Target": "16895", "Default": "16895", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-cryptodoge-harvester": {"Name": "machinaris-cryptodoge-harvester", "Repository": "ghcr.io/guydavis/machinaris-cryptodoge", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-cryptodoge-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/cryptodoge.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-cryptodoge-harvester"], "Keywords": ["machinaris-cryptodoge-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Cryptodoge fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "16895", "Name": "farmer_port", "Target": "farmer_port", "Default": "16895", "Mode": "", "Description": "The port of the Cryptodoge fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8937", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "cryptodoge", "Name": "blockchains", "Target": "blockchains", "Default": "cryptodoge", "Mode": "", "Description": "Leave at 'cryptodoge'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-cryptodoge", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-cryptodoge", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8937", "Name": "worker_port", "Target": "8937", "Default": "8937", "Mode": "tcp", "Description": "Leave at 8937 for Cryptodoge", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-flax": {"Name": "machinaris-flax", "Repository": "ghcr.io/guydavis/machinaris-flax", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-flax", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Flax blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/flax.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-flax"], "Keywords": ["machinaris-flax", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8928", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "flax", "Name": "blockchains", "Target": "blockchains", "Default": "flax", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'flax'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-flax", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-flax", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8928", "Name": "worker_port", "Target": "8928", "Default": "8928", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8928 for Flax blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "6888", "Name": "protocol_port", "Target": "6888", "Default": "6888", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "6885", "Name": "farmer_port", "Target": "6885", "Default": "6885", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-flax-harvester": {"Name": "machinaris-flax-harvester", "Repository": "ghcr.io/guydavis/machinaris-flax", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-flax-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/flax.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-flax-harvester"], "Keywords": ["machinaris-flax-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Flax fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "6885", "Name": "farmer_port", "Target": "farmer_port", "Default": "6885", "Mode": "", "Description": "The port of the Flax fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8928", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "flax", "Name": "blockchains", "Target": "blockchains", "Default": "flax", "Mode": "", "Description": "Leave at 'flax'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-flax", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-flax", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8928", "Name": "worker_port", "Target": "8928", "Default": "8928", "Mode": "tcp", "Description": "Leave at 8928 for Flax", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-flora": {"Name": "machinaris-flora", "Repository": "ghcr.io/guydavis/machinaris-flora", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-flora", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Flora blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/flora.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-flora"], "Keywords": ["machinaris-flora", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8932", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "flora", "Name": "blockchains", "Target": "blockchains", "Default": "flora", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'flora'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-flora", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-flora", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8932", "Name": "worker_port", "Target": "8932", "Default": "8932", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8932 for Flora blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "18644", "Name": "protocol_port", "Target": "18644", "Default": "18644", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18647", "Name": "farmer_port", "Target": "18647", "Default": "18647", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-flora-harvester": {"Name": "machinaris-flora-harvester", "Repository": "ghcr.io/guydavis/machinaris-flora", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-flora-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/flora.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-flora-harvester"], "Keywords": ["machinaris-flora-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Flora fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18647", "Name": "farmer_port", "Target": "farmer_port", "Default": "18647", "Mode": "", "Description": "The port of the Flora fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8932", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "flora", "Name": "blockchains", "Target": "blockchains", "Default": "flora", "Mode": "", "Description": "Leave at 'flora'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-flora", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-flora", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8932", "Name": "worker_port", "Target": "8932", "Default": "8932", "Mode": "tcp", "Description": "Leave at 8932 for Flora", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-hddcoin": {"Name": "machinaris-hddcoin", "Repository": "ghcr.io/guydavis/machinaris-hddcoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-hddcoin", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the HDDCoin blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/hddcoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-hddcoin"], "Keywords": ["machinaris-hddcoin", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8930", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "hddcoin", "Name": "blockchains", "Target": "blockchains", "Default": "hddcoin", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'hddcoin'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-hddcoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-hddcoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8930", "Name": "worker_port", "Target": "8930", "Default": "8930", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8930 for HDDCoin blockchain.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "28444", "Name": "protocol_port", "Target": "28444", "Default": "28444", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "28447", "Name": "farmer_port", "Target": "28447", "Default": "28447", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-hddcoin-harvester": {"Name": "machinaris-hddcoin-harvester", "Repository": "ghcr.io/guydavis/machinaris-hddcoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-hddcoin-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/hddcoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-hddcoin-harvester"], "Keywords": ["machinaris-hddcoin-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the HDDcoin fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "28447", "Name": "farmer_port", "Target": "farmer_port", "Default": "28447", "Mode": "", "Description": "The port of the HDDcoin fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8930", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "hddcoin", "Name": "blockchains", "Target": "blockchains", "Default": "hddcoin", "Mode": "", "Description": "Leave at 'hddcoin'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-hddcoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-hddcoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8930", "Name": "worker_port", "Target": "8930", "Default": "8930", "Mode": "tcp", "Description": "Leave at 8930 for HDDcoin", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-maize": {"Name": "machinaris-maize", "Repository": "ghcr.io/guydavis/machinaris-maize", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-maize", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Maize blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/maize.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-maize"], "Keywords": ["machinaris-maize", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8933", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "maize", "Name": "blockchains", "Target": "blockchains", "Default": "maize", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'maize'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-maize", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-maize", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot maizeage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8933", "Name": "worker_port", "Target": "8933", "Default": "8933", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8933 for Maize blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "8644", "Name": "protocol_port", "Target": "8644", "Default": "8644", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "8647", "Name": "farmer_port", "Target": "8647", "Default": "8647", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-maize-harvester": {"Name": "machinaris-maize-harvester", "Repository": "ghcr.io/guydavis/machinaris-maize", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-maize-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/maize.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-maize-harvester"], "Keywords": ["machinaris-maize-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Maize fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "8647", "Name": "farmer_port", "Target": "farmer_port", "Default": "8647", "Mode": "", "Description": "The port of the Maize fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8933", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "maize", "Name": "blockchains", "Target": "blockchains", "Default": "maize", "Mode": "", "Description": "Leave at 'maize'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-maize", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-maize", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8933", "Name": "worker_port", "Target": "8933", "Default": "8933", "Mode": "tcp", "Description": "Leave at 8933 for Maize", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-mmx": {"Name": "machinaris-mmx", "Repository": "ghcr.io/guydavis/machinaris-mmx", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-mmx", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the MMX blockchain to the main Machinaris application, alongside Chia. x86_64 required, MMX does not support aarch64.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/mmx.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Beta": "true", "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-mmx"], "Keywords": ["machinaris-mmx", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8940", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "mmx", "Name": "blockchains", "Target": "blockchains", "Default": "mmx", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'mmx'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "nvidia_visible_devices": {"value": "0", "Name": "NVIDIA_VISIBLE_DEVICES", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "all", "Mode": "", "Description": "GPU(s) to use in container. See: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#gpu-enumeration", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "nvidia_driver_capabilities": {"value": "all", "Name": "NVIDIA_DRIVER_CAPABILITIES", "Target": "NVIDIA_DRIVER_CAPABILITIES", "Default": "compute,utility", "Mode": "", "Description": "Driver features to load.  See: https://docs.nvidia.com/datacenter/cloud-native/container-toolkit/user-guide.html#driver-capabilities", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "opencl_gpu": {"value": "", "Name": "OPENCL_GPU", "Target": "OPENCL_GPU", "Default": "", "Mode": "", "Description": "OpenCL GPU type.  Leave blank if you have no GPU. Use exactly 'nvidia' if you have a supported Nvidia GPU. AMD and iPU not currently supported.", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-mmx", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-mmx", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot mmxage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8940", "Name": "worker_port", "Target": "8940", "Default": "8940", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8940 for MMX blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "12335", "Name": "protocol_port", "Target": "12335", "Default": "12335", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "11330", "Name": "farmer_port", "Target": "11330", "Default": "11330", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-mmx-harvester": {"Name": "machinaris-mmx-harvester", "Repository": "ghcr.io/guydavis/machinaris-mmx", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-mmx-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local MMX (NOT CHIA) plots.  Connects to the main Machinaris application. x86_64 required, MMX does not support aarch64.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/mmx.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Beta": "true", "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-mmx-harvester"], "Keywords": ["machinaris-mmx-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the MMX fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "11330", "Name": "farmer_port", "Target": "farmer_port", "Default": "11330", "Mode": "", "Description": "The port of the MMX fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8940", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "mmx", "Name": "blockchains", "Target": "blockchains", "Default": "mmx", "Mode": "", "Description": "Leave at 'mmx'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-mmx", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-mmx", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed MMX plots for farming. Recommend a 'mmx' sub-folder within your Chia plots folder! Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8940", "Name": "worker_port", "Target": "8940", "Default": "8940", "Mode": "tcp", "Description": "Leave at 8940 for MMX", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-nchain": {"Name": "machinaris-nchain", "Repository": "ghcr.io/guydavis/machinaris-nchain", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-nchain", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the NChain blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/nchain.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-nchain"], "Keywords": ["machinaris-nchain", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8929", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "nchain", "Name": "blockchains", "Target": "blockchains", "Default": "nchain", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'nchain'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-nchain", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-nchain", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8929", "Name": "worker_port", "Target": "8929", "Default": "8929", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8929 for NChain blockchain.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "58445", "Name": "protocol_port", "Target": "58445", "Default": "58445", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "38447", "Name": "farmer_port", "Target": "38447", "Default": "38447", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-nchain-harvester": {"Name": "machinaris-nchain-harvester", "Repository": "ghcr.io/guydavis/machinaris-nchain", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-nchain-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/nchain.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-nchain-harvester"], "Keywords": ["machinaris-nchain-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the NChain fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "38447", "Name": "farmer_port", "Target": "farmer_port", "Default": "38447", "Mode": "", "Description": "The port of the NChain fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8929", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "nchain", "Name": "blockchains", "Target": "blockchains", "Default": "nchain", "Mode": "", "Description": "Leave at 'nchain'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-nchain", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-nchain", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8929", "Name": "worker_port", "Target": "8929", "Default": "8929", "Mode": "tcp", "Description": "Leave at 8929 for NChain", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-shibgreen": {"Name": "machinaris-shibgreen", "Repository": "ghcr.io/guydavis/machinaris-shibgreen", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-shibgreen", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the SHIBGreen blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/shibgreen.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-shibgreen"], "Keywords": ["machinaris-shibgreen", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8939", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "shibgreen", "Name": "blockchains", "Target": "blockchains", "Default": "shibgreen", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'shibgreen'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-shibgreen", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-shibgreen", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot shibgreenage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8939", "Name": "worker_port", "Target": "8939", "Default": "8939", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8939 for SHIBGreen blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "7442", "Name": "protocol_port", "Target": "7442", "Default": "7442", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18974", "Name": "farmer_port", "Target": "18974", "Default": "18974", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-shibgreen-harvester": {"Name": "machinaris-shibgreen-harvester", "Repository": "ghcr.io/guydavis/machinaris-shibgreen", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-shibgreen-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/shibgreen.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-shibgreen-harvester"], "Keywords": ["machinaris-shibgreen-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the SHIBgreen fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "18974", "Name": "farmer_port", "Target": "farmer_port", "Default": "18974", "Mode": "", "Description": "The port of the SHIBgreen fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8939", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "shibgreen", "Name": "blockchains", "Target": "blockchains", "Default": "shibgreen", "Mode": "", "Description": "Leave at 'shibgreen'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-shibgreen", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-shibgreen", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8939", "Name": "worker_port", "Target": "8939", "Default": "8939", "Mode": "tcp", "Description": "Leave at 8939 for SHIBgreen", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-silicoin": {"Name": "machinaris-silicoin", "Repository": "ghcr.io/guydavis/machinaris-silicoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-silicoin", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Silicoin blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/silicoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Beta": "true", "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-silicoin"], "Keywords": ["machinaris-silicoin", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8941", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "silicoin", "Name": "blockchains", "Target": "blockchains", "Default": "silicoin", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'silicoin'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-silicoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-silicoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot silicoinage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8941", "Name": "worker_port", "Target": "8941", "Default": "8941", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8941 for Silicoin blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "22222", "Name": "protocol_port", "Target": "22222", "Default": "22222", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "22447", "Name": "farmer_port", "Target": "22447", "Default": "22447", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-silicoin-harvester": {"Name": "machinaris-silicoin-harvester", "Repository": "ghcr.io/guydavis/machinaris-silicoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-silicoin-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/silicoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Beta": "true", "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-silicoin-harvester"], "Keywords": ["machinaris-silicoin-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Silicoin fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "22447", "Name": "farmer_port", "Target": "farmer_port", "Default": "22447", "Mode": "", "Description": "The port of the Silicoin fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8941", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "silicoin", "Name": "blockchains", "Target": "blockchains", "Default": "silicoin", "Mode": "", "Description": "Leave at 'silicoin'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-silicoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-silicoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8941", "Name": "worker_port", "Target": "8941", "Default": "8941", "Mode": "tcp", "Description": "Leave at 8941 for Silicoin", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-staicoin": {"Name": "machinaris-staicoin", "Repository": "ghcr.io/guydavis/machinaris-staicoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-staicoin", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Staicoin blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/staicoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-staicoin"], "Keywords": ["machinaris-staicoin", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8934", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "staicoin", "Name": "blockchains", "Target": "blockchains", "Default": "staicoin", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'staicoin'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-staicoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-staicoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8934", "Name": "worker_port", "Target": "8934", "Default": "8934", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8934 for Staicoin blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "1999", "Name": "protocol_port", "Target": "1999", "Default": "1999", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "1692", "Name": "farmer_port", "Target": "1692", "Default": "1692", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-staicoin-harvester": {"Name": "machinaris-staicoin-harvester", "Repository": "ghcr.io/guydavis/machinaris-staicoin", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-staicoin-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/staicoin.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-staicoin-harvester"], "Keywords": ["machinaris-staicoin-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Staicoin fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "1692", "Name": "farmer_port", "Target": "farmer_port", "Default": "1692", "Mode": "", "Description": "The port of the Staicoin fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8934", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "staicoin", "Name": "blockchains", "Target": "blockchains", "Default": "staicoin", "Mode": "", "Description": "Leave at 'staicoin'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-staicoin", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-staicoin", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8934", "Name": "worker_port", "Target": "8934", "Default": "8934", "Mode": "tcp", "Description": "Leave at 8934 for Staicoin", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-stor": {"Name": "machinaris-stor", "Repository": "ghcr.io/guydavis/machinaris-stor", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-stor", "Network": "bridge", "Privileged": "false", "Overview": "Adds on farming of the Stor blockchain to the main Machinaris application, alongside Chia. \r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/stor.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-stor"], "Keywords": ["machinaris-stor", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "Again, the IP address of your Unraid server on your LAN for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8935", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "fullnode", "Name": "mode", "Target": "mode", "Default": "fullnode", "Mode": "", "Description": "Determines which services Machinaris starts.  Default is everything (aka fullnode).", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "stor", "Name": "blockchains", "Target": "blockchains", "Default": "stor", "Mode": "", "Description": "The blockchain to farm.  Leave set to 'stor'.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "blockchain_db_download": {"value": "false", "Name": "blockchain_db_download", "Target": "blockchain_db_download", "Default": "false", "Mode": "", "Description": "On first launch, whether to download a fully synced copy of the blockchain database, avoidng hours/days of syncing.  Off by default due to inherent risks.  More at: https://github.com/guydavis/machinaris/wiki/Blockchains", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-stor", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-stor", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "mnemonic_path": {"value": "/mnt/user/appdata/machinaris/mnemonic.txt", "Name": "mnemonic_path", "Target": "/root/.chia/mnemonic.txt", "Default": "/mnt/user/appdata/machinaris/mnemonic.txt", "Mode": "ro", "Description": "Read-only access to the mnemonic from the main Machinaris container, allowing this fork to farm the same plots.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plotting": {"value": "", "Name": "plotting", "Target": "/plotting", "Default": "", "Mode": "rw", "Description": "Your fast temp space for plotting, ideally a cache pool or unassigned SSD.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8935", "Name": "worker_port", "Target": "8935", "Default": "8935", "Mode": "tcp", "Description": "The TCP port to reach this worker at.  Leave at 8935 for Stor blockchain.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "protocol_port": {"value": "8668", "Name": "protocol_port", "Target": "8668", "Default": "8668", "Mode": "tcp", "Description": "The TCP port for connecting to peers.  Port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "8337", "Name": "farmer_port", "Target": "8337", "Default": "8337", "Mode": "tcp", "Description": "The TCP port allowing harvesters to connect with on your LAN.  DO NOT port forward at your router.", "Type": "Port", "Display": "always-hide", "Required": "true", "Mask": "false"}}}}, "machinaris-stor-harvester": {"Name": "machinaris-stor-harvester", "Repository": "ghcr.io/guydavis/machinaris-stor", "Registry": "https://hub.docker.com/repository/docker/guydavis/machinaris-stor-harvester", "Network": "bridge", "Privileged": "false", "Overview": "On a secondary Unraid system, allows for harvesting of local Chia plots.  Connects to the main Machinaris application.\r\n", "WebUI": "http://[IP]:[PORT:8926]/", "Icon": "https://raw.githubusercontent.com/guydavis/machinaris-unraid/master/logos/stor.png", "ExtraParams": "-h $HOSTNAME", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "Machinaris.  See the description for full details", "CategoryList": ["Crypto"], "Sources": ["https://github.com/guydavis/machinaris", "https://hub.docker.com/repository/docker/guydavis/machinaris-stor-harvester"], "Keywords": ["machinaris-stor-harvester", ["Crypto"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"plots_dir": {"value": "/plots1", "Name": "plots_dir", "Target": "plots_dir", "Default": "/plots1", "Mode": "", "Description": "A colon-separated list of all in-container paths (defined above) holding your completed plots.  Example: /plots1:/plots2:/plots3", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false"}, "controller_host": {"value": "", "Name": "controller_host", "Target": "controller_host", "Default": "", "Mode": "", "Description": "The IP address of the Machinaris Controller on your LAN for controller/worker communication. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_address": {"value": "", "Name": "farmer_address", "Target": "farmer_address", "Default": "", "Mode": "", "Description": "The IP address of the Stor fullnode farmer this harvester will connect to. ANOTHER COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "farmer_port": {"value": "8337", "Name": "farmer_port", "Target": "farmer_port", "Default": "8337", "Mode": "", "Description": "The port of the Stor fullnode farmer this harvester will connect to.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "worker_address": {"value": "", "Name": "worker_address", "Target": "worker_address", "Default": "", "Mode": "", "Description": "The IP address of this Unraid server on your LAN for controller/worker communication. THIS COMPUTER", "Type": "Variable", "Display": "always-hide", "Required": "true", "Mask": "false"}, "worker_api_port": {"value": "8935", "Name": "worker_api_port", "Target": "worker_api_port", "Default": "", "Mode": "", "Description": "The TCP port of the Machinaris worker for controller/worker communication.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "mode": {"value": "harvester", "Name": "mode", "Target": "mode", "Default": "harvester", "Mode": "", "Description": "Default is 'harvester'.  If plotting as well, use 'harvester,plotter' and add a '/plotting' Path mount.", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "blockchains": {"value": "stor", "Name": "blockchains", "Target": "blockchains", "Default": "stor", "Mode": "", "Description": "Leave at 'stor'.  Only one, not multple.", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/machinaris-stor", "Name": "appdata", "Target": "/root/.chia", "Default": "/mnt/user/appdata/machinaris-stor", "Mode": "rw", "Description": "Holds app data for the container. Not for temp plotting or final plot storage.", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}, "plots1": {"value": "", "Name": "plots1", "Target": "/plots1", "Default": "", "Mode": "rw", "Description": "Holds completed plots for farming. Create more Paths for additional folders like plots1,plots2,etc... ", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false"}}, "Port": {"worker_port": {"value": "8935", "Name": "worker_port", "Target": "8935", "Default": "8935", "Mode": "tcp", "Description": "Leave at 8935 for Stor", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "bind9": {"Name": "bind9", "Repository": "pwa666/bind9", "Registry": "https://hub.docker.com/r/pwa666/bind9", "Network": "host", "Privileged": "false", "Overview": "Bind9 nameserver with Webmin WebUI. Simple lightweight DNS for local network. Default WebUI username is: admin and password: difficult You can change password by docker variables.", "WebUI": "http://[IP]:[PORT:10000]/", "Icon": "https://raw.githubusercontent.com/vrx-666/unraid-xml/master/img/bind.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Network-DNS"], "Sources": ["https://www.isc.org/bind/", "https://hub.docker.com/r/pwa666/bind9"], "Keywords": ["bind9", ["Network-DNS"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"password": {"value": "difficult", "Name": "Password", "Target": "GUI_PASSWORD", "Default": "difficult", "Mode": "", "Description": "This is WebUI password for user admin.\r\nDefault: difficult", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "true"}, "ipv6": {"value": "disable", "Name": "IPv6", "Target": "IPV6", "Default": "disable", "Mode": "", "Description": "Enable/Disable IPv6", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"bindconfig": {"value": "", "Name": "Bind Config", "Target": "/etc/bind", "Default": "", "Mode": "rw", "Description": "Where Your DNS Server should store persistant configs", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"dnstcpport": {"value": "53", "Name": "DNS TCP Port", "Target": "53", "Default": "53", "Mode": "tcp", "Description": "DNS Listening TCP Port, this is used for dns queries", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "dnsudpport": {"value": "53", "Name": "DNS UDP Port", "Target": "53", "Default": "53", "Mode": "udp", "Description": "DNS Listening UDP Port, this is used for dns queries", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "webuiport": {"value": "10000", "Name": "WebUI Port", "Target": "10000", "Default": "10000", "Mode": "tcp", "Description": "This is WEBUI Port used for graphical management", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "zabbix-agent": {"Name": "zabbix-agent", "Repository": "zabbix/zabbix-agent", "Registry": "https://hub.docker.com/r/zabbix/zabbix-agent", "Branch": [{"Tag": "5.0-alpine-latest", "TagDescription": "version 5.0"}, {"Tag": "alpine-4.4-latest", "TagDescription": "version 4.4"}], "Network": "host", "Privileged": "true", "Overview": "This container is just official Zabbix Agent image. Any Zabbix Server configuration/setup will need to be completed by yourself.   \n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/vrx-666/unraid-xml/master/img/zabbix.jpg", "PostArgs": "", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["Network-Management"], "Sources": ["https://hub.docker.com/r/zabbix/zabbix-agent"], "Keywords": ["zabbix-agent", ["Network-Management"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"zbx_hostname": {"value": "ZABBIX_SERVER_HOSTNAME", "Name": "ZBX_HOSTNAME", "Target": "ZBX_HOSTNAME", "Default": "", "Mode": "", "Description": "Container Variable: ZBX_HOSTNAME", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "zbx_server_host": {"value": "ZABBIX_SERVER_IP", "Name": "ZBX_SERVER_HOST", "Target": "ZBX_SERVER_HOST", "Default": "", "Mode": "", "Description": "Container Variable: ZBX_SERVER_HOST", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"cachedisks": {"value": "/mnt/cache", "Name": "cache disks", "Target": "/mnt/cache", "Default": "", "Mode": "ro", "Description": "Container Path: /mnt/cache", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "arraydisk": {"value": "/mnt/user", "Name": "array disk", "Target": "/mnt/array", "Default": "", "Mode": "ro", "Description": "Container Path: /mnt/array", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "zabbix-agent2": {"Name": "zabbix-agent2", "Repository": "zabbix/zabbix-agent2", "Registry": "https://hub.docker.com/r/zabbix/zabbix-agent", "Branch": [{"Tag": "5.0-alpine-latest", "TagDescription": "version 5.0"}, {"Tag": "alpine-4.4-latest", "TagDescription": "version 4.4"}], "Network": "host", "Privileged": "true", "Overview": "This container is just official Zabbix Agent image. Any Zabbix Server configuration/setup will need to be completed by yourself.   \n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/vrx-666/unraid-xml/master/img/zabbix.jpg", "PostArgs": "", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["Network-Management"], "Sources": ["https://hub.docker.com/r/zabbix/zabbix-agent"], "Keywords": ["zabbix-agent2", ["Network-Management"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"zbx_hostname": {"value": "ZABBIX_SERVER_HOSTNAME", "Name": "ZBX_HOSTNAME", "Target": "ZBX_HOSTNAME", "Default": "", "Mode": "", "Description": "Container Variable: ZBX_HOSTNAME", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "zbx_server_host": {"value": "ZABBIX_SERVER_IP", "Name": "ZBX_SERVER_HOST", "Target": "ZBX_SERVER_HOST", "Default": "", "Mode": "", "Description": "Container Variable: ZBX_SERVER_HOST", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"cachedisks": {"value": "/mnt/cache", "Name": "cache disks", "Target": "/mnt/cache", "Default": "", "Mode": "ro", "Description": "Container Path: /mnt/cache", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "arraydisk": {"value": "/mnt/user", "Name": "array disk", "Target": "/mnt/array", "Default": "", "Mode": "ro", "Description": "Container Path: /mnt/array", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "awtrix2": {"Name": "awtrix2", "Repository": "whyet/awtrix2", "Registry": "https://hub.docker.com/r/whyet/awtrix2", "Network": "host", "Privileged": "false", "Overview": "Docker Container for Awtrix2 Host in collaboration with Blueforcer.\r\n", "WebUI": "http://[IP]:[PORT:7000]", "Icon": "https://avatars.githubusercontent.com/u/38006982?s=200&amp;v=4", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["Drivers", "MediaServer-Other"], "Sources": ["https://awtrixdocs.blueforcer.de/", "https://hub.docker.com/r/whyet/awtrix2"], "Keywords": ["awtrix2", ["Drivers", "MediaServer-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"timezone": {"value": "Asia/Shanghai", "Name": "Time Zone", "Target": "TZ", "Default": "Asia/Shanghai", "Mode": "", "Description": "Container Variable: TZ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "language": {"value": "-Duser.language=en -Duser.country=US", "Name": "Language", "Target": "JAVA_TOOL_OPTIONS", "Default": "-Duser.language=en -Duser.country=US", "Mode": "", "Description": "If you want AWTRIX to automatically display some apps like DayOfTheWeek in your local language/format (e.g. ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "autoupdate": {"value": "true", "Name": "Auto Update", "Target": "AUTOUPDATE", "Default": "true", "Mode": "", "Description": "Container Variable: AUTOUPDATE", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "betaversion": {"value": "true", "Name": "Beta Version", "Target": "AWTRIX_BETA", "Default": "true", "Mode": "", "Description": "Container Variable: AWTRIX_BETA", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"configpath": {"value": "/mnt/user/appdata/awtrix2", "Name": "Config Path", "Target": "/data", "Default": "/mnt/user/appdata/awtrix2", "Mode": "rw", "Description": "Config Path\r\nContainer Path: /data", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"webcontrollerport": {"value": "7000", "Name": "Web Controller Port", "Target": "7000", "Default": "7000", "Mode": "tcp", "Description": "Web Controller Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "apiport": {"value": "7001", "Name": "API Port", "Target": "7001", "Default": "7001", "Mode": "tcp", "Description": "API Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "hostport3": {"value": "5568", "Name": "Host Port 3", "Target": "5568", "Default": "5568", "Mode": "udp", "Description": "Container Port: 5568", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "amazonalexaport": {"value": "80", "Name": "Amazon Alexa Port", "Target": "80", "Default": "80", "Mode": "tcp", "Description": "For Amazon Alexa Support you need this Port. If This Port is already used this can be changed in the config file.", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "nps-client": {"Name": "nps-client", "Repository": "ffdfgdfg/npc", "Registry": "https://hub.docker.com/r/ffdfgdfg/npc", "Network": "host", "Privileged": "false", "Overview": "a lightweight, high-performance, powerful intranet penetration proxy server, with a powerful web management terminal.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/L1cardo/Unraid-Templates/main/nps-client/nps-client-icon.png", "ExtraParams": "--restart always", "PostArgs": "-config=/conf/npc.conf", "Networking": {"Mode": "host"}, "CategoryList": ["Tools-Utilities", "Network-Other"], "Sources": ["https://github.com/ehang-io/nps", "https://hub.docker.com/r/ffdfgdfg/npc"], "Keywords": ["nps-client", ["Tools-Utilities", "Network-Other"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "rw-photonix": {"Name": "rw-photonix", "Overview": "Photonix is a photo management application that streamlines the process of storing, presenting and re-discovering photos. Once set up it will ingest all the photos in your collection and start building up an image database of everything you could want to search and filter by. It makes your entire collection available to you, whichever device you\u2019re using \u2014 as long as you can get to a web browser.", "Registry": "https://hub.docker.com/r/photonixapp/photonix/", "Repository": "photonixapp/photonix", "Privileged": "false", "Network": "bridge", "WebUI": "http://[IP]:[PORT:80]/", "Icon": "https://photonix.org/docs/img/favicon.png", "Requires": "**PostgreSQL** database *and* **redis** cache", "CategoryList": ["MediaApp-Photos", "MediaServer-Photos"], "Sources": ["https://hub.docker.com/r/photonixapp/photonix/"], "Keywords": ["rw-photonix", ["MediaApp-Photos", "MediaServer-Photos"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"environment": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Environment", "Target": "ENV", "Default": "prd", "Description": "(prd or dev) In prd mode, running code and services are as optimised as possible. Running in dev mode enables features like Webpack/React hot module reloading (HMR), Django Runserver (code auto-reloading), Storybook server etc."}, "demomode": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Demo Mode", "Target": "DEMO", "Default": "0", "Description": "(0 or 1) Starts the environment with a demo user account, library and downloads some demo photos. This is how the demo at https://demo.photonix.org/ runs"}, "sampledata": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Sample Data", "Target": "SAMPLE_DATA", "Default": "0", "Description": "(0 or 1) Creates same account, library and photos as in DEMO mode but still allows you to make modifying changes as a user (most useful for developers)."}, "adminusername": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Admin Username", "Target": "ADMIN_USERNAME", "Default": "admin", "Description": "Creates a username for the admin user on first run"}, "adminpassword": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Admin Password", "Target": "ADMIN_PASSWORD", "Default": "admin", "Description": "Sets password for the admin user on first run. If this is set but ADMIN_USERNAME is not, the username will be admin"}, "postgreshost": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Postgres Host", "Target": "POSTGRES_HOST", "Default": "photonix_postgres11", "Description": "Host name for Postgres database instance."}, "postgresdatabase": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Postgres Database", "Target": "POSTGRES_DB", "Default": "photonix", "Description": "Database name for Postgres database instance, will be auto-created on first run if it doesn't exist."}, "postgresuser": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Postgres User", "Target": "POSTGRES_USER", "Default": "postgres", "Description": "Username for Postgres database."}, "postgrespassword": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Postgres Password", "Target": "POSTGRES_PASSWORD", "Default": "postgres", "Description": "Password for Postgres database."}, "postgresport": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Postgres Port", "Target": "POSTGRES_PORT", "Default": "5432", "Description": "Port for Postgres database."}, "redishost": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Redis Host", "Target": "REDIS_HOST", "Default": "photonix_redis", "Description": "Redis hostname, used for resource locking."}, "redisport": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Redis Port", "Target": "REDIS_PORT", "Default": "6379", "Description": "Redis port number."}, "redisdatabase": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Redis Database", "Target": "REDIS_DB", "Default": "0", "Description": "Redis database number."}, "allowedhosts": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Allowed Hosts", "Target": "ALLOWED_HOSTS", "Default": "*", "Description": "Restricts access for Django backend to be accessed from just a certain hostname."}, "djangosecretkey": {"value": "", "Type": "Variable", "Display": "always-hide", "Required": "false", "Mask": "false", "Name": "Django Secret Key", "Target": "DJANGO_SECRET_KEY", "Default": "", "Description": "Sets value for Django to use as a secret key (sessions, hashing, signing etc.). By default we automatically generate a cryptographically secure key on first run and store it in Redis for future."}, "loglevel": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Log Level", "Target": "LOG_LEVEL", "Default": "INFO", "Description": "Determines what level of logging to output to terminal."}, "djangologlevel": {"value": "", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Name": "Django Log Level", "Target": "DJANGO_LOG_LEVEL", "Default": "WARNING", "Description": "Determines what level of Django logging to output to terminal."}}, "Path": {"photos": {"value": "", "Type": "Path", "Display": "always-hide", "Required": "false", "Mask": "false", "Mode": "rw", "Name": "Photos", "Target": "/data/photos", "Default": "/mnt/user", "Description": "Container Path: /data/photos"}, "rawphotos": {"value": "", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Mode": "rw", "Name": "Raw Photos", "Target": "/data/raw-photos-processed", "Default": "", "Description": "Container Path: /data/raw-photos-processed"}, "cache": {"value": "", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Mode": "rw", "Name": "Cache", "Target": "/data/cache", "Default": "", "Description": "Container Path: /data/cache"}, "models": {"value": "", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false", "Mode": "rw", "Name": "Models", "Target": "/data/models", "Default": "", "Description": "Container Path: /data/models"}}, "Port": {"webuiport": {"value": "", "Type": "Port", "Display": "always-hide", "Required": "false", "Mask": "false", "Mode": "tcp", "Name": "Webui Port", "Target": "80", "Default": "8080", "Description": "External WebUI Port"}}}}, "lomorage": {"Name": "lomorage", "Repository": "lomorage/amd64-lomorage", "Registry": "https://hub.docker.com/r/lomorage/amd64-lomorage", "Network": "host", "Privileged": "false", "Overview": "Lomorage enables you to backup photos / videos from any devices to your self-hosted server, and intelligently manages these personal assets via AI. Run the Lomorage server at your home, download mobile client to save the memories, and enjoy the moments.", "WebUI": "", "Icon": "https://lomorage.com/img/logo.png", "ExtraParams": "--user=99:100", "PostArgs": "8000", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["Backup", "MediaApp-Video", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Photos"], "Sources": ["https://github.com/lomorage/lomo-docker", "https://hub.docker.com/r/lomorage/amd64-lomorage"], "Keywords": ["lomorage", ["Backup", "MediaApp-Video", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"mediadir": {"value": "/mnt/user/", "Name": "MediaDir", "Target": "/media", "Default": "", "Mode": "rw", "Description": "Volume to store photos, videos", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "appdir": {"value": "/mnt/user/appdata/", "Name": "AppDir", "Target": "/lomo", "Default": "", "Mode": "rw", "Description": "Volume for application configuration and logs", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "user": {"value": "/etc/passwd", "Name": "User", "Target": "/etc/passwd", "Default": "", "Mode": "rw", "Description": "Container Path: /etc/passwd", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {}}}, "trackmania-evosc": {"Name": "trackmania-evosc", "Repository": "evotm/evosc", "Registry": "https://hub.docker.com/r/evotm/evosc", "Network": "bridge", "Privileged": "false", "Overview": "A modern server controller for the game Trackmania (TM\u00b2, 2020).\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/L4stIdi0t/Unraid-template/master/TrackMania2020-Server/logoTM.png", "ExtraParams": "--restart=unless-stopped", "PostArgs": "", "Networking": {"Mode": "bridge"}, "Requires": "MySQL / MariaDB installed, aswell as a TrackMania server", "CategoryList": ["GameServers"], "Sources": ["https://github.com/EvoTM/EvoSC", "https://hub.docker.com/r/evotm/evosc"], "Keywords": ["trackmania-evosc", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"db_host": {"value": "", "Name": "DB_HOST", "Target": "DB_HOST", "Default": "", "Mode": "", "Description": "MySQL / MariaDB DB_HOST", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_name": {"value": "", "Name": "DB_NAME", "Target": "DB_NAME", "Default": "", "Mode": "", "Description": "MySQL / MariaDB DB_NAME", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_user": {"value": "", "Name": "DB_USER", "Target": "DB_USER", "Default": "", "Mode": "", "Description": "MySQL / MariaDB DB_USER", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "db_password": {"value": "", "Name": "DB_PASSWORD", "Target": "DB_PASSWORD", "Default": "", "Mode": "", "Description": "MySQL / MariaDB DB_PASSWORD", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}, "rpc_ip": {"value": "", "Name": "RPC_IP", "Target": "RPC_IP", "Default": "trackmania", "Mode": "", "Description": "TrackMania server IP", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "rpc_login": {"value": "SuperAdmin", "Name": "RPC_LOGIN", "Target": "RPC_LOGIN", "Default": "SuperAdmin", "Mode": "", "Description": "TrackMania server RPC_LOGIN, Default 'SuperAdmin'", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "rpc_password": {"value": "SuperAdmin", "Name": "RPC_PASSWORD", "Target": "RPC_PASSWORD", "Default": "SuperAdmin", "Mode": "", "Description": "TrackMania server RPC_PASSWORD, Default 'SuperAdmin'", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {"trackmaniaserver": {"value": "/mnt/user/appdata/Trackmania2020Server/", "Name": "trackmania server", "Target": "/server/UserData", "Default": "/mnt/user/appdata/TrackmaniaServer/", "Mode": "rw", "Description": "Container Path: /server/UserData", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "evoscdata": {"value": "/mnt/user/appdata/Trackmania2020Server/EvoSC/cache", "Name": "EvoSc Data", "Target": "/controller/cache", "Default": "/mnt/user/appdata/TrackmaniaServer/EvoSC/cache", "Mode": "rw", "Description": "Container Path: /controller/cache", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {}}}, "2fauth": {"Name": "2fauth", "Repository": "2fauth/2fauth", "Registry": "https://hub.docker.com/r/2fauth/2fauth", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:8000]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/2fauth.png", "PostArgs": "", "Requires": "Redis server", "Official": true, "CategoryList": ["Cloud", "Security", "Tools-Utilities", "Network-Web"], "Sources": ["https://github.com/Bubka/2FAuth", "https://hub.docker.com/r/2fauth/2fauth"], "Keywords": ["2fauth", ["Cloud", "Security", "Tools-Utilities", "Network-Web"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"app_key": {"value": "4FCXdQ6E9fdA44C94FgT9ob9SwvxiTyk", "Name": "APP_KEY", "Target": "APP_KEY", "Default": "", "Mode": "", "Description": "Random 32-chars phrase.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "redis_host": {"value": "", "Name": "REDIS_HOST", "Target": "REDIS_HOST", "Default": "", "Mode": "", "Description": "Redis server IP (i.e.: 192.168.1.100)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "redis_port": {"value": "", "Name": "REDIS_PORT", "Target": "REDIS_PORT", "Default": "", "Mode": "", "Description": "Redis server port (i.e.: 6379)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "redis_password": {"value": "null", "Name": "REDIS_PASSWORD", "Target": "REDIS_PASSWORD", "Default": "", "Mode": "", "Description": "Redis server password (default: null)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "app_name": {"value": "2FAuth (unRAID)", "Name": "APP_NAME", "Target": "APP_NAME", "Default": "", "Mode": "", "Description": "Name of the app (tab name).", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "app_debug": {"value": "true", "Name": "APP_DEBUG", "Target": "APP_DEBUG", "Default": "", "Mode": "", "Description": "Show debug information in error logs (true/false).", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "app_log_level": {"value": "notice", "Name": "APP_LOG_LEVEL", "Target": "APP_LOG_LEVEL", "Default": "", "Mode": "", "Description": "Log level (debug/info/notice/warning/error/critical/alert/emergency)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"storage(config)": {"value": "/mnt/user/appdata/2fauth/", "Name": "Storage (config)", "Target": "/2fauth", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8000", "Name": "WebUI", "Target": "8000", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "admidio": {"Name": "admidio", "Repository": "admidio/admidio", "Registry": "https://hub.docker.com/r/admidio/admidio", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:8080]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/admidio2.png", "PostArgs": "", "Requires": "MySQL, PostgreSQL", "Official": true, "CategoryList": ["Productivity", "Tools-Utilities"], "Sources": ["https://github.com/Admidio/admidio", "https://hub.docker.com/r/admidio/admidio"], "Keywords": ["admidio", ["Productivity", "Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"admidio_login_for_update": {"value": "1", "Name": "ADMIDIO_LOGIN_FOR_UPDATE", "Target": "ADMIDIO_LOGIN_FOR_UPDATE", "Default": "1|0", "Mode": "", "Description": "Ensures that a database update can only be carried out on a new Admidio version, if an administrator has given his credentials in the update script.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"storage(config)": {"value": "/mnt/user/appdata/admidio/config", "Name": "Storage (config)", "Target": "/opt/app-root/src/adm_my_files", "Default": "", "Mode": "rw", "Description": "This is the location for the config files and data uploads.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(themes)": {"value": "/mnt/user/appdata/admidio/themes", "Name": "Storage (themes)", "Target": "/opt/app-root/src/adm_themes", "Default": "", "Mode": "rw", "Description": "This is the location for the themes.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(plugins)": {"value": "/mnt/user/appdata/admidio/plugins", "Name": "Storage (plugins)", "Target": "/opt/app-root/src/adm_plugins", "Default": "", "Mode": "rw", "Description": "This is the location for the plugins.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8044", "Name": "WebUI", "Target": "8080", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "cryptgeon": {"Name": "cryptgeon", "Repository": "cupcakearmy/cryptgeon", "Registry": "https://hub.docker.com/r/cupcakearmy/cryptgeon", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:5000]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/cryptgeon.png", "PostArgs": "", "Requires": "\u2022 Memcached \r<br>\u2022 HTTPS certificate (NPM/Nginx)", "CategoryList": ["Cloud", "Productivity", "Security", "Tools-Utilities", "Network-Web", "Network-Messenger"], "Sources": ["https://github.com/cupcakearmy/cryptgeon", "https://hub.docker.com/r/cupcakearmy/cryptgeon"], "Keywords": ["cryptgeon", ["Cloud", "Productivity", "Security", "Tools-Utilities", "Network-Web", "Network-Messenger"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"memcache": {"value": "ip_server:11211", "Name": "MEMCACHE", "Target": "MEMCACHE", "Default": "", "Mode": "", "Description": "Memcached connection (ip_server:port)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "size_limit": {"value": "1KiB", "Name": "SIZE_LIMIT", "Target": "SIZE_LIMIT", "Default": "", "Mode": "", "Description": "Max size body (default: 1kiB)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webui": {"value": "5000", "Name": "WebUI", "Target": "5000", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "gerbera": {"Name": "gerbera", "Repository": "gerbera/gerbera", "Registry": "https://hub.docker.com/r/gerbera/gerbera", "Network": "host", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:49494]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/gerbera_200x200.png", "PostArgs": "", "Requires": " App uses hostnetworking (autoadd)", "Official": true, "CategoryList": ["Tools-Utilities", "MediaServer-Video", "MediaServer-Music", "MediaServer-Other"], "Sources": ["https://github.com/gerbera/gerbera", "https://hub.docker.com/r/gerbera/gerbera"], "Keywords": ["gerbera", ["Tools-Utilities", "MediaServer-Video", "MediaServer-Music", "MediaServer-Other"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"storage(media)": {"value": "", "Name": "Storage (media)", "Target": "/content", "Default": "", "Mode": "ro", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "app'sdata": {"value": "/mnt/user/appdata/gerbera", "Name": "App's Data", "Target": "/var/run/gerbera", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Port": {"port(webui)": {"value": "49494", "Name": "Port (WebUI)", "Target": "49494", "Default": "49494", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}, "port(ssdpmulticast)": {"value": "1900", "Name": "Port (SSDP Multicast)", "Target": "1900", "Default": "1900", "Mode": "udp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "logicaldoc-ce": {"Name": "logicaldoc-ce", "Repository": "logicaldoc/logicaldoc-ce", "Registry": "https://hub.docker.com/r/logicaldoc/logicaldoc-ce", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:8080]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/logicaldoc-ce_200x200.png", "PostArgs": "", "Requires": "- External DB (MySQL, MariaDB, PosgreSQL, MSSQL or Oracle)", "CategoryList": ["Productivity"], "Sources": ["https://github.com/logicaldoc/logicaldoc-ce", "https://hub.docker.com/r/logicaldoc/logicaldoc-ce"], "Keywords": ["logicaldoc-ce", ["Productivity"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"database(host)": {"value": "", "Name": "Database (host)", "Target": "DB_HOST", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database(port)": {"value": "", "Name": "Database (port)", "Target": "DB_PORT", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database(user)": {"value": "", "Name": "Database (user)", "Target": "DB_USER", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database(pass)": {"value": "", "Name": "Database (pass)", "Target": "DB_PASSWORD", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"directory(config)": {"value": "/mnt/user/appdata/logicaldoc-ce/config", "Name": "Directory (config)", "Target": "/opt/logicaldoc/conf", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "advanced", "Required": "false", "Mask": "false"}, "directory(repository)": {"value": "/mnt/user/appdata/logicaldoc-ce/repository", "Name": "Directory (repository)", "Target": "/opt/logicaldoc/repository", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8080", "Name": "WebUI", "Target": "8080", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "passbolt-ce": {"Name": "passbolt-ce", "Repository": "passbolt/passbolt", "Registry": "https://hub.docker.com/r/passbolt/passbolt/", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "https://[IP]:[PORT:443]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/passbolt.png", "PostArgs": "", "Requires": "Database (MariaDB, MySQL)", "CategoryList": ["Productivity", "Security", "Tools-Utilities"], "Sources": ["https://github.com/passbolt/passbolt_docker", "https://hub.docker.com/r/passbolt/passbolt/"], "Keywords": ["passbolt-ce", ["Productivity", "Security", "Tools-Utilities"]], "Tag": "latest-ce", "Config": {"Device": {}, "Label": {}, "Variable": {"datasources_default_host": {"value": "", "Name": "DATASOURCES_DEFAULT_HOST", "Target": "DATASOURCES_DEFAULT_HOST", "Default": "", "Mode": "", "Description": "This is the database host ip.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_port": {"value": "", "Name": "DATASOURCES_DEFAULT_PORT", "Target": "DATASOURCES_DEFAULT_PORT", "Default": "", "Mode": "", "Description": "This is the database port.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_database": {"value": "", "Name": "DATASOURCES_DEFAULT_DATABASE", "Target": "DATASOURCES_DEFAULT_DATABASE", "Default": "", "Mode": "", "Description": "This is the database name.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_password": {"value": "", "Name": "DATASOURCES_DEFAULT_PASSWORD", "Target": "DATASOURCES_DEFAULT_PASSWORD", "Default": "", "Mode": "", "Description": "This is the database password.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_username": {"value": "", "Name": "DATASOURCES_DEFAULT_USERNAME", "Target": "DATASOURCES_DEFAULT_USERNAME", "Default": "", "Mode": "", "Description": "This is the database username.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "app_full_base_url": {"value": "https://HOST_IP:PORT", "Name": "APP_FULL_BASE_URL", "Target": "APP_FULL_BASE_URL", "Default": "", "Mode": "", "Description": "This is the base URL used when creating new user on first launch (terminal). Make sure it matches with your container (ip and port).", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"storage(data)[1]": {"value": "/mnt/user/appdata/passbolt-ce/gpg", "Name": "Storage (data) [1]", "Target": "/etc/passbolt/gpg", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(data)[2]": {"value": "/mnt/user/appdata/passbolt-ce/jwt", "Name": "Storage (data) [2]", "Target": "/etc/passbolt/jwt", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8080", "Name": "WebUI", "Target": "443", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "passbolt-pro": {"Name": "passbolt-pro", "Repository": "passbolt/passbolt", "Registry": "https://hub.docker.com/r/passbolt/passbolt/", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "https://[IP]:[PORT:443]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/passbolt.png", "PostArgs": "", "Requires": "Database (MariaDB, MySQL)", "CategoryList": ["Productivity", "Security", "Tools-Utilities"], "Sources": ["https://github.com/passbolt/passbolt_docker", "https://hub.docker.com/r/passbolt/passbolt/"], "Keywords": ["passbolt-pro", ["Productivity", "Security", "Tools-Utilities"]], "Tag": "latest-pro", "Config": {"Device": {}, "Label": {}, "Variable": {"datasources_default_host": {"value": "", "Name": "DATASOURCES_DEFAULT_HOST", "Target": "DATASOURCES_DEFAULT_HOST", "Default": "", "Mode": "", "Description": "This is the database host ip.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_port": {"value": "", "Name": "DATASOURCES_DEFAULT_PORT", "Target": "DATASOURCES_DEFAULT_PORT", "Default": "", "Mode": "", "Description": "This is the database port.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_database": {"value": "", "Name": "DATASOURCES_DEFAULT_DATABASE", "Target": "DATASOURCES_DEFAULT_DATABASE", "Default": "", "Mode": "", "Description": "This is the database name.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_password": {"value": "", "Name": "DATASOURCES_DEFAULT_PASSWORD", "Target": "DATASOURCES_DEFAULT_PASSWORD", "Default": "", "Mode": "", "Description": "This is the database password.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "datasources_default_username": {"value": "", "Name": "DATASOURCES_DEFAULT_USERNAME", "Target": "DATASOURCES_DEFAULT_USERNAME", "Default": "", "Mode": "", "Description": "This is the database username.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "app_full_base_url": {"value": "https://HOST_IP:PORT", "Name": "APP_FULL_BASE_URL", "Target": "APP_FULL_BASE_URL", "Default": "", "Mode": "", "Description": "This is the base URL used when creating new user on first launch (terminal). Make sure it matches with your container (ip and port).", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"storage(data)[1]": {"value": "/mnt/user/appdata/passbolt/gpg", "Name": "Storage (data) [1]", "Target": "/etc/passbolt/gpg", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(data)[2]": {"value": "/mnt/user/appdata/passbolt/jwt", "Name": "Storage (data) [2]", "Target": "/etc/passbolt/jwt", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(key)": {"value": "/mnt/user/appdata/passbolt-pro/key/subscription_key.txt", "Name": "Storage (key)", "Target": "/etc/passbolt/subscription_key.txt", "Default": "", "Mode": "ro", "Description": "This is your paid subscription key.", "Type": "Path", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8080", "Name": "WebUI", "Target": "443", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "pastefy": {"Name": "pastefy", "Repository": "interaapps/pastefy", "Registry": "https://hub.docker.com/r/interaapps/pastefy", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:80]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/pastefy.png", "PostArgs": "", "Requires": "MySQL", "CategoryList": ["Cloud", "Productivity", "Tools-Utilities"], "Sources": ["https://github.com/interaapps/pastefy", "https://hub.docker.com/r/interaapps/pastefy"], "Keywords": ["pastefy", ["Cloud", "Productivity", "Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"database_driver": {"value": "mysql", "Name": "DATABASE_DRIVER", "Target": "DATABASE_DRIVER", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database_name": {"value": "", "Name": "DATABASE_NAME", "Target": "DATABASE_NAME", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database_user": {"value": "", "Name": "DATABASE_USER", "Target": "DATABASE_USER", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database_password": {"value": "", "Name": "DATABASE_PASSWORD", "Target": "DATABASE_PASSWORD", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database_host": {"value": "", "Name": "DATABASE_HOST", "Target": "DATABASE_HOST", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "database_port": {"value": "", "Name": "DATABASE_PORT", "Target": "DATABASE_PORT", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "http_server_cors": {"value": "\"*\"", "Name": "HTTP_SERVER_CORS", "Target": "HTTP_SERVER_CORS", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "auth_provider": {"value": "NONE", "Name": "AUTH_PROVIDER", "Target": "AUTH_PROVIDER", "Default": "", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webui": {"value": "9999", "Name": "WebUI", "Target": "80", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "sharry": {"Name": "sharry", "Repository": "eikek0/sharry", "Registry": "https://hub.docker.com/r/eikek0/sharry", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:9090]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/sharry2.png", "PostArgs": "-- /opt/sharry.conf", "Requires": "External DB (PostgreSQL, MariaDB/MySQL)", "CategoryList": ["Cloud", "Productivity", "Tools-Utilities", "Network-Web"], "Sources": ["https://github.com/eikek/sharry", "https://hub.docker.com/r/eikek0/sharry"], "Keywords": ["sharry", ["Cloud", "Productivity", "Tools-Utilities", "Network-Web"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"configfile": {"value": "/mnt/user/appdata/sharry/sharry.conf", "Name": "Config File", "Target": "/opt/sharry.conf", "Default": "", "Mode": "ro", "Description": "This is where Sharry will read the configuration from the Host.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "9090", "Name": "WebUI", "Target": "9090", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "void": {"Name": "void", "Repository": "alphanecron/void", "Registry": "https://hub.docker.com/r/alphanecron/void", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:3000]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/void.png", "PostArgs": "", "Requires": "PostgreSQL", "CategoryList": ["Cloud", "Productivity", "Tools-Utilities", "Network-FTP"], "Sources": ["https://github.com/AlphaNecron/Void/", "https://hub.docker.com/r/alphanecron/void"], "Keywords": ["void", ["Cloud", "Productivity", "Tools-Utilities", "Network-FTP"]], "Tag": "v0", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"storage(uploads)": {"value": "/mnt/user/appdata/void/uploads", "Name": "Storage (uploads)", "Target": "/void/uploads", "Default": "", "Mode": "rw", "Description": "This is the location for the uploaded files.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(public)": {"value": "/mnt/user/appdata/void/public", "Name": "Storage (public)", "Target": "/void/public", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(configfile)": {"value": "/mnt/user/appdata/void/config/config.toml", "Name": "Storage (config file)", "Target": "/void/config.toml", "Default": "", "Mode": "ro", "Description": "This is the configuration file.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "3000", "Name": "WebUI", "Target": "3000", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "whatsapp-analyzer": {"Name": "whatsapp-analyzer", "Repository": "dineshkarthik/whatsapp-analyzer", "Registry": "https://hub.docker.com/r/dineshkarthik/whatsapp-analyzer", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:5000]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/whatsapp-analyzer_200x200.png", "PostArgs": "", "Requires": "- Python 3.6+ (host)", "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/Dineshkarthik/Whatsapp-analyzer", "https://hub.docker.com/r/dineshkarthik/whatsapp-analyzer"], "Keywords": ["whatsapp-analyzer", ["Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {}, "Port": {}}}, "zipline": {"Name": "zipline", "Repository": "diced/zipline", "Registry": "https://hub.docker.com/r/diced/zipline", "Network": "bridge", "Privileged": "false", "Overview": "DESCRIPTION\r\n", "WebUI": "http://[IP]:[PORT:3000]", "Icon": "https://raw.githubusercontent.com/SmartPhoneLover/unraid-docker-templates/main/templates/icons/zipline.png", "PostArgs": "", "Requires": "PostgreSQL (database)", "CategoryList": ["Cloud", "Productivity", "Tools-Utilities", "Network-FTP"], "Sources": ["https://github.com/diced/zipline", "https://hub.docker.com/r/diced/zipline"], "Keywords": ["zipline", ["Cloud", "Productivity", "Tools-Utilities", "Network-FTP"]], "Tag": "trunk", "Config": {"Device": {}, "Label": {}, "Variable": {"secure": {"value": "false", "Name": "SECURE", "Target": "SECURE", "Default": "false|true", "Mode": "", "Description": "Whether or not to use https or not.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "secret": {"value": "", "Name": "SECRET", "Target": "SECRET", "Default": "", "Mode": "", "Description": "Key string used for securing HTTPs connection. Generate your own string.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "true"}, "database_url": {"value": "postgresql://USER:PASS@HOST_IP:PORT/DB_NAME", "Name": "DATABASE_URL", "Target": "DATABASE_URL", "Default": "", "Mode": "", "Description": "Database URL.", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "uploader_route": {"value": "/u", "Name": "UPLOADER_ROUTE", "Target": "UPLOADER_ROUTE", "Default": "", "Mode": "", "Description": "Which route uploads should be served on.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_embed_route": {"value": "/a", "Name": "UPLOADER_EMBED_ROUTE", "Target": "UPLOADER_EMBED_ROUTE", "Default": "", "Mode": "", "Description": "Which route embed routes should be accessed via.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_length": {"value": "6", "Name": "UPLOADER_LENGTH", "Target": "UPLOADER_LENGTH", "Default": "", "Mode": "", "Description": "Length of randomly generated characters for uploads.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_directory": {"value": "./uploads", "Name": "UPLOADER_DIRECTORY", "Target": "UPLOADER_DIRECTORY", "Default": "", "Mode": "", "Description": "Which directory uploads should be stored to. (container's path)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_admin_limit": {"value": "104900000", "Name": "UPLOADER_ADMIN_LIMIT", "Target": "UPLOADER_ADMIN_LIMIT", "Default": "", "Mode": "", "Description": "File size limit for administrators. (bytes)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_user_limit": {"value": "104900000", "Name": "UPLOADER_USER_LIMIT", "Target": "UPLOADER_USER_LIMIT", "Default": "", "Mode": "", "Description": "File size limit for normal users. (bytes)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "uploader_disabled_exts": {"value": "rar,zip", "Name": "UPLOADER_DISABLED_EXTS", "Target": "UPLOADER_DISABLED_EXTS", "Default": "", "Mode": "", "Description": "An array of disabled extensions to be blocked when uploading files. (comma separated)", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "urls_route": {"value": "/go", "Name": "URLS_ROUTE", "Target": "URLS_ROUTE", "Default": "", "Mode": "", "Description": "Which route urls should be served on.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "urls_length": {"value": "6", "Name": "URLS_LENGTH", "Target": "URLS_LENGTH", "Default": "", "Mode": "", "Description": "Length of randomly generated characters for urls.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"storage(uploads)": {"value": "/mnt/user/appdata/zipline/uploads", "Name": "Storage (uploads)", "Target": "/zipline/uploads", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "storage(public)": {"value": "/mnt/user/appdata/zipline/public", "Name": "Storage (public)", "Target": "/zipline/public", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webui": {"value": "8095", "Name": "WebUI", "Target": "3000", "Default": "", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "myst": {"Name": "myst", "Repository": "mysteriumnetwork/myst", "Registry": "https://hub.docker.com/r/mysteriumnetwork/myst/", "Network": "host", "Privileged": "false", "Overview": "Mysterium Node - decentralized VPN built on blockchain\r\n", "WebUI": "http://[IP]:[PORT:4449]", "Icon": "https://raw.githubusercontent.com/locus313/unraid-docker-templates/main/templates/img/myst.png", "ExtraParams": "--device=/dev/net/tun --cap-add NET_ADMIN", "PostArgs": "service --agreed-terms-and-conditions", "CategoryList": ["Network-VPN"], "Sources": ["https://github.com/mysteriumnetwork/node", "https://hub.docker.com/r/mysteriumnetwork/myst/"], "Keywords": ["myst", ["Network-VPN"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {}, "Path": {"mystconfig": {"value": "/mnt/user/appdata/myst/", "Name": "Myst Config", "Target": "/var/lib/mysterium-node", "Default": "", "Mode": "rw", "Description": "Container Path: /var/lib/mysterium-node", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}}, "Port": {"webuiport": {"value": "", "Name": "WebUI Port", "Target": "4449", "Default": "4449", "Mode": "tcp", "Description": "Container Port: 4449", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "networkmanager": {"Name": "networkmanager", "Repository": "sander0542/network-manager", "Registry": "https://hub.docker.com/r/sander0542/network-manager", "Network": "bridge", "Privileged": "false", "Overview": "With this Docker you can manage the used hosts in your networks. It supports multiple networks based on their subnet and size. Within each host you can specify the ports that are used and the services that are running on them.", "Beta": "true", "Requires": "MySQL", "WebUI": "http://[IP]:[PORT:9000]", "Icon": "https://raw.githubusercontent.com/Sander0542/docker-templates/main/sander0542/icons/NetworkManager.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Productivity", "Tools-Utilities"], "Sources": ["https://github.com/Sander0542/Network-Manager", "https://hub.docker.com/r/sander0542/network-manager"], "Keywords": ["networkmanager", ["Productivity", "Tools-Utilities"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"applicationkey": {"value": "", "Name": "Application Key", "Target": "APP_KEY", "Default": "", "Mode": "", "Description": "The key used to secure data. (random string of 32 characters [a-zA-Z0-9])", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasehost": {"value": "127.0.0.1", "Name": "Database Host", "Target": "DB_HOST", "Default": "127.0.0.1", "Mode": "", "Description": "Container Variable: DB_HOST", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "databaseport": {"value": "3306", "Name": "Database Port", "Target": "DB_PORT", "Default": "3306", "Mode": "", "Description": "Container Variable: DB_PORT", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "databaseusername": {"value": "root", "Name": "Database Username", "Target": "DB_USERNAME", "Default": "root", "Mode": "", "Description": "Container Variable: DB_USERNAME", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "databasepassword": {"value": "", "Name": "Database Password", "Target": "DB_PASSWORD", "Default": "", "Mode": "", "Description": "Container Variable: DB_PASSWORD", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "true"}, "databasedatabase": {"value": "network_manager", "Name": "Database Database", "Target": "DB_DATABASE", "Default": "network_manager", "Mode": "", "Description": "Container Variable: DB_DATABASE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "https": {"value": "false", "Name": "HTTPS", "Target": "OCTANE_HTTPS", "Default": "false|true", "Mode": "", "Description": "Whether the webserver should generate HTTPS links instead of HTTP links. (Set this to true when running behind a HTTPS proxy)", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {}, "Port": {"webport": {"value": "9000", "Name": "Web Port", "Target": "9000", "Default": "9000", "Mode": "tcp", "Description": "The port used for the HTTP service", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-opendct": {"Name": "sagetvopen-sagetv-opendct", "Repository": "sagetvopen/sagetv-opendct", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-opendct/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "An open source digital cable tuner network encoder for SageTV\r", "WebUI": "http://[IP]:[PORT:9091]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaServer-Video"], "Sources": ["https://github.com/enternoescape/opendct", "https://hub.docker.com/r/sagetvopen/sagetv-opendct/"], "Keywords": ["sagetvopen-sagetv-opendct", ["MediaServer-Video"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"opendctversion": {"value": "latest", "Name": "OpenDCT Version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "OpenDCT Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}}, "Path": {"opendctconfiguration": {"value": "/mnt/user/appdata/opendct/etc", "Name": "OpenDCT Configuration", "Target": "/etc/opendct", "Default": "/mnt/user/appdata/opendct/etc", "Mode": "rw", "Description": "Configuration", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendctlog": {"value": "/mnt/user/appdata/opendct/log", "Name": "OpenDCT Log", "Target": "/var/log/opendct", "Default": "/mnt/user/appdata/opendct/log", "Mode": "rw", "Description": "Log", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendcthome": {"value": "/mnt/user/appdata/opendct/opt", "Name": "OpenDCT Home", "Target": "/opt/opendct", "Default": "/mnt/user/appdata/opendct/opt", "Mode": "rw", "Description": "OpenDCT Home", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"opendctwebui": {"value": "9091", "Name": "OpenDCT WebUI", "Target": "9091", "Default": "9091", "Mode": "tcp", "Description": "OpenDCT WebUI Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-java8": {"Name": "sagetvopen-sagetv-server-java8", "Repository": "sagetvopen/sagetv-server-java8", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-java8/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-java8/"], "Keywords": ["sagetvopen-sagetv-server-java8", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-java11": {"Name": "sagetvopen-sagetv-server-java11", "Repository": "sagetvopen/sagetv-server-java11", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-java11/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-java11/"], "Keywords": ["sagetvopen-sagetv-server-java11", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-java16": {"Name": "sagetvopen-sagetv-server-java16", "Repository": "sagetvopen/sagetv-server-java16", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-java16/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-java16/"], "Keywords": ["sagetvopen-sagetv-server-java16", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-opendct-java8": {"Name": "sagetvopen-sagetv-server-opendct-java8", "Repository": "sagetvopen/sagetv-server-opendct-java8", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java8/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java8/"], "Keywords": ["sagetvopen-sagetv-server-opendct-java8", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "opendctversion": {"value": "latest", "Name": "OpenDCT Version", "Target": "OPENDCT_VERSION", "Default": "latest", "Mode": "", "Description": "OpenDCT Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "opendctconfiguration": {"value": "/mnt/user/appdata/opendct/etc", "Name": "OpenDCT Configuration", "Target": "/etc/opendct", "Default": "/mnt/user/appdata/opendct/etc", "Mode": "rw", "Description": "Configuration", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendctlog": {"value": "/mnt/user/appdata/opendct/log", "Name": "OpenDCT Log", "Target": "/var/log/opendct", "Default": "/mnt/user/appdata/opendct/log", "Mode": "rw", "Description": "Log", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendcthome": {"value": "/mnt/user/appdata/opendct/opt", "Name": "OpenDCT Home", "Target": "/opt/opendct", "Default": "/mnt/user/appdata/opendct/opt", "Mode": "rw", "Description": "OpenDCT Home", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "opendctwebui": {"value": "9091", "Name": "OpenDCT WebUI", "Target": "9091", "Default": "9091", "Mode": "tcp", "Description": "OpenDCT WebUI Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-opendct-java11": {"Name": "sagetvopen-sagetv-server-opendct-java11", "Repository": "sagetvopen/sagetv-server-opendct-java11", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java11/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java11/"], "Keywords": ["sagetvopen-sagetv-server-opendct-java11", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "opendctversion": {"value": "latest", "Name": "OpenDCT Version", "Target": "OPENDCT_VERSION", "Default": "latest", "Mode": "", "Description": "OpenDCT Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "opendctconfiguration": {"value": "/mnt/user/appdata/opendct/etc", "Name": "OpenDCT Configuration", "Target": "/etc/opendct", "Default": "/mnt/user/appdata/opendct/etc", "Mode": "rw", "Description": "Configuration", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendctlog": {"value": "/mnt/user/appdata/opendct/log", "Name": "OpenDCT Log", "Target": "/var/log/opendct", "Default": "/mnt/user/appdata/opendct/log", "Mode": "rw", "Description": "Log", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendcthome": {"value": "/mnt/user/appdata/opendct/opt", "Name": "OpenDCT Home", "Target": "/opt/opendct", "Default": "/mnt/user/appdata/opendct/opt", "Mode": "rw", "Description": "OpenDCT Home", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "opendctwebui": {"value": "9091", "Name": "OpenDCT WebUI", "Target": "9091", "Default": "9091", "Mode": "tcp", "Description": "OpenDCT WebUI Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "sagetvopen-sagetv-server-opendct-java16": {"Name": "sagetvopen-sagetv-server-opendct-java16", "Repository": "sagetvopen/sagetv-server-opendct-java16", "Registry": "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java16/", "GitHub": "https://github.com/OpenSageTV/sagetv-dockers/tree/master/unRAID/sagetvopen-sagetv/", "Network": "host", "Privileged": "true", "Overview": "SageTV is an Open Source PVR and Media Player\r", "WebUI": "http://[IP]:[PORT:8080]/", "Icon": "https://raw.githubusercontent.com/OpenSageTV/sagetv-dockers/master/resources/SageTVOS_icon.png", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"], "Sources": ["https://github.com/google/sagetv", "https://hub.docker.com/r/sagetvopen/sagetv-server-opendct-java16/"], "Keywords": ["sagetvopen-sagetv-server-opendct-java16", ["MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"sagetvversion": {"value": "latest", "Name": "SageTV version", "Target": "VERSION", "Default": "latest", "Mode": "", "Description": "SageTV Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "opendctversion": {"value": "latest", "Name": "OpenDCT Version", "Target": "OPENDCT_VERSION", "Default": "latest", "Mode": "", "Description": "OpenDCT Version", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "jvmmemory": {"value": "1024", "Name": "JVM Memory", "Target": "JAVA_MEM_MB", "Default": "1024", "Mode": "", "Description": "Java Memory in MB", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "licensekey": {"value": "", "Name": "License Key", "Target": "LICENCE_DATA", "Default": "", "Mode": "", "Description": "SageTV License Key", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installgentuner": {"value": "Y", "Name": "Install Gentuner", "Target": "OPT_GENTUNER", "Default": "Y", "Mode": "", "Description": "Install Gentuner Plugin", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installcommandir": {"value": "N", "Name": "Install CommandIR", "Target": "OPT_COMMANDIR", "Default": "N", "Mode": "", "Description": "Install CommandIR files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "installnativecomskip": {"value": "Y", "Name": "Install Native Comskip", "Target": "OPT_COMSKIP", "Default": "Y", "Mode": "", "Description": "Install native comskip files", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "setpermissions": {"value": "Y", "Name": "Set permissions", "Target": "OPT_SETPERMS", "Default": "Y", "Mode": "", "Description": "Set permissions on startup", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "enablelirc": {"value": "N", "Name": "Enable LIRC", "Target": "OPT_LIRC", "Default": "N", "Mode": "", "Description": "Enable LIRC Daemon with Configuration from SageTV lirc.d Directory", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}}, "Path": {"sagetvappdatapath": {"value": "/mnt/user/appdata/sagetv/", "Name": "SageTV Appdata Path", "Target": "/opt/sagetv", "Default": "/mnt/user/appdata/sagetv/", "Mode": "rw", "Description": "SageTV base directory", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "mediapath": {"value": "/mnt/user/sagemedia/", "Name": "Media Path", "Target": "/var/media", "Default": "/mnt/user/media/sagetv/", "Mode": "rw", "Description": "SageTV Media Directory (for recordings, etc)", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "extramediapath": {"value": "/mnt/user/media/videos/", "Name": "Extra Media Path", "Target": "/var/mediaext", "Default": "/mnt/user/media/videos/", "Mode": "rw", "Description": "SageTV videos directory for other imported video files", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "unraidsharepath": {"value": "/mnt/user", "Name": "unRAID Share Path", "Target": "/unraid", "Default": "/mnt/user", "Mode": "rw", "Description": "Container Path: /unraid", "Type": "Path", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "opendctconfiguration": {"value": "/mnt/user/appdata/opendct/etc", "Name": "OpenDCT Configuration", "Target": "/etc/opendct", "Default": "/mnt/user/appdata/opendct/etc", "Mode": "rw", "Description": "Configuration", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendctlog": {"value": "/mnt/user/appdata/opendct/log", "Name": "OpenDCT Log", "Target": "/var/log/opendct", "Default": "/mnt/user/appdata/opendct/log", "Mode": "rw", "Description": "Log", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "opendcthome": {"value": "/mnt/user/appdata/opendct/opt", "Name": "OpenDCT Home", "Target": "/opt/opendct", "Default": "/mnt/user/appdata/opendct/opt", "Mode": "rw", "Description": "OpenDCT Home", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"sagetvwebui": {"value": "8080", "Name": "SageTV WebUI", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "SageTV WebServer Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "opendctwebui": {"value": "9091", "Name": "OpenDCT WebUI", "Target": "9091", "Default": "9091", "Mode": "tcp", "Description": "OpenDCT WebUI Port", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "port2": {"value": "42024", "Name": "Port 2", "Target": "42024", "Default": "42024", "Mode": "tcp", "Description": "Container Port: 42024", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port3": {"value": "7818", "Name": "Port 3", "Target": "7818", "Default": "7818", "Mode": "tcp", "Description": "Container Port: 7818", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port4": {"value": "8270", "Name": "Port 4", "Target": "8270", "Default": "8270", "Mode": "udp", "Description": "Container Port: 8270", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port5": {"value": "31100", "Name": "Port 5", "Target": "31100", "Default": "31100", "Mode": "udp", "Description": "Container Port: 31100", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port6": {"value": "31099", "Name": "Port 6", "Target": "31099", "Default": "31099", "Mode": "tcp", "Description": "Container Port: 31099", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port7": {"value": "16867", "Name": "Port 7", "Target": "16867", "Default": "16867", "Mode": "udp", "Description": "Container Port: 16867", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port8": {"value": "16869", "Name": "Port 8", "Target": "16869", "Default": "16869", "Mode": "udp", "Description": "Container Port: 16869", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "port9": {"value": "16881", "Name": "Port 9", "Target": "16881", "Default": "16881", "Mode": "tcp", "Description": "Container Port: 16881", "Type": "Port", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}}}, "prometheus-qbittorrent-exporter": {"Name": "prometheus-qbittorrent-exporter", "Repository": "esanchezm/prometheus-qbittorrent-exporter", "Registry": "https://hub.docker.com/r/esanchezm/prometheus-qbittorrent-exporter/", "Network": "bridge", "Privileged": "false", "Overview": "Get metrics from a qBittorrent server and offers them in a prometheus format.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/MasterEvarior/unraid-templates/main/prometheus-qbittorrent-exporter/prometheus.png", "PostArgs": "", "Networking": {"Mode": "bridge"}, "CategoryList": ["Tools-Utilities"], "Sources": ["https://github.com/esanchezm/prometheus-qbittorrent-exporter", "https://hub.docker.com/r/esanchezm/prometheus-qbittorrent-exporter/"], "Keywords": ["prometheus-qbittorrent-exporter", ["Tools-Utilities"]], "Requires": " exporter app (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"qbittorrentport": {"value": "", "Name": "qBittorrent Port", "Target": "QBITTORRENT_PORT", "Default": "", "Mode": "", "Description": "Port of your qBittorrent instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "qbittorrenthost": {"value": "", "Name": "qBittorrent Host", "Target": "QBITTORRENT_HOST", "Default": "", "Mode": "", "Description": "Hostname/IP of your qBittorrent instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "qbittorrentuser": {"value": "", "Name": "qBittorrent User", "Target": "QBITTORRENT_USER", "Default": "", "Mode": "", "Description": "Username to your qBittorrent instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "qbittorrentpassword": {"value": "", "Name": "qBittorrent Password", "Target": "QBITTORRENT_PASS", "Default": "", "Mode": "", "Description": "Password to your qBittorrent instance", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {}, "Port": {"hostport1": {"value": "", "Name": "Host Port 1", "Target": "8000", "Default": "", "Mode": "tcp", "Description": "Container Port: 8000", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "elastiflow": {"Name": "elastiflow", "Repository": "elastiflow/flow-collector", "Registry": "https://registry.hub.docker.com/r/elastiflow/flow-collector", "Network": "host", "Privileged": "false", "Overview": "ElastiFlow\u2122 provides deep insights into your network traffic, for increased performance and security.\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/qubex22/unraid-templates/main/elastiflow/elastiflow.png", "PostArgs": "", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["Network-Management"], "Sources": ["https://www.elastiflow.com/", "https://registry.hub.docker.com/r/elastiflow/flow-collector"], "Keywords": ["elastiflow", ["Network-Management"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "5.3.4", "Config": {"Device": {}, "Label": {}, "Variable": {"ef_flow_server_udp_ip": {"value": "0.0.0.0", "Name": "EF_FLOW_SERVER_UDP_IP", "Target": "EF_FLOW_SERVER_UDP_IP", "Default": "0.0.0.0", "Mode": "", "Description": "Container Variable: EF_FLOW_SERVER_UDP_IP", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ef_flow_server_udp_port": {"value": "9995", "Name": "EF_FLOW_SERVER_UDP_PORT", "Target": "EF_FLOW_SERVER_UDP_PORT", "Default": "9995", "Mode": "", "Description": "Container Variable: EF_FLOW_SERVER_UDP_PORT", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "ef_flow_decoder_enrich_ipaddr_metadata_enable": {"value": "false", "Name": "EF_FLOW_DECODER_ENRICH_IPADDR_METADATA_ENABLE", "Target": "EF_FLOW_DECODER_ENRICH_IPADDR_METADATA_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_IPADDR_METADATA_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_dns_nameserver_ip": {"value": "1.1.1.1", "Name": "EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_IP", "Target": "EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_IP", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_IP", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_dns_nameserver_timeout": {"value": "3000", "Name": "EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_TIMEOUT", "Target": "EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_TIMEOUT", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_DNS_NAMESERVER_TIMEOUT", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_maxmind_asn_enable": {"value": "false", "Name": "EF_FLOW_DECODER_ENRICH_MAXMIND_ASN_ENABLE", "Target": "EF_FLOW_DECODER_ENRICH_MAXMIND_ASN_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_MAXMIND_ASN_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_maxmind_geoip_enable": {"value": "true", "Name": "EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_ENABLE", "Target": "EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_riskiq_asn_enable": {"value": "false", "Name": "EF_FLOW_DECODER_ENRICH_RISKIQ_ASN_ENABLE", "Target": "EF_FLOW_DECODER_ENRICH_RISKIQ_ASN_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_RISKIQ_ASN_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_riskiq_threat_enable": {"value": "false", "Name": "EF_FLOW_DECODER_ENRICH_RISKIQ_THREAT_ENABLE", "Target": "EF_FLOW_DECODER_ENRICH_RISKIQ_THREAT_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_RISKIQ_THREAT_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_enable": {"value": "true", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_ENABLE", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_ecs_enable": {"value": "false", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_ECS_ENABLE", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_ECS_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_ECS_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_index_template_shards": {"value": "1", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_SHARDS", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_SHARDS", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_SHARDS", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_index_template_replicas": {"value": "0", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_REPLICAS", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_REPLICAS", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_INDEX_TEMPLATE_REPLICAS", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_addresses": {"value": "127.0.0.1:9200", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_ADDRESSES", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_ADDRESSES", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_ADDRESSES", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_tls_enable": {"value": "false", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_ENABLE", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_ENABLE", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_ENABLE", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_output_elasticsearch_tls_skip_verification": {"value": "false", "Name": "EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION", "Target": "EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_OUTPUT_ELASTICSEARCH_TLS_SKIP_VERIFICATION", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "ef_flow_decoder_enrich_maxmind_geoip_path": {"value": "/etc/elastiflow/GeoLite2-City.mmdb", "Name": "EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_PATH", "Target": "EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_PATH", "Default": "", "Mode": "", "Description": "Container Variable: EF_FLOW_DECODER_ENRICH_MAXMIND_GEOIP_PATH", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}}, "Path": {"hostpath1": {"value": "/mnt/user/appdata/elastiflow", "Name": "Host Path 1", "Target": "/etc/elastiflow", "Default": "/mnt/user/appdata/elastiflow", "Mode": "rw", "Description": "Container Path: /etc/elastiflow", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"hostport1": {"value": "9995", "Name": "Host Port 1", "Target": "9995", "Default": "9995", "Mode": "udp", "Description": "Container Port: 9995", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "channelsdvr_intel": {"Name": "channelsdvr_intel", "Overview": "The Channels DVR backend engine with Intel HW transcoding support.\n", "Repository": "timstephens24/channels-dvr", "GitHub": "https://github.com/timstephens24/channels-dvr_docker", "Registry": "https://registry.hub.docker.com/r/timstephens24/channels-dvr", "Icon": "https://github.com/timstephens24/docker-templates/raw/master/img/channels-logo.png", "WebUI": "http://[IP]:[PORT:8089]", "ExtraParams": "--device=/dev/dri --security-opt seccomp=unconfined", "PostArgs": "", "Network": "host", "Privileged": "false", "BindTime": "true", "Networking": {"Mode": "host"}, "CategoryList": ["MediaServer-Video"], "Sources": ["https://getchannels.com/dvr", "https://registry.hub.docker.com/r/timstephens24/channels-dvr"], "Keywords": ["channelsdvr_intel", ["MediaServer-Video"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"puid": {"value": "99", "Name": "PUID", "Target": "PUID", "Default": "99", "Mode": "", "Description": "PUID", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "pgid": {"value": "100", "Name": "PGID", "Target": "PGID", "Default": "100", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "tz": {"value": "America/New_York", "Name": "TZ", "Target": "TZ", "Default": "America/New_York", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"dvr": {"value": "", "Name": "DVR", "Target": "/shares/DVR", "Default": "", "Mode": "rw", "Description": "DVR Folder", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "appdata": {"value": "", "Name": "Appdata", "Target": "/channels-dvr", "Default": "/mnt/user/appdata/channels-dvr", "Mode": "rw", "Description": "Appdata", "Type": "Path", "Dislay": "always", "Required": "true", "Mask": "false"}}, "Port": {"webui": {"value": "8089", "Name": "WebUI", "Target": "8089", "Default": "8089", "Mode": "tcp", "Description": "Admin Port", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "channelsdvr_nvidia": {"Name": "channelsdvr_nvidia", "Overview": "The Channels DVR backend engine with NVIDIA HW transcoding.[br]\n", "Repository": "timstephens24/channels-dvr", "GitHub": "https://github.com/timstephens24/channels-dvr_docker", "Registry": "https://registry.hub.docker.com/r/timstephens24/channels-dvr", "Icon": "https://github.com/timstephens24/docker-templates/raw/master/img/channels-logo.png", "WebUI": "http://[IP]:[PORT:8089]", "ExtraParams": "--runtime=nvidia --security-opt seccomp=unconfined", "PostArgs": "", "Network": "host", "Privileged": "false", "BindTime": "true", "Networking": {"Mode": "host"}, "CategoryList": ["MediaServer-Video"], "Sources": ["https://getchannels.com/dvr", "https://registry.hub.docker.com/r/timstephens24/channels-dvr"], "Keywords": ["channelsdvr_nvidia", ["MediaServer-Video"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"nvidia_driver_capabilities": {"value": "compute,utility,video", "Name": "NVIDIA_DRIVER_CAPABILITIES", "Target": "NVIDIA_DRIVER_CAPABILITIES", "Default": "compute,utility,video", "Mode": "", "Description": "Container Variable: NVIDIA_DRIVER_CAPABILITIES", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "nvidia_visible_devices": {"value": "all", "Name": "NVIDIA_VISIBLE_DEVICES", "Target": "NVIDIA_VISIBLE_DEVICES", "Default": "NVIDIA_VISIBLE_DEVICES", "Mode": "", "Description": "Container Variable: NVIDIA_VISIBLE_DEVICES", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "puid": {"value": "99", "Name": "PUID", "Target": "PUID", "Default": "99", "Mode": "", "Description": "PUID", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "pgid": {"value": "100", "Name": "PGID", "Target": "PGID", "Default": "100", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "tz": {"value": "America/New_York", "Name": "TZ", "Target": "TZ", "Default": "America/New_York", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"dvr": {"value": "", "Name": "DVR", "Target": "/shares/DVR", "Default": "", "Mode": "rw", "Description": "DVR Folder", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "appdata": {"value": "", "Name": "Appdata", "Target": "/channels-dvr", "Default": "/mnt/user/appdata/channels-dvr", "Mode": "rw", "Description": "Appdata", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"webui": {"value": "8089", "Name": "WebUI", "Target": "8089", "Default": "8089", "Mode": "tcp", "Description": "Admin Port", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "geysermc": {"Name": "geysermc", "Repository": "nefald/geysermc", "Registry": "https://hub.docker.com/r/nefald/geysermc", "Network": "host", "Privileged": "false", "Overview": "GeyserMC is a translation layer to allow bedrock and pocket edition versions to play with the java edition users. You must run the minecraft server with a mod manager and the Geyser plugin. AntiCheat can ban bedrock players incorrectly, you have been warned.", "WebUI": "", "Icon": "https://raw.githubusercontent.com/simonsickle/docker-templates/1b833decd2a915f58be222f08682fef8f4a31a0b/images/geyser.png", "ExtraParams": "--restart unless-stopped", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["GameServers"], "Sources": ["https://git.nefald.fr/docker/geyser", "https://hub.docker.com/r/nefald/geysermc"], "Keywords": ["geysermc", ["GameServers"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"overwrite_config": {"value": "", "Name": "OVERWRITE_CONFIG", "Target": "OVERWRITE_CONFIG", "Default": "false", "Mode": "", "Description": "Container Variable: OVERWRITE_CONFIG", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "bedrock_motd1": {"value": "GeyserMC in Docker", "Name": "BEDROCK_MOTD1", "Target": "BEDROCK_MOTD1", "Default": "", "Mode": "", "Description": "Container Variable: BEDROCK_MOTD1", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "bedrock_motd2": {"value": "Minecraft server (GeyserMC)", "Name": "BEDROCK_MOTD2", "Target": "BEDROCK_MOTD2", "Default": "Minecraft server (GeyserMC)", "Mode": "", "Description": "Container Variable: BEDROCK_MOTD2", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "bedrock_servername": {"value": "DockerGeyserServer", "Name": "BEDROCK_SERVERNAME", "Target": "BEDROCK_SERVERNAME", "Default": "DockerGeyserServer", "Mode": "", "Description": "Container Variable: BEDROCK_SERVERNAME", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "remote_address": {"value": "", "Name": "REMOTE_ADDRESS", "Target": "REMOTE_ADDRESS", "Default": "", "Mode": "", "Description": "Address of the java server", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "remote_port": {"value": "25565", "Name": "REMOTE_PORT", "Target": "REMOTE_PORT", "Default": "25565", "Mode": "", "Description": "Port of the remote minecraft java server", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "remote_auth_type": {"value": "", "Name": "REMOTE_AUTH_TYPE", "Target": "REMOTE_AUTH_TYPE", "Default": "floodgate", "Mode": "", "Description": "The remote auth type for the java server. It must match 1:1 with the server settings. Options are: online, offline, and floodgate ", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "bedrock_address": {"value": "0.0.0.0", "Name": "BEDROCK_ADDRESS", "Target": "BEDROCK_ADDRESS", "Default": "0.0.0.0", "Mode": "", "Description": "Address to listen for bedrock connections. You should leave this alone unless you want to limit the IP that accepts these connections", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "bedrock_port": {"value": "19132", "Name": "BEDROCK_PORT", "Target": "BEDROCK_PORT", "Default": "19132", "Mode": "", "Description": "Container Variable: BEDROCK_PORT", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/geysermc", "Name": "appdata", "Target": "/data", "Default": "", "Mode": "rw", "Description": "Container Path: /data", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"gameportudp": {"value": "19132", "Name": "gameport udp", "Target": "19132", "Default": "19132", "Mode": "udp", "Description": "Container Port: 19132", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}, "gameporttcp": {"value": "19132", "Name": "gameport tcp", "Target": "19132", "Default": "19132", "Mode": "tcp", "Description": "Container Port: 19132", "Type": "Port", "Display": "advanced", "Required": "true", "Mask": "false"}}}}, "weatherflow2mqtt": {"Name": "weatherflow2mqtt", "Repository": "briis/weatherflow2mqtt", "Registry": "https://hub.docker.com/r/briis/weatherflow2mqtt", "Network": "host", "Privileged": "false", "Overview": "This project monitors the UDP socket (50222) from a WeatherFlow Hub, and publishes the data to a MQTT Server. Data is formatted in a way that, it supports the MQTT Discovery format for Home Assistant, so a sensor will created for each entity that WeatherFlow sends out, if you have MQTT Discovery enabled.\r\n", "WebUI": "", "Icon": "https://raw.githubusercontent.com/simonsickle/docker-templates/master/images/mqtt-logo.png", "ExtraParams": "--restart unless-stopped", "PostArgs": "", "Networking": {"Mode": "host"}, "CategoryList": ["HomeAutomation"], "Sources": ["https://github.com/briis/hass-weatherflow2mqtt", "https://hub.docker.com/r/briis/weatherflow2mqtt"], "Keywords": ["weatherflow2mqtt", ["HomeAutomation"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"unitsystem": {"value": "imperial ", "Name": "Unit System", "Target": "UNIT_SYSTEM", "Default": "metric", "Mode": "", "Description": "Enter imperial or metric. This will determine the unit system used when displaying the values. Default is metric", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "elevation": {"value": "", "Name": "ELEVATION", "Target": "ELEVATION", "Default": "0", "Mode": "", "Description": "Set the hight above sea level for where the station is placed. This is used when calculating some of the sensor values. Station elevation plus Device height above ground. The value has to be in meters (meters = feet * 0.3048). Default is 0", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "mqtt_host": {"value": "", "Name": "MQTT_HOST", "Target": "MQTT_HOST", "Default": "", "Mode": "", "Description": "The IP address of your mqtt server. Even though you have the MQTT Server on the same machine as this Container, don't use 127.0.0.1 as this will resolve to an IP Address inside your container. Use the external IP Address. Default value is 127.0.0.1 (Required)", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "mqtt_port": {"value": "1883", "Name": "MQTT_PORT", "Target": "MQTT_PORT", "Default": "1883", "Mode": "", "Description": "The Port for your mqtt server. Default value is 1883", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "station_id": {"value": "68196", "Name": "STATION_ID", "Target": "STATION_ID", "Default": "", "Mode": "", "Description": "Enter your Station ID for your WeatherFlow Station. Default value is blank.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "station_token": {"value": "", "Name": "STATION_TOKEN", "Target": "STATION_TOKEN", "Default": "", "Mode": "", "Description": "Enter your personal access Token to allow retrieval of data. If you don't have the token login with your account and create the token. NOTE You must own a WeatherFlow station to get this token. Default value is blank", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "forecast_interval": {"value": "30", "Name": "FORECAST_INTERVAL", "Target": "FORECAST_INTERVAL", "Default": "30", "Mode": "", "Description": "The interval in minutes, between updates of the Forecast data. Default value is 30 minutes.", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "mqtt_username": {"value": "", "Name": "MQTT_USERNAME", "Target": "MQTT_USERNAME", "Default": "", "Mode": "", "Description": "The username used to connect to the mqtt server. Leave blank to use Anonymous connection. Default value is blank", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "mqtt_password": {"value": "", "Name": "MQTT_PASSWORD", "Target": "MQTT_PASSWORD", "Default": "", "Mode": "", "Description": "The password used to connect to the mqtt server. Leave blank to use Anonymous connection. Default value is blank", "Type": "Variable", "Display": "always", "Required": "false", "Mask": "false"}, "language": {"value": "en", "Name": "Language", "Target": "LANGUAGE", "Default": "en", "Mode": "", "Description": "Use this to set the language for Wind Direction cardinals and other sensors with text strings as state value. These strings will then be displayed in HA in the selected language. \r\n\r\nCurrently these languages are supported for Wind Cardinals and other Text state strings:\r\n\r\nen: English\r\nda: Danish\r\nde: German\r\nfr: French", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "rapid_wind_interval": {"value": "0", "Name": "RAPID_WIND_INTERVAL", "Target": "RAPID_WIND_INTERVAL", "Default": "0", "Mode": "", "Description": " The weather stations delivers wind speed and bearing every 2 seconds. If you don't want to update the HA sensors so often, you can set a number here (in seconds), for how often they are updated. Default is 0, which means data are updated when received from the station.", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "wf_host": {"value": "0.0.0.0", "Name": "WF_HOST", "Target": "WF_HOST", "Default": "0.0.0.0", "Mode": "", "Description": "Unless you have a very special IP setup or the Weatherflow hub is on a different network, you should not change this. Default is 0.0.0.0", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "wf_port": {"value": "50222", "Name": "WF_PORT", "Target": "WF_PORT", "Default": "50222", "Mode": "", "Description": "Weatherflow always broadcasts on port 50222/udp, so don't change this. Default is 50222", "Type": "Variable", "Display": "advanced-hide", "Required": "false", "Mask": "false"}, "mqtt_debug": {"value": "False", "Name": "MQTT_DEBUG", "Target": "MQTT_DEBUG", "Default": "False", "Mode": "", "Description": "Set this to True, to get some more mqtt debugging messages in the Container log file. Default value is False", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}, "debug": {"value": "False", "Name": "DEBUG", "Target": "DEBUG", "Default": "False", "Mode": "", "Description": " Set this to True to enable more debug data in the Container Log. Default is False", "Type": "Variable", "Display": "advanced", "Required": "false", "Mask": "false"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/weatherflow2mqtt", "Name": "appdata", "Target": "/data", "Default": "/mnt/user/appdata/weatherflow2mqtt", "Mode": "rw", "Description": "Container Path: /data", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {}}}, "filerun-ofi": {"Name": "filerun-ofi", "Repository": "filerun/filerun", "Registry": "https://hub.docker.com/r/filerun/filerun", "Network": "bridge", "Privileged": "false", "Overview": "FileRun is a self-hosted Google Drive alternative. It is a full featured web based file manager with an easy to use user interface. It is great for managing your photo, movie, audio collection, or sharing files with your family and friends.", "WebUI": "http://[IP]:[PORT:80]", "Icon": "https://www.filerun.com/images/logo.png", "PostArgs": "", "Requires": "A DataBase", "CategoryList": ["Cloud", "MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaApp-Other", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos", "MediaServer-Other", "Network-Web"], "Sources": ["https://github.com/filerun", "https://hub.docker.com/r/filerun/filerun"], "Keywords": ["filerun-ofi", ["Cloud", "MediaApp-Video", "MediaApp-Music", "MediaApp-Photos", "MediaApp-Other", "MediaServer-Video", "MediaServer-Music", "MediaServer-Photos", "MediaServer-Other", "Network-Web"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"databasehost": {"value": "127.0.0.1", "Name": "DatabaseHost", "Target": "FR_DB_HOST", "Default": "127.0.0.1", "Mode": "", "Description": "Set the database IP here", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseport": {"value": "3306", "Name": "DatabasePort", "Target": "FR_DB_PORT", "Default": "3306", "Mode": "", "Description": "Set the port of your database here", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasename": {"value": "image", "Name": "DatabaseName", "Target": "FR_DB_NAME", "Default": "", "Mode": "", "Description": "Set the Database Name here", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseuser": {"value": "image", "Name": "DatabaseUser", "Target": "FR_DB_USER", "Default": "filerun", "Mode": "", "Description": "", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasepassword": {"value": "changeme", "Name": "DatabasePassword", "Target": "FR_DB_PASS", "Default": "changeme", "Mode": "", "Description": "Set the Database Password here", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {"appdata": {"value": "/mnt/user/appdata/FilesRun/", "Name": "AppData", "Target": "/var/www/html", "Default": "/mnt/user/appdata/FilesRun/", "Mode": "rw", "Description": "Set the appdata path part here", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "userfile": {"value": "/mnt/user/FileRunData/", "Name": "UserFile", "Target": "/user-files/", "Default": "/mnt/user/FileRunData/", "Mode": "rw", "Description": "Set where will be stock all image ect...", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"webuiport": {"value": "80", "Name": "WebUI Port", "Target": "80", "Default": "80", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "false", "Mask": "false"}}}}, "pterodactyl-deamons": {"Name": "pterodactyl-deamons", "Repository": "ghcr.io/pterodactyl/wings", "Registry": "https://ghcr.io/pterodactyl/wings", "Network": "bridge", "Privileged": "true", "Overview": "Pterodactyl\u00ae is a free, open-source game server management panel built with PHP, React, and Go. Designed with security in mind, Pterodactyl runs all game servers in isolated Docker containers while exposing a beautiful and intuitive UI to end users.\r\n", "WebUI": "", "Icon": "https://avatars.githubusercontent.com/u/16179146?s=200&amp;v=4", "ExtraParams": "--privileged=true --restart=unless-stopped", "PostArgs": "", "Requires": "Pterodactyl-Panel.", "Official": true, "CategoryList": ["GameServers"], "Sources": ["https://github.com/pterodactyl", "https://ghcr.io/pterodactyl/wings"], "Keywords": ["pterodactyl-deamons", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"wingsuid": {"value": "988", "Name": "WingsUID", "Target": "WINGS_UID", "Default": "988", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "wingsgid": {"value": "988", "Name": "WingsGID", "Target": "WINGS_GID", "Default": "988", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}, "wingsusername": {"value": "pterodactyl", "Name": "WingsUsername", "Target": "WINGS_USERNAME", "Default": "pterodactyl", "Mode": "", "Description": "", "Type": "Variable", "Display": "advanced", "Required": "true", "Mask": "false"}}, "Path": {"deamonslib": {"value": "/mnt/user/appdata/pterodactyldeamons/lib", "Name": "DeamonsLib", "Target": "/mnt/user/appdata/pterodactyldeamons/lib", "Default": "/mnt/user/appdata/pterodactyldeamons/lib", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "deamonslogs": {"value": "/mnt/user/appdata/pterodactyldeamons/logs", "Name": "DeamonsLogs", "Target": "/var/log/pterodactyl/", "Default": "/mnt/user/appdata/pterodactyldeamons/logs", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "deamonsetc": {"value": "/mnt/user/appdata/pterodactyldeamons/etc", "Name": "DeamonsEtc", "Target": "/etc/pterodactyl/", "Default": "/mnt/user/appdata/pterodactyldeamons/etc", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "deamonsletsenscrypt": {"value": "", "Name": "DeamonsLetsenscrypt", "Target": "/etc/letsencrypt/", "Default": "", "Mode": "rw", "Description": "Mount your SSL key.\r\nIf nginx mount your config.\r\nif reverseproxy, mount the key.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "deamonstmp": {"value": "/tmp/pterodactyl", "Name": "DeamonsTmp", "Target": "/tmp/pterodactyl/", "Default": "/tmp/pterodactyl", "Mode": "rw", "Description": "The TMP directory for pterodactyl. DO NOT CHANGE THAT", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "deamonsdockerlink": {"value": "/var/run/docker.sock", "Name": "DeamonsDockerLink", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "rw", "Description": "DO NOT CHANGE THAT !!!!", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {"deamonsport": {"value": "8080", "Name": "DeamonsPort", "Target": "8080", "Default": "8080", "Mode": "tcp", "Description": "The port of the deamons.", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "deamonssftpport": {"value": "2022", "Name": "DeamonsSFTPPort", "Target": "2022", "Default": "2022", "Mode": "tcp", "Description": "", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "pterodactyl-panel": {"Name": "pterodactyl-panel", "Repository": "ghcr.io/pterodactyl/panel", "Registry": "https://ghcr.io/pterodactyl/panel", "Network": "bridge", "Privileged": "false", "Overview": "Pterodactyl\u00ae is a free, open-source game server management panel built with PHP, React, and Go. Designed with security in mind, Pterodactyl runs all game servers in isolated Docker containers while exposing a beautiful and intuitive UI to end users.\r\n", "WebUI": "http://[IP]:[PORT:80]/", "Icon": "https://avatars.githubusercontent.com/u/16179146?s=200&amp;v=4", "PostArgs": "", "Requires": "Pterodactyl-Deamons.", "Official": true, "CategoryList": ["GameServers"], "Sources": ["https://github.com/pterodactyl", "https://ghcr.io/pterodactyl/panel"], "Keywords": ["pterodactyl-panel", ["GameServers"]], "Tag": "latest", "Config": {"Device": {}, "Label": {}, "Variable": {"databasehost": {"value": "", "Name": "DatabaseHost", "Target": "DB_HOST", "Default": "", "Mode": "", "Description": "Ip of your database", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseport": {"value": "", "Name": "DatabasePort", "Target": "DB_PORT", "Default": "3306", "Mode": "", "Description": "The port of your database", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasename": {"value": "", "Name": "DatabaseName", "Target": "DB_DATABASE", "Default": "pterodb", "Mode": "", "Description": "The name of your database.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databaseuser": {"value": "", "Name": "DatabaseUser", "Target": "DB_USERNAME", "Default": "PteroUser", "Mode": "", "Description": "The name of the database user", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "databasepassword": {"value": "", "Name": "DatabasePassword", "Target": "DB_PASSWORD", "Default": "changeme", "Mode": "", "Description": "The database password for the user.", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "true"}}, "Path": {"pterovar": {"value": "/mnt/user/appdata/pteropanel/var", "Name": "PteroVar", "Target": "/app/var", "Default": "/mnt/user/appdata/pteropanel/var", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "pteronginx": {"value": "/mnt/user/appdata/pteropanel/nginx", "Name": "PteroNginx", "Target": "/app/nginx/http.d/", "Default": "", "Mode": "rw", "Description": "", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}, "pteroletsenscrypt": {"value": "", "Name": "PteroLetsenscrypt", "Target": "/etc/letsencrypt/", "Default": "", "Mode": "rw", "Description": "Mount your SSL key.\r\nIf nginx mount your config.\r\nif reverseproxy, mount the key.", "Type": "Path", "Display": "always", "Required": "false", "Mask": "false"}, "pterologs": {"value": "/mnt/user/appdata/pteropanel/logs", "Name": "PteroLogs", "Target": "/app/storage/logs", "Default": "/mnt/user/appdata/pteropanel/logs", "Mode": "rw", "Description": "All the logs of pterodactyl panel.", "Type": "Path", "Display": "always", "Required": "true", "Mask": "false"}}, "Port": {"webhttp": {"value": "80", "Name": "WebHttp", "Target": "80", "Default": "80", "Mode": "tcp", "Description": "Port Http for the web serveur", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}, "webhttps": {"value": "443", "Name": "WebHttps", "Target": "443", "Default": "443", "Mode": "tcp", "Description": "Port Https for the web serveur ", "Type": "Port", "Display": "always", "Required": "true", "Mask": "false"}}}}, "gladys-assistant": {"Name": "gladys-assistant", "Repository": "gladysassistant/gladys", "Registry": "https://hub.docker.com/r/gladysassistant/gladys/", "Network": "host", "Privileged": "true", "Overview": "Gladys Assistant (https://gladysassistant.com) is a privacy-first, open-source home assistant. Gladys helps you centralize your connected devices, visualize data on your dashboards and build automations to make your daily life easier.\r\n", "WebUI": "http://[IP]:[PORT:8006]", "Icon": "https://gladysassistant.com/en/img/external/github-gladys-logo.png", "ExtraParams": "--restart=always --log-opt max-size=10m", "PostArgs": "", "Networking": {"Mode": "host"}, "Official": true, "CategoryList": ["HomeAutomation"], "Sources": ["https://gladysassistant.com/", "https://hub.docker.com/r/gladysassistant/gladys/"], "Keywords": ["gladys-assistant", ["HomeAutomation"]], "Requires": " App uses hostnetworking (autoadd)", "Tag": "v4", "Config": {"Device": {}, "Label": {}, "Variable": {"timezone": {"value": "Europe/Paris", "Name": "Time Zone", "Target": "TZ", "Default": "Europe/Paris", "Mode": "", "Description": "Visit https://en.wikipedia.org/wiki/List_of_tz_database_time_zones to get the right one", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "server-port": {"value": "8006", "Name": "server-port", "Target": "SERVER_PORT", "Default": "80", "Mode": "", "Description": "Container Variable: SERVER_PORT", "Type": "Variable", "Display": "always", "Required": "true", "Mask": "false"}, "dbfilepath": {"value": "/var/lib/gladysassistant/gladys-production.db", "Name": "DB File path", "Target": "SQLITE_FILE_PATH", "Default": "/var/lib/gladysassistant/gladys-production.db", "Mode": "", "Description": "Container Variable: SQLITE_FILE_PATH", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "environement": {"value": "production", "Name": "Environement", "Target": "NODE_ENV", "Default": "production", "Mode": "", "Description": "Container Variable: NODE_ENV", "Type": "Variable", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Path": {"gladyslibfolder": {"value": "/mnt/user/appdata/Gladys", "Name": "Gladys lib folder", "Target": "/var/lib/gladysassistant", "Default": "/mnt/user/appdata/Gladys", "Mode": "rw", "Description": "Container Path: /var/lib/gladysassistant", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "gladysdevfolder": {"value": "/dev", "Name": "Gladys Dev Folder", "Target": "/dev", "Default": "/dev", "Mode": "rw", "Description": "Container Path: /dev", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "gladysudevfolder": {"value": "/run/udev", "Name": "Gladys uDev Folder", "Target": "/run/udev", "Default": "/run/udev", "Mode": "ro", "Description": "Container Path: /run/udev", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}, "gladysdockerfolder": {"value": "/var/run/docker.sock", "Name": "Gladys Docker Folder", "Target": "/var/run/docker.sock", "Default": "/var/run/docker.sock", "Mode": "rw", "Description": "Container Path: /var/run/docker.sock", "Type": "Path", "Display": "advanced-hide", "Required": "true", "Mask": "false"}}, "Port": {}}}}